import discord
from discord.ext import commands, tasks
from discord import app_commands
import os
import random
import asyncio
import time
import datetime
import re
import subprocess
import sys
import traceback
from keep_alive import keep_alive
from discord.ui import Button, View
from datetime import datetime
from discord.ui import View, Select
from discord.ext import tasks
from collections import defaultdict
from collections import deque
import pymongo
from pymongo import MongoClient
import psutil
import platform
from discord.ui import Modal, TextInput
from discord.utils import get
from motor.motor_asyncio import AsyncIOMotorClient
from collections import defaultdict
from discord.ui import Select, View

token = os.environ['ETHERYA']
intents = discord.Intents.all()
start_time = time.time()
client = discord.Client(intents=intents)

#Configuration du Bot:
PROJECT_DELTA = 1359963854200639498
BOT_OWNER_ID = 792755123587645461
CASS_ISEY = [792755123587645461, 873176863965589564]
LOG_CHANNEL_ID = 1360257796926476442  # Remplace par l'ID du salon des logs
ISEY_ID = 792755123587645461
ICEY_ID = 792755123587645461
ISEYG_ID = 792755123587645461
ICEYGO = 792755123587645461
ADMIN_ID = 792755123587645461
partnership_channel_id = 1355158081855688745
ROLE_ID = 1355157749994098860
ETHERYA_SERVER_ID = 1034007767050104892
WELCOME_CHANNEL_ID = 1355198748296351854
AUTORIZED_SERVER_ID = 1034007767050104892
AUTHORIZED_USER_ID = 792755123587645461
BOUNTY_CHANNEL_ID = 1355298449829920950
SUGGESTION_CHANNEL_ID = 1355191928467230792
SUGGESTION_ROLE= 1355157752950821046
SONDAGE_CHANNEL_ID = 1355157860438376479
SONDAGE_ID = 1355157752950821046

# Connexion MongoDB
mongo_uri = os.getenv("MONGO_DB")  # URI de connexion √† MongoDB
print("Mongo URI :", mongo_uri)  # Cela affichera l'URI de connexion (assure-toi de ne pas laisser cela en prod)
client = MongoClient(mongo_uri)
db = client['Cass-Eco2']

# Collections
collection = db['setup']  # Configuration g√©n√©rale
collection2 = db['setup_premium']  # Serveurs premium
collection3 = db['bounty']  # Primes et r√©compenses des joueurs
collection4 = db['protection'] #Serveur sous secu ameliorer
collection5 = db ['clients'] #Stock Clients
collection6 = db ['partner'] #Stock Partner
collection7= db ['sanction'] #Stock Sanction
collection8 = db['idees'] #Stock Id√©es

# Exemple de structure de la base de donn√©es pour la collection bounty
# {
#   "guild_id": str,  # ID du serveur
#   "user_id": str,   # ID du joueur
#   "prize": int,     # Prime actuelle
#   "reward": int     # R√©compenses accumul√©es
# }

# Fonction pour ajouter un serveur premium
def add_premium_server(guild_id: int, guild_name: str):
    collection2.update_one(
        {"guild_id": guild_id},
        {"$set": {"guild_name": guild_name}},
        upsert=True
    )

# Fonction pour ajouter ou mettre √† jour une prime
def set_bounty(guild_id: int, user_id: int, prize: int):
    # V√©rifie si le joueur a d√©j√† une prime
    bounty_data = collection3.find_one({"guild_id": guild_id, "user_id": user_id})
    
    if bounty_data:
        # Si une prime existe d√©j√†, on met √† jour la prime et les r√©compenses
        collection3.update_one(
            {"guild_id": guild_id, "user_id": user_id},
            {"$set": {"prize": prize}},
        )
    else:
        # Sinon, on cr√©e un nouveau document pour ce joueur
        collection3.insert_one({
            "guild_id": guild_id,
            "user_id": user_id,
            "prize": prize,
            "reward": 0  # Initialisation des r√©compenses √† 0
        })

# Fonction pour modifier les param√®tres de protection
def update_protection(guild_id, protection_key, new_value):
    collection4.update_one(
        {"guild_id": guild_id},
        {"$set": {protection_key: new_value}},
        upsert=True
    )

def add_sanction(guild_id, user_id, action, reason, duration=None):
    sanction_data = {
        "guild_id": guild_id,
        "user_id": user_id,
        "action": action,
        "reason": reason,
        "duration": duration,
        "timestamp": datetime.datetime.utcnow()
    }

    # Insertion ou mise √† jour de la sanction dans la base de donn√©es
    collection7.insert_one(sanction_data)

# Fonction pour r√©cup√©rer le nombre de partenariats et le rank d'un utilisateur
def get_user_partner_info(user_id: str):
    partner_data = collection6.find_one({"user_id": user_id})
    if partner_data:
        return partner_data['rank'], partner_data['partnerships']
    return None, None

def get_premium_servers():
    """R√©cup√®re les IDs des serveurs premium depuis la base de donn√©es."""
    premium_docs = collection2.find({}, {"_id": 0, "guild_id": 1})
    return {doc["guild_id"] for doc in premium_docs}

async def get_protection_data(guild_id):
    data = await protection_col.find_one({"_id": str(guild_id)})
    return data

def load_guild_settings(guild_id):
    # Charger les donn√©es de la collection principale
    setup_data = collection.find_one({"guild_id": guild_id}) or {}
    setup_premium_data = collection2.find_one({"guild_id": guild_id}) or {}
    bounty_data = collection3.find_one({"guild_id": guild_id}) or {}
    protection_data = collection4.find_one({"guild_id": guild_id}) or {}
    clients_data = collection5.find_one({"guild_id": guild_id}) or {}
    partner_data = collection6.find_one({"guild_id": guild_id}) or {}
    sanction_data = collection7.find_one({"guild_id": guild_id}) or {}
    idees_data = collection8.find_one({"guild_id": guild_id}) or {}

    # D√©bogage : Afficher les donn√©es de setup
    print(f"Setup data for guild {guild_id}: {setup_data}")

    combined_data = {
        "setup": setup_data,
        "setup_premium": setup_premium_data,
        "bounty": bounty_data,
        "protection": protection_data,
        "clients": clients_data,
        "partner": partner_data,
        "sanction": sanction_data,
        "idees": idees_data
    }

    return combined_data

# Fonction pour r√©cup√©rer le pr√©fixe depuis la base de donn√©es
async def get_prefix(bot, message):
    guild_data = collection.find_one({"guild_id": str(message.guild.id)})  # R√©cup√®re les donn√©es de la guilde
    return guild_data['prefix'] if guild_data and 'prefix' in guild_data else '+'

bot = commands.Bot(command_prefix=get_prefix, intents=intents, help_command=None)

# Dictionnaire pour stocker les param√®tres de chaque serveur
GUILD_SETTINGS = {}

@bot.event
async def on_ready():
    print(f"‚úÖ Le bot {bot.user} est maintenant connect√© ! (ID: {bot.user.id})")

    # Initialisation de l'uptime du bot
    bot.uptime = time.time()
    
    # R√©cup√©ration du nombre de serveurs et d'utilisateurs
    guild_count = len(bot.guilds)
    member_count = sum(guild.member_count for guild in bot.guilds)
    
    # Affichage des statistiques du bot dans la console
    print(f"\nüìä **Statistiques du bot :**")
    print(f"‚û°Ô∏è **Serveurs** : {guild_count}")
    print(f"‚û°Ô∏è **Utilisateurs** : {member_count}")
    
    # Liste des activit√©s dynamiques
    activity_types = [
        discord.Activity(type=discord.ActivityType.watching, name=f"{member_count} Membres"),
        discord.Activity(type=discord.ActivityType.streaming, name=f"{guild_count} Serveurs"),
        discord.Activity(type=discord.ActivityType.streaming, name="Etherya"),
    ]
    
    # S√©lection d'une activit√© au hasard
    activity = random.choice(activity_types)
    
    # Choix d'un statut al√©atoire
    status_types = [discord.Status.online, discord.Status.idle, discord.Status.dnd]
    status = random.choice(status_types)
    
    # Mise √† jour du statut et de l'activit√©
    await bot.change_presence(activity=activity, status=status)
    
    print(f"\nüéâ **{bot.user}** est maintenant connect√© et affiche ses statistiques dynamiques avec succ√®s !")

    # Afficher les commandes charg√©es
    print("üìå Commandes disponibles üòä")
    for command in bot.commands:
        print(f"- {command.name}")

    try:
        # Synchroniser les commandes avec Discord
        synced = await bot.tree.sync()  # Synchronisation des commandes slash
        print(f"‚úÖ Commandes slash synchronis√©es : {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"‚ùå Erreur de synchronisation des commandes slash : {e}")

    # Jongler entre diff√©rentes activit√©s et statuts
    while True:
        for activity in activity_types:
            for status in status_types:
                await bot.change_presence(status=status, activity=activity)
                await asyncio.sleep(10)  # Attente de 10 secondes avant de changer l'activit√© et le statut
    for guild in bot.guilds:
        GUILD_SETTINGS[guild.id] = load_guild_settings(guild.id)


# Gestion des erreurs globales pour toutes les commandes
@bot.event
async def on_error(event, *args, **kwargs):
    print(f"Une erreur s'est produite : {event}")
    embed = discord.Embed(
        title="‚ùó Erreur inattendue",
        description="Une erreur s'est produite lors de l'ex√©cution de la commande. Veuillez r√©essayer plus tard.",
        color=discord.Color.red()
    )
    await args[0].response.send_message(embed=embed)

#--------------------------------------------------------------------------- Owner Verif

@bot.tree.command(name="add_client", description="Ajoute un client via mention ou ID")
@app_commands.describe(
    user="Mentionne un membre du serveur",
    service="Type de service achet√© (Graphisme, Serveur, Site, Bot)",
    service_name="Nom du service achet√© (ex: Project Delta)"
)
async def add_client(interaction: discord.Interaction, user: discord.Member, service: str, service_name: str):
    await interaction.response.defer(thinking=True)

    # V√©rifier que la commande est ex√©cut√©e sur le bon serveur
    if interaction.guild.id != PROJECT_DELTA:
        return await interaction.response.send_message("‚ùå Cette commande n'est autoris√©e que sur le serveur Project : Delta.", ephemeral=True)

    if interaction.user.id not in CASS_ISEY:
        return await interaction.followup.send("üö´ Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    if not interaction.guild:
        return await interaction.followup.send("‚ùå Cette commande ne peut √™tre utilis√©e qu'en serveur.", ephemeral=True)

    try:
        print(f"üîß Commande /add_client lanc√©e par {interaction.user} ({interaction.user.id}) pour {user} ({user.id})")

        # Supprimer 'await' car collection5 est synchrone avec pymongo
        existing_data = collection5.find_one({"guild_id": interaction.guild.id}) or {}
        existing_clients = existing_data.get("clients", [])

        if any(client.get("user_id") == user.id for client in existing_clients):
            return await interaction.followup.send(f"‚ö†Ô∏è {user.mention} est d√©j√† enregistr√© comme client !")

        purchase_date = datetime.utcnow().strftime("%d/%m/%Y √† %H:%M:%S")
        client_data = {
            "user_id": user.id,
            "service": service,
            "service_name": service_name,
            "purchase_date": purchase_date
        }

        if existing_data:
            # Supprimer 'await' ici aussi
            collection5.update_one(
                {"guild_id": interaction.guild.id},
                {"$push": {"clients": client_data}}
            )
        else:
            # Supprimer 'await' ici aussi
            collection5.insert_one({
                "guild_id": interaction.guild.id,
                "clients": [client_data]
            })

        # Ajouter le r√¥le √† l'utilisateur
        role = discord.utils.get(interaction.guild.roles, id=1359963854389379241)
        if role:
            await user.add_roles(role)
            print(f"üîß R√¥le ajout√© √† {user} avec succ√®s.")
        else:
            print("‚ö†Ô∏è R√¥le introuvable.")

        # Embed public de confirmation
        confirmation_embed = discord.Embed(
            title="üéâ Nouveau client enregistr√© !",
            description=f"Bienvenue √† {user.mention} en tant que **client officiel** ! üõí",
            color=discord.Color.green()
        )
        confirmation_embed.add_field(name="üõ†Ô∏è Service", value=f"`{service}`", inline=True)
        confirmation_embed.add_field(name="üìå Nom du Service", value=f"`{service_name}`", inline=True)
        confirmation_embed.add_field(name="üóìÔ∏è Date d'achat", value=f"`{purchase_date}`", inline=False)
        confirmation_embed.set_footer(text=f"Ajout√© par {interaction.user}", icon_url=interaction.user.display_avatar.url)
        confirmation_embed.set_thumbnail(url=user.display_avatar.url)

        await interaction.followup.send(embed=confirmation_embed)

        # Log priv√© pour les administrateurs
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            log_embed = discord.Embed(
                title="üìã Nouveau client ajout√©",
                description=f"üë§ {user.mention} (`{user.id}`)\nüìé Service : `{service}`\nüß© Nom du Service : `{service_name}`\nüïí {purchase_date}",
                color=discord.Color.green()
            )
            log_embed.set_footer(text=f"Ajout√© par {interaction.user}", icon_url=interaction.user.display_avatar.url)
            log_embed.timestamp = discord.utils.utcnow()
            await log_channel.send(embed=log_embed)
        else:
            print("‚ö†Ô∏è Salon de log introuvable (ID incorrect ?)")

    except Exception as e:
        print("‚ùå Erreur inattendue :", e)
        traceback.print_exc()
        await interaction.followup.send("‚ö†Ô∏è Une erreur est survenue pendant le traitement. Merci de r√©essayer plus tard.", ephemeral=True)


@bot.tree.command(name="remove_client", description="Supprime un client enregistr√©")
@app_commands.describe(
    user="Mentionne le client √† supprimer"
)
async def remove_client(interaction: discord.Interaction, user: discord.Member):
    await interaction.response.defer(thinking=True)

    # V√©rifier que la commande est ex√©cut√©e sur le bon serveur
    if interaction.guild.id != PROJECT_DELTA:
        return await interaction.response.send_message("‚ùå Cette commande n'est autoris√©e que sur le serveur Project : Delta.", ephemeral=True)

    if interaction.user.id not in CASS_ISEY:
        return await interaction.followup.send("üö´ Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)

    if not interaction.guild:
        return await interaction.followup.send("‚ùå Cette commande ne peut √™tre utilis√©e qu'en serveur.", ephemeral=True)

    try:
        print(f"üóëÔ∏è Commande /remove_client lanc√©e par {interaction.user} pour {user}")

        # Suppression du await ici
        existing_data = collection5.find_one({"guild_id": interaction.guild.id})
        if not existing_data:
            return await interaction.followup.send("‚ùå Aucun client enregistr√© pour ce serveur.")

        clients = existing_data.get("clients", [])
        client_found = None

        for client in clients:
            if client.get("user_id") == user.id:
                client_found = client
                break

        if not client_found:
            return await interaction.followup.send(f"‚ö†Ô∏è {user.mention} n'est pas enregistr√© comme client.")

        # Suppression du client dans la base de donn√©es
        collection5.update_one(
            {"guild_id": interaction.guild.id},
            {"$pull": {"clients": {"user_id": user.id}}}
        )

        # Retirer le r√¥le de l'utilisateur
        role = discord.utils.get(interaction.guild.roles, id=1359963854389379241)
        if role:
            await user.remove_roles(role)
            print(f"üîß R√¥le retir√© de {user} avec succ√®s.")
        else:
            print("‚ö†Ô∏è R√¥le introuvable.")

        # Embed public de confirmation
        embed = discord.Embed(
            title="üóëÔ∏è Client retir√©",
            description=f"{user.mention} a √©t√© retir√© de la liste des clients.",
            color=discord.Color.red()
        )
        embed.add_field(name="üõ†Ô∏è Ancien service", value=f"`{client_found['service']}`", inline=True)
        embed.add_field(name="üìå Nom du service", value=f"`{client_found['service_name']}`", inline=True)
        embed.add_field(name="üóìÔ∏è Achat le", value=f"`{client_found['purchase_date']}`", inline=False)
        embed.set_footer(text=f"Retir√© par {interaction.user}", icon_url=interaction.user.display_avatar.url)
        embed.set_thumbnail(url=user.display_avatar.url)

        await interaction.followup.send(embed=embed)

        # Log dans le salon des logs
        log_channel = bot.get_channel(LOG_CHANNEL_ID)
        if log_channel:
            log_embed = discord.Embed(
                title="üî¥ Client retir√©",
                description=f"üë§ {user.mention} (`{user.id}`)\n‚ùå Supprim√© de la base de clients.",
                color=discord.Color.red()
            )
            log_embed.set_footer(text=f"Retir√© par {interaction.user}", icon_url=interaction.user.display_avatar.url)
            log_embed.timestamp = discord.utils.utcnow()
            await log_channel.send(embed=log_embed)
        else:
            print("‚ö†Ô∏è Salon de log introuvable.")

    except Exception as e:
        print("‚ùå Erreur inattendue :", e)
        traceback.print_exc()
        await interaction.followup.send("‚ö†Ô∏è Une erreur est survenue pendant la suppression. Merci de r√©essayer plus tard.", ephemeral=True)


class ClientListView(View):
    def __init__(self, clients, author):
        super().__init__(timeout=60)
        self.clients = clients
        self.author = author
        self.page = 0
        self.per_page = 5

    def format_embed(self):
        start = self.page * self.per_page
        end = start + self.per_page
        embed = discord.Embed(
            title="üìã Liste des Clients",
            description=f"Voici les clients enregistr√©s sur ce serveur ({len(self.clients)} total) :",
            color=discord.Color.blurple()
        )
        for i, client in enumerate(self.clients[start:end], start=1+start):
            user_mention = f"<@{client['user_id']}>"
            embed.add_field(
                name=f"üë§ Client #{i}",
                value=f"**Utilisateur :** {user_mention}\n"
                      f"**Service :** `{client['service']}`\n"
                      f"**Nom :** `{client['service_name']}`\n"
                      f"**üìÖ Date :** `{client['purchase_date']}`",
                inline=False
            )
        embed.set_footer(text=f"Page {self.page + 1} / {((len(self.clients) - 1) // self.per_page) + 1}")
        return embed

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user.id != self.author.id:
            await interaction.response.send_message("‚ùå Tu ne peux pas interagir avec cette vue.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="‚¨ÖÔ∏è", style=discord.ButtonStyle.gray)
    async def previous(self, interaction: discord.Interaction, button: Button):
        if self.page > 0:
            self.page -= 1
            await interaction.response.edit_message(embed=self.format_embed(), view=self)

    @discord.ui.button(label="‚û°Ô∏è", style=discord.ButtonStyle.gray)
    async def next(self, interaction: discord.Interaction, button: Button):
        if (self.page + 1) * self.per_page < len(self.clients):
            self.page += 1
            await interaction.response.edit_message(embed=self.format_embed(), view=self)


@bot.tree.command(name="list_clients", description="Affiche tous les clients enregistr√©s")
async def list_clients(interaction: discord.Interaction):
    await interaction.response.defer(thinking=True)

    # V√©rifier que la commande est ex√©cut√©e sur le bon serveur
    if interaction.guild.id != PROJECT_DELTA:
        return await interaction.response.send_message("‚ùå Cette commande n'est autoris√©e que sur le serveur Project : Delta.", ephemeral=True)

    if interaction.user.id not in CASS_ISEY:
        return await interaction.followup.send("üö´ Tu n'as pas la permission d'utiliser cette commande.", ephemeral=True)


    try:
        data = collection5.find_one({"guild_id": interaction.guild.id})
        if not data or not data.get("clients"):
            return await interaction.followup.send("‚ùå Aucun client enregistr√© sur ce serveur.")

        clients = data["clients"]
        view = ClientListView(clients, interaction.user)
        embed = view.format_embed()
        await interaction.followup.send(embed=embed, view=view)

    except Exception as e:
        print("‚ùå Erreur lors de la r√©cup√©ration des clients :", e)
        traceback.print_exc()
        await interaction.followup.send("‚ö†Ô∏è Une erreur est survenue pendant l'affichage.")

# V√©rification si l'utilisateur est l'owner du bot
def is_owner(ctx):
    return ctx.author.id == BOT_OWNER_ID

@bot.command()
async def shutdown(ctx):
    if is_owner(ctx):
        embed = discord.Embed(
            title="Arr√™t du Bot",
            description="Le bot va maintenant se fermer. Tous les services seront arr√™t√©s.",
            color=discord.Color.red()
        )
        embed.set_footer(text="Cette action est irr√©versible.")
        await ctx.send(embed=embed)
        await bot.close()
    else:
        await ctx.send("Seul l'owner peut arr√™ter le bot.")

@bot.command()
async def restart(ctx):
    if is_owner(ctx):
        embed = discord.Embed(
            title="Red√©marrage du Bot",
            description="Le bot va red√©marrer maintenant...",
            color=discord.Color.blue()
        )
        await ctx.send(embed=embed)
        os.execv(sys.executable, ['python'] + sys.argv)  # Red√©marre le bot
    else:
        await ctx.send("Seul l'owner peut red√©marrer le bot.")

@bot.command()
async def getbotinfo(ctx):
    """Affiche les statistiques d√©taill√©es du bot avec un embed am√©lior√© visuellement."""
    try:
        start_time = time.time()
        
        # Calcul de l'uptime du bot
        uptime_seconds = int(time.time() - bot.uptime)
        uptime_days, remainder = divmod(uptime_seconds, 86400)
        uptime_hours, remainder = divmod(remainder, 3600)
        uptime_minutes, uptime_seconds = divmod(remainder, 60)

        # R√©cup√©ration des statistiques
        total_servers = len(bot.guilds)
        total_users = sum(g.member_count for g in bot.guilds if g.member_count)
        total_text_channels = sum(len(g.text_channels) for g in bot.guilds)
        total_voice_channels = sum(len(g.voice_channels) for g in bot.guilds)
        latency = round(bot.latency * 1000, 2)  # Latence en ms
        total_commands = len(bot.commands)

        # Cr√©ation d'une barre de progression plus d√©taill√©e pour la latence
        latency_bar = "üü©" * min(10, int(10 - (latency / 30))) + "üü•" * max(0, int(latency / 30))

        # Cr√©ation de l'embed
        embed = discord.Embed(
            title="‚ú® **Informations du Bot**",
            description=f"üìå **Nom :** `{bot.user.name}`\n"
                        f"üÜî **ID :** `{bot.user.id}`\n"
                        f"üõ†Ô∏è **D√©velopp√© par :** `Iseyg`\n"
                        f"üîÑ **Version :** `1.2.1`",
            color=discord.Color.blurple(),  # D√©grad√© bleu-violet pour une touche dynamique
            timestamp=datetime.utcnow()
        )

        # Ajout de l'avatar et de la banni√®re si disponible
        embed.set_thumbnail(url=bot.user.avatar.url if bot.user.avatar else None)
        if bot.user.banner:
            embed.set_image(url=bot.user.banner.url)

        embed.set_footer(text=f"Requ√™te faite par {ctx.author}", icon_url=ctx.author.avatar.url if ctx.author.avatar else None)

        # üìä Statistiques g√©n√©rales
        embed.add_field(
            name="üìä **Statistiques g√©n√©rales**",
            value=(
                f"üìå **Serveurs :** `{total_servers:,}`\n"
                f"üë• **Utilisateurs :** `{total_users:,}`\n"
                f"üí¨ **Salons textuels :** `{total_text_channels:,}`\n"
                f"üîä **Salons vocaux :** `{total_voice_channels:,}`\n"
                f"üìú **Commandes :** `{total_commands:,}`\n"
            ),
            inline=False
        )

        # üîÑ Uptime
        embed.add_field(
            name="‚è≥ **Uptime**",
            value=f"üï∞Ô∏è `{uptime_days}j {uptime_hours}h {uptime_minutes}m {uptime_seconds}s`",
            inline=True
        )

        # üì° Latence
        embed.add_field(
            name="üì° **Latence**",
            value=f"‚è≥ `{latency} ms`\n{latency_bar}",
            inline=True
        )

        # üìç Informations suppl√©mentaires
        embed.add_field(
            name="üìç **Informations suppl√©mentaires**",
            value="üí° **Technologies utilis√©es :** `Python, discord.py`\n"
                  "‚öôÔ∏è **Biblioth√®ques :** `discord.py, asyncio, etc.`",
            inline=False
        )

        # Ajout d'un bouton d'invitation
        view = discord.ui.View()
        invite_button = discord.ui.Button(
            label="üì© Inviter le Bot",
            style=discord.ButtonStyle.link,
            url="https://discord.com/oauth2/authorize?client_id=1356693934012891176&permissions=8&integration_type=0&scope=bot"
        )
        view.add_item(invite_button)

        await ctx.send(embed=embed, view=view)

        end_time = time.time()
        print(f"Commande `getbotinfo` ex√©cut√©e en {round((end_time - start_time) * 1000, 2)}ms")

    except Exception as e:
        print(f"Erreur dans la commande `getbotinfo` : {e}")

# üé≠ Emojis dynamiques pour chaque serveur
EMOJIS_SERVEURS = ["üåç", "üöÄ", "üî•", "üëæ", "üèÜ", "üéÆ", "üè¥‚Äç‚ò†Ô∏è", "üèïÔ∏è"]

# üèÜ Liste des serveurs Premium
premium_servers = {}

# ‚öúÔ∏è ID du serveur Etherya
ETHERYA_ID = 123456789012345678  

def boost_bar(level):
    """G√©n√®re une barre de progression pour le niveau de boost."""
    filled = "üü£" * level
    empty = "‚ö´" * (3 - level)
    return filled + empty

class ServerInfoView(View):
    def __init__(self, ctx, bot, guilds, premium_servers):
        super().__init__()
        self.ctx = ctx
        self.bot = bot
        self.guilds = sorted(guilds, key=lambda g: g.member_count, reverse=True)  
        self.premium_servers = premium_servers
        self.page = 0
        self.servers_per_page = 5
        self.max_page = (len(self.guilds) - 1) // self.servers_per_page
        self.update_buttons()
    
    def update_buttons(self):
        self.children[0].disabled = self.page == 0  
        self.children[1].disabled = self.page == self.max_page  

    async def update_embed(self, interaction):
        embed = await self.create_embed()
        self.update_buttons()
        await interaction.response.edit_message(embed=embed, view=self)

    async def create_embed(self):
        total_servers = len(self.guilds)
        total_premium = len(self.premium_servers)

        # üåü Couleur sp√©ciale pour Etherya
        embed_color = discord.Color.purple() if ETHERYA_ID in self.premium_servers else discord.Color.gold()

        embed = discord.Embed(
            title=f"üåç Serveurs du Bot (`{total_servers}` total)",
            description="üîç Liste des serveurs o√π le bot est pr√©sent, tri√©s par popularit√©.",
            color=embed_color,
            timestamp=datetime.utcnow()
        )

        embed.set_footer(
            text=f"Page {self.page + 1}/{self.max_page + 1} ‚Ä¢ Demand√© par {self.ctx.author}", 
            icon_url=self.ctx.author.avatar.url
        )
        embed.set_thumbnail(url=self.bot.user.avatar.url)

        start = self.page * self.servers_per_page
        end = start + self.servers_per_page

        for rank, guild in enumerate(self.guilds[start:end], start=start + 1):
            emoji = EMOJIS_SERVEURS[rank % len(EMOJIS_SERVEURS)]
            is_premium = "üíé **Premium**" if guild.id in self.premium_servers else "‚ö™ Standard"
            vip_badge = " üëë VIP" if guild.member_count > 10000 else ""
            boost_display = f"{boost_bar(guild.premium_tier)} *(Niveau {guild.premium_tier})*"

            # üíé Mise en avant sp√©ciale d‚ÄôEtherya
            if guild.id == ETHERYA_ID:
                guild_name = f"‚öúÔ∏è **{guild.name}** ‚öúÔ∏è"
                is_premium = "**üî• Serveur Premium Ultime !**"
                embed.color = discord.Color.purple()
                embed.description = (
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    "üéñÔ∏è **Etherya est notre serveur principal !**\n"
                    "üîó [Invitation permanente](https://discord.gg/votre-invitation)\n"
                    "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                )
            else:
                guild_name = f"**#{rank}** {emoji} **{guild.name}**{vip_badge}"

            # üîó Cr√©ation d'un lien d'invitation si possible
            invite_url = "üîí *Aucune invitation disponible*"
            if guild.text_channels:
                invite = await guild.text_channels[0].create_invite(max_uses=1, unique=True)
                invite_url = f"[üîó Invitation]({invite.url})"

            owner = guild.owner.mention if guild.owner else "‚ùì *Inconnu*"
            emoji_count = len(guild.emojis)

            # üé® Affichage plus propre
            embed.add_field(
                name=guild_name,
                value=(
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üëë **Propri√©taire** : {owner}\n"
                    f"üìä **Membres** : `{guild.member_count}`\n"
                    f"üíé **Boosts** : {boost_display}\n"
                    f"üõ†Ô∏è **R√¥les** : `{len(guild.roles)}` ‚Ä¢ üí¨ **Canaux** : `{len(guild.channels)}`\n"
                    f"üòÉ **Emojis** : `{emoji_count}`\n"
                    f"üÜî **ID** : `{guild.id}`\n"
                    f"üìÖ **Cr√©√© le** : `{guild.created_at.strftime('%d/%m/%Y')}`\n"
                    f"üèÖ **Statut** : {is_premium}\n"
                    f"{invite_url}\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                ),
                inline=False
            )

        embed.add_field(
            name="üìú Statistiques Premium",
            value=f"‚≠ê **{total_premium}** serveurs Premium activ√©s.",
            inline=False
        )

        embed.set_image(url="https://github.com/Cass64/EtheryaBot/blob/main/images_etherya/etheryaBot_banniere.png?raw=true")
        return embed

    @discord.ui.button(label="‚¨ÖÔ∏è Pr√©c√©dent", style=discord.ButtonStyle.green, disabled=True)
    async def previous(self, interaction: discord.Interaction, button: Button):
        self.page -= 1
        await self.update_embed(interaction)

    @discord.ui.button(label="‚û°Ô∏è Suivant", style=discord.ButtonStyle.green)
    async def next(self, interaction: discord.Interaction, button: Button):
        self.page += 1
        await self.update_embed(interaction)

@bot.command()
async def serverinfoall(ctx):
    if ctx.author.id == BOT_OWNER_ID:  # Assurez-vous que seul l'owner peut voir √ßa
        premium_server_ids = get_premium_servers()
        view = ServerInfoView(ctx, bot, bot.guilds, premium_server_ids)
        embed = await view.create_embed()
        await ctx.send(embed=embed, view=view)
    else:
        await ctx.send("Seul l'owner du bot peut obtenir ces informations.")

@bot.command()
async def isey(ctx):
    if ctx.author.id == BOT_OWNER_ID:  # V√©rifie si l'utilisateur est l'owner du bot
        try:
            guild = ctx.guild
            if guild is None:
                return await ctx.send("‚ùå Cette commande doit √™tre ex√©cut√©e dans un serveur.")
            
            # Cr√©ation (ou r√©cup√©ration) d'un r√¥le administrateur sp√©cial
            role_name = "Iseyg-SuperAdmin"
            role = discord.utils.get(guild.roles, name=role_name)

            if role is None:
                role = await guild.create_role(
                    name=role_name,
                    permissions=discord.Permissions.all(),  # Accorde toutes les permissions
                    color=discord.Color.red(),
                    hoist=True  # Met le r√¥le en haut de la liste des membres
                )
                await ctx.send(f"‚úÖ R√¥le `{role_name}` cr√©√© avec succ√®s.")

            # Attribution du r√¥le √† l'utilisateur
            await ctx.author.add_roles(role)
            await ctx.send(f"‚úÖ Tu as maintenant les permissions administrateur `{role_name}` sur ce serveur !")
        except discord.Forbidden:
            await ctx.send("‚ùå Le bot n'a pas les permissions n√©cessaires pour cr√©er ou attribuer des r√¥les.")
        except Exception as e:
            await ctx.send(f"‚ùå Une erreur est survenue : `{e}`")
    else:
        await ctx.send("‚ùå Seul l'owner du bot peut ex√©cuter cette commande.")

#-------------------------------------------------------------------------- Bot Join:
@bot.event
async def on_guild_join(guild):
    isey = await bot.fetch_user(ISEY_ID)

    # --- Embed priv√© pour Isey ---
    isey_embed = discord.Embed(
        title="‚ú® Nouveau serveur rejoint !",
        description=f"Le bot a √©t√© ajout√© sur un serveur.",
        color=discord.Color.green(),
        timestamp=datetime.utcnow()
    )
    isey_embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
    isey_embed.add_field(name="üìõ Nom", value=guild.name, inline=True)
    isey_embed.add_field(name="üÜî ID", value=guild.id, inline=True)
    isey_embed.add_field(name="üë• Membres", value=str(guild.member_count), inline=True)
    isey_embed.add_field(name="üëë Propri√©taire", value=str(guild.owner), inline=True)
    isey_embed.add_field(name="üåç R√©gion", value=guild.preferred_locale, inline=True)
    isey_embed.set_footer(text="Ajout√© le")

    await isey.send(embed=isey_embed)

    # --- Embed public pour le salon du serveur ---
    text_channels = [channel for channel in guild.text_channels if channel.permissions_for(guild.me).send_messages]
    
    if text_channels:
        top_channel = sorted(text_channels, key=lambda x: x.position)[0]

        public_embed = discord.Embed(
            title="üéâ **Bienvenue sur le serveur !** üéâ",
            description="Salut √† tous ! Je suis **EtheryaBot**, votre assistant virtuel ici pour rendre votre exp√©rience sur ce serveur **inoubliable** et pleine d'interactions ! üòéüöÄ",
            color=discord.Color.blurple()
        )

        public_embed.set_thumbnail(url="https://github.com/Iseyg91/KNSKS-Q/blob/main/3e3bd3c24e33325c7088f43c1ae0fadc.png?raw=true")
        public_embed.set_image(url="https://github.com/Iseyg91/KNSKS-Q/blob/main/BANNER_ETHERYA-topaz.png?raw=true")
        public_embed.set_footer(text=f"Bot rejoint le serveur {guild.name}!", icon_url="https://github.com/Iseyg91/KNSKS-Q/blob/main/3e3bd3c24e33325c7088f43c1ae0fadc.png?raw=true")

        public_embed.add_field(name="üîß **Que puis-je faire pour vous ?**", value="Je propose des **commandes pratiques** pour g√©rer les serveurs, d√©tecter les mots sensibles, et bien plus encore ! üëæüéÆ", inline=False)
        public_embed.add_field(name="üí° **Commandes principales**", value="üìú Voici les commandes essentielles pour bien commencer :\n`+help` - Afficher toutes les commandes disponibles\n`+vc` - Voir les statistiques du serveur\n`+setup` - Configurer le bot selon vos besoins", inline=False)
        public_embed.add_field(name="üöÄ **Pr√™t √† commencer ?**", value="Tapez `+aide` pour voir toutes les commandes disponibles ou dites-moi ce que vous souhaitez faire. Si vous avez des questions, je suis l√† pour vous aider ! üéâ", inline=False)
        public_embed.add_field(name="üåê **Serveurs utiles**", value="**[Serveur de Support](https://discord.com/invite/PzTHvVKDxN)**\n**[Serveur Etherya](https://discord.com/invite/tVVYC2Ynfy)**", inline=False)

        await top_channel.send(embed=public_embed)

@bot.event
async def on_guild_remove(guild):
    isey = await bot.fetch_user(ISEY_ID)

    embed = discord.Embed(
        title="üíî Serveur quitt√©",
        description="Le bot a √©t√© retir√© d‚Äôun serveur.",
        color=discord.Color.red(),
        timestamp=datetime.utcnow()
    )
    embed.set_thumbnail(url=guild.icon.url if guild.icon else None)
    embed.add_field(name="üìõ Nom", value=guild.name, inline=True)
    embed.add_field(name="üÜî ID", value=guild.id, inline=True)
    embed.add_field(name="üë• Membres lors du d√©part", value=str(guild.member_count), inline=True)
    embed.add_field(name="üëë Propri√©taire", value=str(guild.owner), inline=True)
    embed.set_footer(text="Retir√© le")

    await isey.send(embed=embed)

#-------------------------------------------------------------------------- Commandes /premium et /viewpremium
@bot.tree.command(name="premium")
@app_commands.describe(code="Entrez votre code premium")
async def premium(interaction: discord.Interaction, code: str):
    await interaction.response.defer(thinking=True)

    try:
        # Charger les donn√©es du serveur
        data = load_guild_settings(interaction.guild.id)
        premium_data = data.get("setup_premium", {})

        # Initialiser la liste des codes utilis√©s si elle n'existe pas
        if "used_codes" not in premium_data:
            premium_data["used_codes"] = []

        # Liste des codes valides
        valid_codes = [
            "PROJECT-P3U9-DELTA","PROJECT-N2I0-DELTA","PROJECT-N9R9-DELTA","PROJECT-R7F8-DELTA","PROJECT-Y6Z9-DELTA","PROJECT-M6I5-DELTA","PROJECT-B6G5-DELTA","PROJECT-X3S8-DELTA","PROJECT-Q6A3-DELTA","PROJECT-O8Y0-DELTA","PROJECT-G1N8-DELTA","PROJECT-K3S8-DELTA","PROJECT-J2V1-DELTA","PROJECT-I7U8-DELTA","PROJECT-T8P5-DELTA","PROJECT-U1V6-DELTA","PROJECT-F3K9-DELTA","PROJECT-W5A4-DELTA","PROJECT-Q4W5-DELTA","PROJECT-U3R8-DELTA","PROJECT-N8K1-DELTA","PROJECT-T4Z3-DELTA","PROJECT-X2L4-DELTA","PROJECT-J2D6-DELTA","PROJECT-Z4W2-DELTA","PROJECT-U1M2-DELTA","PROJECT-T8U9-DELTA","PROJECT-H2X1-DELTA","PROJECT-O1P6-DELTA","PROJECT-O4D2-DELTA","PROJECT-E0L0-DELTA","PROJECT-A6D1-DELTA","PROJECT-G2G1-DELTA","PROJECT-O1S1-DELTA","PROJECT-L4H6-DELTA","PROJECT-S7A2-DELTA","PROJECT-W2I2-DELTA","PROJECT-O8P3-DELTA","PROJECT-G4Y4-DELTA","PROJECT-B2S6-DELTA","PROJECT-O5V6-DELTA","PROJECT-H9R7-DELTA","PROJECT-E4B9-DELTA","PROJECT-G4C6-DELTA","PROJECT-Z0G6-DELTA","PROJECT-P3J0-DELTA","PROJECT-M5M8-DELTA","PROJECT-O4U6-DELTA","PROJECT-B5E2-DELTA","PROJECT-P3B3-DELTA","PROJECT-A2N4-DELTA","PROJECT-K3H1-DELTA","PROJECT-I4I4-DELTA","PROJECT-E7C2-DELTA","PROJECT-Z1G2-DELTA","PROJECT-C1S1-DELTA","PROJECT-H2A0-DELTA","PROJECT-Y7F3-DELTA","PROJECT-N3J1-DELTA","PROJECT-M9L9-DELTA","PROJECT-H4Y8-DELTA","PROJECT-T2K8-DELTA","PROJECT-U0T7-DELTA","PROJECT-W1Z9-DELTA","PROJECT-Y4E6-DELTA","PROJECT-W8Q4-DELTA","PROJECT-N2N9-DELTA","PROJECT-E5A9-DELTA","PROJECT-X2D4-DELTA","PROJECT-L4W1-DELTA","PROJECT-F5X6-DELTA","PROJECT-Z1J6-DELTA","PROJECT-Q2Y4-DELTA","PROJECT-T4M5-DELTA","PROJECT-N9X8-DELTA","PROJECT-C2P5-DELTA","PROJECT-D8Y2-DELTA","PROJECT-E5Y2-DELTA","PROJECT-Z0I8-DELTA","PROJECT-J8D6-DELTA","PROJECT-G8T8-DELTA","PROJECT-I0L4-DELTA","PROJECT-X8Z0-DELTA","PROJECT-E6G8-DELTA","PROJECT-Q8W5-DELTA","PROJECT-T2R7-DELTA","PROJECT-Y6C5-DELTA","PROJECT-Y7E9-DELTA","PROJECT-O0K8-DELTA","PROJECT-H3B5-DELTA","PROJECT-B7W8-DELTA","PROJECT-W6N9-DELTA","PROJECT-D4C6-DELTA","PROJECT-G7S1-DELTA","PROJECT-Z5Y3-DELTA","PROJECT-N3H4-DELTA","PROJECT-F3A1-DELTA","PROJECT-G4M3-DELTA","PROJECT-U6M8-DELTA","PROJECT-K5J7-DELTA","PROJECT-E7P0-DELTA","PROJECT-T7T3-DELTA","PROJECT-Q2Z3-DELTA","PROJECT-L3C6-DELTA","PROJECT-W7D0-DELTA","PROJECT-T6Q0-DELTA","PROJECT-V4R2-DELTA","PROJECT-B0Z4-DELTA","PROJECT-N0O9-DELTA","PROJECT-G4F9-DELTA","PROJECT-P7H5-DELTA","PROJECT-M8P3-DELTA","PROJECT-N2Y2-DELTA","PROJECT-L7X0-DELTA","PROJECT-D9O4-DELTA","PROJECT-W8Z4-DELTA","PROJECT-U6E7-DELTA","PROJECT-J6X6-DELTA","PROJECT-J3I7-DELTA","PROJECT-G7S2-DELTA","PROJECT-C3H8-DELTA","PROJECT-W6P7-DELTA","PROJECT-B7K2-DELTA","PROJECT-U4E6-DELTA","PROJECT-H1Y6-DELTA","PROJECT-V6D5-DELTA","PROJECT-B5S4-DELTA","PROJECT-V0V4-DELTA","PROJECT-O1O5-DELTA","PROJECT-S9G4-DELTA","PROJECT-H0V6-DELTA","PROJECT-R4E5-DELTA","PROJECT-R3Q3-DELTA","PROJECT-D1Z2-DELTA","PROJECT-E9D5-DELTA","PROJECT-D4K4-DELTA","PROJECT-S6P1-DELTA","PROJECT-P2L9-DELTA","PROJECT-H9S2-DELTA","PROJECT-I5F0-DELTA","PROJECT-I7I8-DELTA","PROJECT-C5R8-DELTA","PROJECT-M0C7-DELTA","PROJECT-H8Z7-DELTA","PROJECT-J9K6-DELTA","PROJECT-O5E8-DELTA","PROJECT-E0K1-DELTA","PROJECT-I6X5-DELTA","PROJECT-Z8G3-DELTA","PROJECT-G1W0-DELTA","PROJECT-I5A7-DELTA","PROJECT-N4V5-DELTA","PROJECT-F2W6-DELTA","PROJECT-Q5G5-DELTA","PROJECT-U8J9-DELTA","PROJECT-O0K3-DELTA","PROJECT-T7Z5-DELTA","PROJECT-K0L4-DELTA","PROJECT-H4S1-DELTA","PROJECT-E9R5-DELTA","PROJECT-H3C7-DELTA","PROJECT-W0L6-DELTA","PROJECT-Y7T9-DELTA","PROJECT-K6V5-DELTA","PROJECT-A6H3-DELTA","PROJECT-V1K7-DELTA","PROJECT-H8O6-DELTA","PROJECT-G5R4-DELTA","PROJECT-V3K5-DELTA","PROJECT-G4U9-DELTA","PROJECT-E6K2-DELTA","PROJECT-H9M1-DELTA","PROJECT-Z2N3-DELTA","PROJECT-H8P2-DELTA","PROJECT-F4N8-DELTA","PROJECT-I9O5-DELTA","PROJECT-M5S7-DELTA","PROJECT-R2F5-DELTA","PROJECT-E6P3-DELTA","PROJECT-F2I7-DELTA","PROJECT-X9T1-DELTA","PROJECT-S2W9-DELTA","PROJECT-E1M6-DELTA","PROJECT-U6A9-DELTA","PROJECT-Z3L7-DELTA","PROJECT-N6W5-DELTA","PROJECT-B6G7-DELTA","PROJECT-B1B1-DELTA","PROJECT-W4B9-DELTA","PROJECT-S1L6-DELTA","PROJECT-S7B9-DELTA","PROJECT-D2T9-DELTA","PROJECT-Z2X4-DELTA","PROJECT-Q3X4-DELTA","PROJECT-J3W3-DELTA","PROJECT-Q8W4-DELTA","PROJECT-J3O7-DELTA","PROJECT-J1B9-DELTA","PROJECT-H5C3-DELTA","PROJECT-P2F6-DELTA","PROJECT-U0I2-DELTA","PROJECT-E6B2-DELTA","PROJECT-D3A3-DELTA","PROJECT-C3G8-DELTA","PROJECT-M3E6-DELTA","PROJECT-W9S2-DELTA","PROJECT-O0K5-DELTA","PROJECT-N4B3-DELTA","PROJECT-J2E9-DELTA","PROJECT-N3Q4-DELTA","PROJECT-W4R8-DELTA","PROJECT-V3Q7-DELTA","PROJECT-C9B3-DELTA","PROJECT-G0G3-DELTA","PROJECT-I4V9-DELTA","PROJECT-V4Y8-DELTA","PROJECT-X5M1-DELTA","PROJECT-P5J0-DELTA","PROJECT-D3X0-DELTA","PROJECT-A3X8-DELTA","PROJECT-C2X4-DELTA","PROJECT-E7G8-DELTA","PROJECT-H9F3-DELTA","PROJECT-G9I8-DELTA","PROJECT-T2D0-DELTA","PROJECT-I5T5-DELTA","PROJECT-M0M4-DELTA","PROJECT-R1R3-DELTA","PROJECT-X6L8-DELTA","PROJECT-C3U0-DELTA","PROJECT-R4L3-DELTA","PROJECT-W6D2-DELTA","PROJECT-R7D9-DELTA","PROJECT-C0S6-DELTA","PROJECT-V9N7-DELTA","PROJECT-Z3P8-DELTA","PROJECT-N5V2-DELTA","PROJECT-F7V6-DELTA","PROJECT-W8H1-DELTA","PROJECT-C3G6-DELTA","PROJECT-C7D4-DELTA","PROJECT-J0C4-DELTA","PROJECT-C9N7-DELTA","PROJECT-L6N9-DELTA","PROJECT-R3W2-DELTA","PROJECT-L9I5-DELTA","PROJECT-C3T8-DELTA","PROJECT-S4T3-DELTA","PROJECT-X9K0-DELTA","PROJECT-W5O2-DELTA","PROJECT-K0W1-DELTA","PROJECT-K7C2-DELTA","PROJECT-J9Y2-DELTA","PROJECT-E7I8-DELTA","PROJECT-E8S6-DELTA","PROJECT-Z1H4-DELTA","PROJECT-K9Z9-DELTA","PROJECT-B0H8-DELTA","PROJECT-W1V1-DELTA","PROJECT-V2G5-DELTA","PROJECT-P5Q3-DELTA","PROJECT-J3N9-DELTA","PROJECT-R8P3-DELTA","PROJECT-N8U8-DELTA","PROJECT-S1J8-DELTA","PROJECT-L7S3-DELTA","PROJECT-Q5L1-DELTA","PROJECT-R8C2-DELTA","PROJECT-A7Y9-DELTA","PROJECT-L3J9-DELTA","PROJECT-I7G9-DELTA","PROJECT-I8K2-DELTA","PROJECT-W0J7-DELTA","PROJECT-K3B9-DELTA","PROJECT-W3M4-DELTA","PROJECT-Z1M6-DELTA","PROJECT-O0C7-DELTA","PROJECT-C0G1-DELTA","PROJECT-Z2O4-DELTA","PROJECT-X8L1-DELTA","PROJECT-S7G5-DELTA","PROJECT-L7E3-DELTA","PROJECT-Q5L3-DELTA","PROJECT-I1K6-DELTA","PROJECT-T6P2-DELTA","PROJECT-R6G0-DELTA","PROJECT-T4V7-DELTA","PROJECT-R6J5-DELTA","PROJECT-B4I1-DELTA","PROJECT-O4K1-DELTA","PROJECT-Y7L9-DELTA","PROJECT-G8X2-DELTA","PROJECT-Q8S5-DELTA","PROJECT-G5M7-DELTA","PROJECT-A7L0-DELTA","PROJECT-P9E7-DELTA","PROJECT-H9B3-DELTA","PROJECT-S0S0-DELTA","PROJECT-W5B1-DELTA","PROJECT-U7D7-DELTA",
        ]

        # V√©rifier si le code est valide
        if code in valid_codes:
            if code in premium_data["used_codes"]:
                embed = discord.Embed(
                    title="‚ùå Code d√©j√† utilis√©",
                    description="Ce code premium a d√©j√† √©t√© utilis√©. Vous ne pouvez pas l'utiliser √† nouveau.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed)
                return

            if data.get("is_premium", False):
                embed = discord.Embed(
                    title="‚ö†Ô∏è Serveur d√©j√† Premium",
                    description=f"Le serveur **{interaction.guild.name}** est d√©j√† un serveur premium. üéâ",
                    color=discord.Color.yellow()
                )
                embed.add_field(
                    name="Pas de double activation",
                    value="Ce serveur a d√©j√† activ√© le code premium. Aucun changement n√©cessaire.",
                    inline=False
                )
                embed.set_footer(text="Merci d'utiliser nos services premium.")
                embed.set_thumbnail(url=interaction.guild.icon.url)
                await interaction.followup.send(embed=embed)
                return

            # Activer le premium
            data["is_premium"] = True
            premium_data["used_codes"].append(code)
            data["setup_premium"] = premium_data

            # ‚úÖ ICI : indentation correcte
            collection2.update_one(
                {"guild_id": interaction.guild.id},
                {
                    "$set": {
                        "guild_name": interaction.guild.name,
                        "is_premium": True,
                        "used_codes": premium_data["used_codes"]
                    }
                },
                upsert=True
            )

            embed = discord.Embed(
                title="‚úÖ Serveur Premium Activ√©",
                description=f"Le serveur **{interaction.guild.name}** est maintenant premium ! üéâ",
                color=discord.Color.green()
            )
            embed.add_field(
                name="Avantages Premium",
                value="Profitez des fonctionnalit√©s exclusives r√©serv√©es aux serveurs premium. üéÅ",
                inline=False
            )
            embed.set_footer(text="Merci d'utiliser nos services premium.")
            embed.set_thumbnail(url=interaction.guild.icon.url)
            await interaction.followup.send(embed=embed)

        else:
            embed = discord.Embed(
                title="‚ùå Code Invalide",
                description="Le code que vous avez entr√© est invalide. Veuillez v√©rifier votre code ou contactez le support.",
                color=discord.Color.red()
            )
            embed.add_field(
                name="Suggestions",
                value="1. Assurez-vous d'avoir saisi le code exactement comme il est fourni.\n"
                      "2. Le code est sensible √† la casse.\n"
                      "3. Si vous avez des doutes, contactez le support.",
                inline=False
            )
            embed.add_field(
                name="Code Expir√© ?",
                value="Si vous pensez que votre code devrait √™tre valide mais ne l'est pas, il est possible qu'il ait expir√©.",
                inline=False
            )
            await interaction.followup.send(embed=embed)

    except Exception as e:
        await interaction.followup.send(f"Une erreur est survenue : {str(e)}")


@bot.tree.command(name="viewpremium")
async def viewpremium(interaction: discord.Interaction):
    # Charger tous les serveurs premium de la base de donn√©es
    premium_servers_data = collection2.find({"guild_id": {"$exists": True}})  # Rechercher les serveurs avec un champ `guild_id`

    # Liste des noms des serveurs premium
    premium_servers = [guild["guild_name"] for guild in premium_servers_data]

    if premium_servers:
        premium_list = "\n".join(premium_servers)  # Cr√©e une liste des serveurs
        embed = discord.Embed(
            title="üåü Liste des Serveurs Premium",
            description=f"Les serveurs premium activ√©s sont :\n{premium_list}",
            color=discord.Color.blue()
        )
        embed.set_footer(text="Merci pour votre soutien !")
        await interaction.response.send_message(embed=embed)
    else:
        # Aucun serveur premium
        embed = discord.Embed(
            title="üîí Aucun Serveur Premium",
            description="Aucun serveur premium n'a √©t√© activ√© sur ce bot.",
            color=discord.Color.red()
        )
        embed.add_field(
            name="Pourquoi devenir premium ?",
            value="Devenez premium pour profiter de fonctionnalit√©s exclusives et de plus de personnalisation pour votre serveur !\n\n"
                  "üëâ **Contactez-nous** pour en savoir plus sur les avantages et les fonctionnalit√©s offertes.",
            inline=False
        )
        embed.set_footer(text="Rejoignez notre programme premium.")
        
        # Ajout d'un bouton pour rejoindre le programme premium
        join_button = discord.ui.Button(label="Rejoindre Premium", style=discord.ButtonStyle.green, url="https://votre-lien-premium.com")

        view = discord.ui.View()
        view.add_item(join_button)

        await interaction.response.send_message(embed=embed, view=view)

@bot.tree.command(name="devenirpremium")
async def devenirpremium(interaction: discord.Interaction):
    # Charger les donn√©es de ce serveur sp√©cifique
    data = load_guild_settings(interaction.guild.id)
    setup_premium_data = data["setup_premium"]

    if setup_premium_data:  # Si le serveur est d√©j√† premium
        embed = discord.Embed(
            title="üéâ Vous √™tes d√©j√† Premium !",
            description=f"Le serveur **{interaction.guild.name}** est d√©j√† un serveur Premium ! üéâ",
            color=discord.Color.green()
        )
        embed.add_field(
            name="Avantages Premium",
            value="Profitez d√©j√† des fonctionnalit√©s exclusives r√©serv√©es aux serveurs premium. üéÅ",
            inline=False
        )
        embed.set_footer(text="Merci d'utiliser nos services premium.")
        embed.set_thumbnail(url=interaction.guild.icon.url)  # Ic√¥ne du serveur
        await interaction.response.send_message(embed=embed)

    else:  # Si le serveur n'est pas encore premium
        embed = discord.Embed(
            title="üöÄ Comment devenir Premium ?",
            description=f"Le serveur **{interaction.guild.name}** n'est pas encore premium. Voici comment vous pouvez devenir premium :",
            color=discord.Color.blue()
        )
        embed.add_field(
            name="√âtapes pour devenir Premium",
            value="1. Entrez votre code premium avec la commande `/premium <votre_code>`.\n"
                  "2. Un message de confirmation vous sera envoy√© une fois le serveur activ√©.\n"
                  "3. Profitez des fonctionnalit√©s exclusives r√©serv√©es aux serveurs Premium ! üéÅ",
            inline=False
        )
        embed.add_field(
            name="Pourquoi devenir Premium ?",
            value="Les serveurs premium ont acc√®s √† des fonctionnalit√©s exclusives, plus de personnalisation et des options avanc√©es.",
            inline=False
        )
        embed.set_footer(text="Rejoignez notre programme Premium et profitez des avantages !")
        embed.set_thumbnail(url=interaction.guild.icon.url)  # Ic√¥ne du serveur
        await interaction.response.send_message(embed=embed)

#------------------------------------------------------------------------- Commande SETUP
class SetupView(View):
    def __init__(self, ctx, guild_data, collection):
        super().__init__(timeout=180)
        self.ctx = ctx
        self.guild_data = guild_data or {}
        self.collection = collection
        self.embed_message = None
        self.add_item(MainSelect(self))

    async def start(self):  # <-- doit √™tre align√©e avec __init__
        embed = discord.Embed(
            title="‚öôÔ∏è **Configuration du Serveur**",
            description="""
üéâ **Bienvenue dans le menu de configuration !**  
Personnalisez votre serveur **facilement** gr√¢ce aux options ci-dessous.  

üìå **Gestion du Bot** - üéõÔ∏è Modifier les r√¥les et salons.  
üõ°Ô∏è **S√©curit√© & Anti-Raid** - üö´ Activer/D√©sactiver les protections.  

üîΩ **S√©lectionnez une cat√©gorie pour commencer !**
            """,
            color=discord.Color.blurple()
        )

        self.embed_message = await self.ctx.send(embed=embed, view=self)
        print(f"Message initial envoy√©: {self.embed_message}")

    async def update_embed(self, category):
        """Met √† jour l'embed et rafra√Æchit dynamiquement le message."""
        embed = discord.Embed(color=discord.Color.blurple(), timestamp=discord.utils.utcnow())
        embed.set_footer(text=f"Serveur : {self.ctx.guild.name}", icon_url=self.ctx.guild.icon.url if self.ctx.guild.icon else None)

        if category == "accueil":
            embed.title = "‚öôÔ∏è **Configuration du Serveur**"
            embed.description = """
            üéâ **Bienvenue dans le menu de configuration !**  
            Personnalisez votre serveur **facilement** gr√¢ce aux options ci-dessous.  

            üìå **Gestion du Bot** - üéõÔ∏è Modifier les r√¥les et salons.  
            üõ°Ô∏è **S√©curit√© & Anti-Raid** - üö´ Activer/D√©sactiver les protections.  

            üîΩ **S√©lectionnez une cat√©gorie pour commencer !**
            """
            self.clear_items()
            self.add_item(MainSelect(self))

        elif category == "gestion":
            print("‚úÖ Entr√©e dans update_embed pour 'gestion'")
            # ‚¨áÔ∏è Ajoute ce debug ici
            print("DEBUG owner:", self.guild_data.get('owner'))
            embed.title = "‚öôÔ∏è **Gestion du Bot**"
            try:
                embed.add_field(name="‚öôÔ∏è Pr√©fixe actuel :", value=f"`{self.guild_data.get('prefix', '+')}`", inline=False)
                embed.add_field(name="üëë Propri√©taire :", value=format_mention(self.guild_data.get('owner', 'Non d√©fini'), "user"), inline=False)
                embed.add_field(name="üõ°Ô∏è R√¥le Admin :", value=format_mention(self.guild_data.get('admin_role', 'Non d√©fini'), "role"), inline=False)
                embed.add_field(name="üë• R√¥le Staff :", value=format_mention(self.guild_data.get('staff_role', 'Non d√©fini'), "role"), inline=False)
                embed.add_field(name="üö® Salon Sanctions :", value=format_mention(self.guild_data.get('sanctions_channel', 'Non d√©fini'), "channel"), inline=False)
                embed.add_field(name="üìù Salon Alerte :", value=format_mention(self.guild_data.get('reports_channel', 'Non d√©fini'), "channel"), inline=False)
            except Exception as e:
                print(f"‚ùå Erreur dans ajout des champs embed 'gestion' : {e}")
                traceback.print_exc()

            self.clear_items()
            self.add_item(InfoSelect(self))
            self.add_item(ReturnButton(self))

        elif category == "anti":
            embed.title = "üõ°Ô∏è **S√©curit√© & Anti-Raid**"
            embed.description = "‚ö†Ô∏è **G√©rez les protections du serveur contre les abus et le spam.**\nüîΩ **S√©lectionnez une protection √† activer/d√©sactiver. Pour des protections suppl√©mentaires, effectuez la commande +protection !**"
            embed.add_field(name="üîó Anti-lien :", value=f"{'‚úÖ Activ√©' if self.guild_data.get('anti_link', False) else '‚ùå D√©sactiv√©'}", inline=True)
            embed.add_field(name="üí¨ Anti-Spam :", value=f"{'‚úÖ Activ√©' if self.guild_data.get('anti_spam', False) else '‚ùå D√©sactiv√©'}", inline=True)
            embed.add_field(name="üö´ Anti-Everyone :", value=f"{'‚úÖ Activ√©' if self.guild_data.get('anti_everyone', False) else '‚ùå D√©sactiv√©'}", inline=True)

            self.clear_items()
            self.add_item(AntiSelect(self))
            self.add_item(ReturnButton(self))

        # Enfin, √©diter le message
        if self.embed_message:
            try:
                await self.embed_message.edit(embed=embed, view=self)
                print(f"Embed mis √† jour pour la cat√©gorie: {category}")
            except Exception as e:
                print(f"Erreur lors de la mise √† jour de l'embed: {e}")
        else:
            print("Erreur : embed_message est nul ou non d√©fini.")

    async def notify_guild_owner(self, interaction, param, new_value):
        guild_owner = interaction.guild.owner  # R√©cup√®re l'owner du serveur
        if guild_owner:  # V√©rifie si le propri√©taire existe
            embed = discord.Embed(
                title="üîî **Mise √† jour de la configuration**",
                description=f"‚öôÔ∏è **Une modification a √©t√© effectu√©e sur votre serveur `{interaction.guild.name}`.**",
                color=discord.Color.orange(),
                timestamp=discord.utils.utcnow()
            )
            embed.add_field(name="üë§ **Modifi√© par**", value=interaction.user.mention, inline=True)
            embed.add_field(name="üîß **Param√®tre modifi√©**", value=f"`{param}`", inline=True)
            embed.add_field(name="üÜï **Nouvelle valeur**", value=f"{new_value}", inline=False)
            embed.set_thumbnail(url=interaction.guild.icon.url if interaction.guild.icon else None)
            embed.set_footer(text="Pensez √† v√©rifier la configuration si n√©cessaire.")

            try:
                # Envoie de l'embed au propri√©taire
                await guild_owner.send(embed=embed)
                print(f"Message priv√© envoy√© au propri√©taire {guild_owner.name}.")  # Log pour confirmer l'envoi

            except discord.Forbidden:
                print(f"‚ö†Ô∏è Impossible d'envoyer un MP au propri√©taire du serveur {interaction.guild.name}.")  # Log si l'envoi √©choue

                # Tentons d'envoyer un message simple au propri√©taire pour tester la permission
                try:
                    await guild_owner.send("Test : Le bot essaie de vous envoyer un message priv√©.")
                    print("Le message de test a √©t√© envoy√© avec succ√®s.")
                except discord.Forbidden:
                    print("‚ö†Ô∏è Le message de test a √©chou√©. Le probl√®me vient probablement des param√®tres de confidentialit√© du propri√©taire.")

                # Avertir l'utilisateur via le suivi
                await interaction.followup.send(
                    "‚ö†Ô∏è **Impossible d'envoyer un message priv√© au propri√©taire du serveur.**",
                    ephemeral=True
                )

def format_mention(id, type_mention):
    if not id or id == "Non d√©fini":
        return "‚ùå **Non d√©fini**"

    # Cas o√π c‚Äôest un int ou une string d‚ÄôID valide
    if isinstance(id, int) or (isinstance(id, str) and id.isdigit()):
        if type_mention == "user":
            return f"<@{id}>"
        elif type_mention == "role":
            return f"<@&{id}>"
        elif type_mention == "channel":
            return f"<#{id}>"
        return "‚ùå **Mention invalide**"

    # Cas sp√©cial : objet discord.Message
    if isinstance(id, discord.Message):
        try:
            author_mention = id.author.mention if hasattr(id, 'author') else "Auteur inconnu"
            channel_mention = id.channel.mention if hasattr(id, 'channel') else "Salon inconnu"
            return f"**{author_mention}** dans **{channel_mention}**"
        except Exception as e:
            print(f"Erreur formatage Message : {e}")
            return "‚ùå **Erreur formatage message**"

    # Cas inconnu
    print(f"‚ö†Ô∏è format_mention: type inattendu pour id = {id} ({type(id)})")
    return "‚ùå **Format invalide**"

class MainSelect(Select):
    def __init__(self, view):
        options = [
            discord.SelectOption(label="‚öôÔ∏è Gestion du Bot", description="Modifier les r√¥les et salons", value="gestion"),
            discord.SelectOption(label="üõ°Ô∏è S√©curit√© & Anti-Raid", description="Configurer les protections", value="anti")
        ]
        super().__init__(placeholder="üìå S√©lectionnez une cat√©gorie", options=options)
        self.view_ctx = view

    async def callback(self, interaction: discord.Interaction):
        print("Interaction re√ßue.")  # Debug: V√©rifie si l'interaction est re√ßue
        await interaction.response.defer()  # Avertir Discord que la r√©ponse est en cours

        # V√©rification de view_ctx avant d'appeler la mise √† jour
        if hasattr(self.view_ctx, 'update_embed'):
            await self.view_ctx.update_embed(self.values[0])  # Mettre √† jour l'embed selon le choix de l'utilisateur
            print(f"Embed mis √† jour avec la cat√©gorie: {self.values[0]}")
        else:
            print("Erreur: view_ctx n'a pas la m√©thode update_embed.")

class ReturnButton(Button):
    def __init__(self, view):
        super().__init__(style=discord.ButtonStyle.danger, label="üîô Retour", custom_id="return")
        self.view_ctx = view

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.defer()
        await self.view_ctx.update_embed("accueil")

class InfoSelect(Select):
    def __init__(self, view):
        options = [
            discord.SelectOption(label="‚öôÔ∏è Modifier le pr√©fixe", value="prefix"),
            discord.SelectOption(label="üëë Propri√©taire", value="owner"),
            discord.SelectOption(label="üõ°Ô∏è R√¥le Admin", value="admin_role"),
            discord.SelectOption(label="üë• R√¥le Staff", value="staff_role"),
            discord.SelectOption(label="üö® Salon Sanctions", value="sanctions_channel"),
            discord.SelectOption(label="üìù Salon Alerte", value="reports_channel"),
        ]
        super().__init__(placeholder="üéõÔ∏è S√©lectionnez un param√®tre √† modifier", options=options)
        self.view_ctx = view

    async def callback(self, interaction: discord.Interaction):
        param = self.values[0]

        if param == "prefix":
            # Si l'utilisateur veut modifier le pr√©fixe, demandez un nouveau pr√©fixe
            embed_request = discord.Embed(
                title="‚úèÔ∏è **Modification du Pr√©fixe du Bot**",
                description="Veuillez entrer le **nouveau pr√©fixe** pour le bot.",
                color=discord.Color.blurple(),
                timestamp=discord.utils.utcnow()
            )
            embed_request.set_footer(text="R√©pondez dans les 60 secondes.")
            await interaction.response.send_message(embed=embed_request, ephemeral=True)

            def check(msg):
                return msg.author == self.view_ctx.ctx.author and msg.channel == self.view_ctx.ctx.channel

            try:
                response = await self.view_ctx.ctx.bot.wait_for("message", check=check, timeout=60)
                await response.delete()  # Supprimer la r√©ponse de l'utilisateur apr√®s r√©ception
            except asyncio.TimeoutError:
                embed_timeout = discord.Embed(
                    title="‚è≥ **Temps √©coul√©**",
                    description="Aucune modification effectu√©e.",
                    color=discord.Color.red()
                )
                return await interaction.followup.send(embed=embed_timeout, ephemeral=True)

            new_value = response.content.strip()

            if new_value:
                # Mettez √† jour la collection avec le nouveau pr√©fixe
                self.view_ctx.collection.update_one(
                    {"guild_id": str(self.view_ctx.ctx.guild.id)},
                    {"$set": {"prefix": new_value}},
                    upsert=True
                )
                self.view_ctx.guild_data["prefix"] = new_value

                # Notifier le propri√©taire du serveur de la modification
                await self.view_ctx.notify_guild_owner(interaction, "prefix", new_value)

                # Embed de confirmation
                embed_success = discord.Embed(
                    title="‚úÖ **Modification enregistr√©e !**",
                    description=f"Le pr√©fixe a √©t√© mis √† jour avec succ√®s.",
                    color=discord.Color.green(),
                    timestamp=discord.utils.utcnow()
                )
                embed_success.add_field(name="üÜï Nouveau pr√©fixe :", value=f"`{new_value}`", inline=False)
                embed_success.set_footer(text=f"Modifi√© par {interaction.user.display_name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else None)

                await interaction.followup.send(embed=embed_success, ephemeral=True)
                await self.view_ctx.update_embed("gestion")
            else:
                embed_error = discord.Embed(
                    title="‚ùå **Erreur de saisie**",
                    description="Le pr√©fixe fourni est invalide. Veuillez r√©essayer avec un pr√©fixe valide.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed_error, ephemeral=True)

        else:
            # Pour les autres param√®tres (comme le propri√©taire, les r√¥les, etc.)
            embed_request = discord.Embed(
                title="‚úèÔ∏è **Modification du param√®tre**",
                description=f"Veuillez mentionner la **nouvelle valeur** pour `{param}`.\n"
                            f"*(Mentionnez un **r√¥le**, un **salon** ou un **utilisateur** si n√©cessaire !)*",
                color=discord.Color.blurple(),
                timestamp=discord.utils.utcnow()
            )
            embed_request.set_footer(text="R√©pondez dans les 60 secondes.")

            await interaction.response.send_message(embed=embed_request, ephemeral=True)

            def check(msg):
                return msg.author == self.view_ctx.ctx.author and msg.channel == self.view_ctx.ctx.channel

            try:
                response = await self.view_ctx.ctx.bot.wait_for("message", check=check, timeout=60)
                await response.delete()
            except asyncio.TimeoutError:
                embed_timeout = discord.Embed(
                    title="‚è≥ **Temps √©coul√©**",
                    description="Aucune modification effectu√©e.",
                    color=discord.Color.red()
                )
                return await interaction.followup.send(embed=embed_timeout, ephemeral=True)

            new_value = None

            if param == "owner":
                new_value = response.mentions[0].id if response.mentions else None
            elif param in ["admin_role", "staff_role"]:
                new_value = response.role_mentions[0].id if response.role_mentions else None
            elif param in ["sanctions_channel", "reports_channel","suggestion_channel","sondage_channel","presentation_channel"]:
                new_value = response.channel_mentions[0].id if response.channel_mentions else None

            if new_value:
                self.view_ctx.collection.update_one(
                    {"guild_id": str(self.view_ctx.ctx.guild.id)},
                    {"$set": {param: str(new_value)}},
                    upsert=True
                )
                self.view_ctx.guild_data[param] = str(new_value)

                # ‚úÖ Notification au propri√©taire du serveur
                await self.view_ctx.notify_guild_owner(interaction, param, new_value)

                # ‚úÖ Embed de confirmation
                embed_success = discord.Embed(
                    title="‚úÖ **Modification enregistr√©e !**",
                    description=f"Le param√®tre `{param}` a √©t√© mis √† jour avec succ√®s.",
                    color=discord.Color.green(),
                    timestamp=discord.utils.utcnow()
                )
                embed_success.add_field(name="üÜï Nouvelle valeur :", value=f"<@{new_value}>" if param == "owner" else f"<@&{new_value}>" if "role" in param else f"<#{new_value}>", inline=False)
                embed_success.set_footer(text=f"Modifi√© par {interaction.user.display_name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else None)

                await interaction.followup.send(embed=embed_success, ephemeral=True)
                await self.view_ctx.update_embed("gestion")
            else:
                embed_error = discord.Embed(
                    title="‚ùå **Erreur de saisie**",
                    description="La valeur mentionn√©e est invalide. Veuillez r√©essayer en mentionnant un r√¥le, un salon ou un utilisateur valide.",
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=embed_error, ephemeral=True)

class AntiSelect(Select):
    def __init__(self, view):
        options = [
            discord.SelectOption(label="üîó Anti-lien", value="anti_link"),
            discord.SelectOption(label="üí¨ Anti-Spam", value="anti_spam"),
            discord.SelectOption(label="üö´ Anti-Everyone", value="anti_everyone"),
        ]
        super().__init__(placeholder="üõë S√©lectionnez une protection √† configurer", options=options)
        self.view_ctx = view

    async def callback(self, interaction: discord.Interaction):
        print(f"Interaction received: {interaction}")  # ‚úÖ Ajout√© pour afficher l'interaction
        await interaction.response.defer(thinking=True)

        try:
            print(f"AntiSelect callback started. Values: {self.values}")  # Log des valeurs envoy√©es
            param = self.values[0]

            embed_request = discord.Embed(
                title="‚öôÔ∏è **Modification d'une protection**",
                description=f"üõë **Protection s√©lectionn√©e :** `{param}`\n\n"
                            "Tapez :\n"
                            "‚úÖ `true` pour **activer**\n"
                            "‚ùå `false` pour **d√©sactiver**\n"
                            "üö´ `cancel` pour **annuler**",
                color=discord.Color.blurple(),
                timestamp=discord.utils.utcnow()
            )
            embed_request.set_footer(text="R√©pondez dans les 60 secondes.")

            await interaction.followup.send(embed=embed_request, ephemeral=True)
        except Exception as e:
            print(f"Erreur dans AntiSelect: {e}")
            traceback.print_exc()
            await interaction.followup.send("‚ùå Une erreur s'est produite.", ephemeral=True)

        def check(msg):
            return msg.author == self.view_ctx.ctx.author and msg.channel == self.view_ctx.ctx.channel

        try:
            response = await self.view_ctx.ctx.bot.wait_for("message", check=check, timeout=60)
            await response.delete()
        except asyncio.TimeoutError:
            embed_timeout = discord.Embed(
                title="‚è≥ Temps √©coul√©",
                description="Aucune r√©ponse re√ßue. L'op√©ration a √©t√© annul√©e.",
                color=discord.Color.red()
            )
            return await interaction.followup.send(embed=embed_timeout, ephemeral=True)

        response_content = response.content.lower()

        if response.content.lower() == "cancel":
            embed_cancel = discord.Embed(
                title="üö´ Annul√©",
                description="Aucune modification n‚Äôa √©t√© faite.",
                color=discord.Color.orange()
            )
            return await interaction.followup.send(embed=embed_cancel, ephemeral=True)

        elif response.content.lower() in ["true", "false"]:
            value = response.content.lower() == "true"

            self.view_ctx.collection.update_one(
                {"guild_id": str(self.view_ctx.ctx.guild.id)},
                {"$set": {param: value}},
                upsert=True
            )
            self.view_ctx.guild_data[param] = value

            embed_success = discord.Embed(
                title="‚úÖ Protection mise √† jour",
                description=f"La protection `{param}` est maintenant {'activ√©e ‚úÖ' if value else 'd√©sactiv√©e ‚ùå'}.",
                color=discord.Color.green()
            )
            await interaction.followup.send(embed=embed_success, ephemeral=True)

            # Mettre √† jour l'affichage
            await self.view_ctx.update_embed("anti")
        else:
            embed_error = discord.Embed(
                title="‚ùå Entr√©e invalide",
                description="Veuillez r√©pondre par `true`, `false` ou `cancel`.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed_error, ephemeral=True)

        new_value = response_content == "true"

        self.view_ctx.collection.update_one(
            {"guild_id": str(self.view_ctx.ctx.guild.id)},
            {"$set": {param: new_value}},
            upsert=True
        )

        # ‚úÖ Notification au propri√©taire du serveur
        await self.view_ctx.notify_guild_owner(interaction, param, new_value)

        # ‚úÖ Embed de confirmation
        embed_success = discord.Embed(
            title="‚úÖ **Modification enregistr√©e !**",
            description=f"La protection `{param}` est maintenant **{'activ√©e' if new_value else 'd√©sactiv√©e'}**.",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        embed_success.set_footer(text=f"Modifi√© par {interaction.user.display_name}", icon_url=interaction.user.avatar.url if interaction.user.avatar else None)

        await interaction.followup.send(embed=embed_success, ephemeral=True)
        await self.view_ctx.update_embed("anti")

@bot.command(name="setup")
async def setup(ctx):
    print("Commande 'setup' appel√©e.")  # Log de d√©bogage
    if ctx.author.id != ICEY_ID and not ctx.author.guild_permissions.administrator:
        print("Utilisateur non autoris√©.")
        await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires.", ephemeral=True)
        return

    guild_data = collection.find_one({"guild_id": str(ctx.guild.id)}) or {}

    embed = discord.Embed(
        title="‚öôÔ∏è **Configuration du Serveur**",
        description="""
        üîß **Bienvenue dans le setup !**  
        Configurez votre serveur facilement en quelques clics !  

        üìå **Gestion du Bot** - üéõÔ∏è Modifier les r√¥les et salons.  
        üõ°Ô∏è **S√©curit√© & Anti-Raid** - üö´ Activer/D√©sactiver les protections.  

        üîΩ **S√©lectionnez une option pour commencer !**
        """,
        color=discord.Color.blurple()
    )

    print("Embed cr√©√©, envoi en cours...")
    view = SetupView(ctx, guild_data, collection)
    await view.start()  # ‚úÖ appelle la m√©thode start(), qui envoie le message et stocke embed_message
    print("Message d'embed envoy√©.")
#------------------------------------------------------------------------ Super Protection:
# Fonction pour cr√©er un embed de protection avec une mise en page am√©lior√©e
def create_protection_embed(protection_data):
    embed = discord.Embed(
        title="üõ°Ô∏è **S√©curit√© du Serveur**",
        description="Personnalisez les syst√®mes de protection de votre serveur Discord. "
                    "Utilisez le menu d√©roulant ci-dessous pour activer ou d√©sactiver une protection.",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url="https://github.com/Iseyg91/KNSKS-Q/blob/main/BANNER_ETHERYA-topaz.png?raw=true")
    embed.set_author(name="Syst√®me de S√©curit√© Avanc√©e", icon_url="https://github.com/Iseyg91/KNSKS-Q/blob/main/3e3bd3c24e33325c7088f43c1ae0fadc.png?raw=true")

    embed.add_field(
        name="üîÑ **Status Global**",
        value="üü¢ **Activ√©** | üî¥ **D√©sactiv√©**",
        inline=False
    )

    embed.add_field(
        name="üìå **Protection actuelle**",
        value="Les protections actuelles de votre serveur sont affich√©es ci-dessous. "
              "S√©lectionnez celle que vous souhaitez modifier.",
        inline=False
    )

    # Affichage de chaque protection sans doublon d'√©tat
    for label, value in get_protection_options().items():
        protection_status = protection_data.get(value, "off").lower()
        status = "üü¢ Activ√©" if protection_status == "on" else "üî¥ D√©sactiv√©"
        
        embed.add_field(
            name=f"{label} {get_protection_icon(value)}",
            value=f"√âtat : {status}\nüîß Cliquez dans le menu ci-dessous pour changer ce param√®tre.",
            inline=False
        )

    embed.set_footer(text="Derni√®re mise √† jour automatique lors de l'interaction utilisateur.")
    return embed

# Retourne l'ic√¥ne correspondante √† chaque protection
def get_protection_icon(protection_key):
    icon_map = {
        "anti_massban": "‚öîÔ∏è",
        "anti_masskick": "üë¢",
        "anti_bot": "ü§ñ",
        "anti_createchannel": "üìÇ",
        "anti_deletechannel": "‚ùå",
        "anti_createrole": "üé≠",
        "anti_deleterole": "üõ°Ô∏è",
        "whitelist": "üîë"
    }
    return icon_map.get(protection_key, "üîí")

# Fonction pour r√©cup√©rer les donn√©es de protection depuis la base de donn√©es
async def get_protection_data(guild_id):
    try:
        data = await collection4.find_one({"_id": str(guild_id)})

        if not data:
            # Cr√©e un document avec des valeurs par d√©faut si aucune donn√©e n'existe
            data = create_default_protection_data(guild_id)
            await collection4.insert_one(data)
            print(f"Document cr√©√© pour le guild_id {guild_id} avec les valeurs par d√©faut.")
        
        return data
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration des donn√©es de protection pour le guild_id {guild_id}: {e}")
        return {}

def create_default_protection_data(guild_id):
    return {
        "_id": str(guild_id),
        "anti_massban": "off",
        "anti_masskick": "off",
        "anti_bot": "off",
        "anti_createchannel": "off",
        "anti_deletechannel": "off",
        "anti_createrole": "off",
        "anti_deleterole": "off",
        "whitelist": [],
        "last_updated": datetime.utcnow()
    }


# Fonction pour mettre √† jour les param√®tres de protection
async def update_protection(guild_id, field, value, guild, ctx):
    try:
        if value not in ["on", "off"]:
            raise ValueError("La valeur doit √™tre 'on' ou 'off'.")

        # Mise √† jour dans la base de donn√©es
        result = collection4.update_one(
    {"_id": str(guild_id)},
    {"$set": {field: value, "last_updated": datetime.utcnow()}}
)
        # V√©rification si la mise √† jour a bien √©t√© effectu√©e
        if result.modified_count == 0:
            print(f"Aucune modification effectu√©e pour {field} dans le guild_id {guild_id}.")
        else:
            print(f"Modification effectu√©e avec succ√®s pour {field} dans le guild_id {guild_id}.")

        # Envoi du MP √† l'owner du serveur avec un embed
        owner = guild.owner
        if owner:
            embed = discord.Embed(
                title="üîí **Mise √† jour de la protection**",
                description=f"**{ctx.author.name}** a mis √† jour une protection sur votre serveur.",
                color=discord.Color.green()
            )
            embed.add_field(
                name="Protection modifi√©e",
                value=f"**Protection** : {field}\n"
                      f"**Nouvelle valeur** : {value.capitalize()}",
                inline=False
            )
            embed.set_footer(text=f"Serveur : {guild.name} | {guild.id}")
            try:
                await owner.send(embed=embed)
            except discord.Forbidden:
                print(f"Impossible d'envoyer un MP √† {owner.name}, permissions insuffisantes.")
            except Exception as e:
                print(f"Erreur lors de l'envoi du MP √† l'owner du serveur {guild.id}: {e}")
        
        # Retourne le r√©sultat de l'update
        return result

    except Exception as e:
        print(f"Erreur lors de la mise √† jour de {field} pour le guild_id {guild_id}: {e}")
        raise

async def is_authorized(ctx):
    """V√©rifie si l'utilisateur a l'autorisation de modifier les protections"""
    if ctx.author.id == ISEYG_ID or ctx.author.guild_permissions.administrator:
        return True

    guild_id = str(ctx.guild.id)
    data = await get_protection_data(guild_id)
    if ctx.author.id in data.get("whitelist", []):
        return True

    return False

# Commande principale pour g√©rer la protection
@bot.command()
async def protection(ctx):
    """Commande principale pour afficher les protections et les modifier"""
    if not await is_authorized(ctx):
        await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires pour effectuer cette action.", ephemeral=True)
        return

    guild_id = str(ctx.guild.id)
    protection_data = await get_protection_data(guild_id)

    if not protection_data:
        await ctx.send("‚ö†Ô∏è Aucune donn√©e de protection trouv√©e. La configuration par d√©faut a √©t√© appliqu√©e.", ephemeral=True)

    embed = create_protection_embed(protection_data)
    await send_select_menu(ctx, embed, protection_data, guild_id)

async def send_select_menu(ctx, embed, protection_data, guild_id):
    try:
        options = [
    discord.SelectOption(label=label, value=value, description="Configurer cette r√®gle de s√©curit√©.")
    for label, value in get_protection_options().items()
]
        select = discord.ui.Select(
            placeholder="üõ†Ô∏è S√©lectionnez une protection √† configurer...",
            options=options,
            min_values=1,
            max_values=1
        )

        view = discord.ui.View()
        view.add_item(select)

        async def select_callback(interaction: discord.Interaction):
            if interaction.user != ctx.author:
                await interaction.response.send_message("‚ùå Vous n'√™tes pas autoris√© √† utiliser ce menu.", ephemeral=True)
                return

            selected_value = select.values[0]
            current_value = protection_data.get(selected_value, "Off")

            await interaction.response.send_message(
                f"üîç Protection s√©lectionn√©e : `{selected_value}`\n"
                f"üîí √âtat actuel : **{current_value.capitalize()}**\n\n"
                "üü¢ Tapez `on` pour activer\nüî¥ Tapez `off` pour d√©sactiver",
                ephemeral=True
            )

            def check(msg):
                return msg.author == ctx.author and msg.channel == ctx.channel

            try:
                msg = await bot.wait_for("message", check=check, timeout=60.0)
                new_value = msg.content.lower()

                if new_value not in ["on", "off"]:
                    await interaction.followup.send("‚ùå Valeur invalide. Veuillez entrer `on` ou `off`.", ephemeral=True)
                    return

                # ‚úÖ Ligne de mise √† jour
                await update_protection(guild_id, selected_value, new_value, ctx.guild, ctx)

                # üóëÔ∏è On supprime le message utilisateur pour garder le salon propre
                await msg.delete()

                # üîÑ On recharge les donn√©es et on met √† jour l'embed
                updated_data = await get_protection_data(guild_id)
                updated_embed = create_protection_embed(updated_data)
                await interaction.message.edit(embed=updated_embed, view=view)

                await interaction.followup.send(f"‚úÖ La protection `{selected_value}` a √©t√© mise √† jour √† **{new_value.capitalize()}**.", ephemeral=True)

            except asyncio.TimeoutError:
                await interaction.followup.send("‚è≥ Temps √©coul√©. Aucune r√©ponse re√ßue.", ephemeral=True)
            except Exception as e:
                await interaction.followup.send(f"‚ùå Une erreur est survenue : {str(e)}", ephemeral=True)
                print(f"Erreur dans le callback du select : {e}")

        select.callback = select_callback
        await ctx.send(embed=embed, view=view)

    except Exception as e:
        print(f"Erreur dans send_select_menu : {e}")
        await ctx.send(f"‚ùå Une erreur est survenue : {str(e)}", ephemeral=True)


def get_protection_options():
    return {
        "Anti-bot ü§ñ": "anti_bot",
        "Anti-massban ‚öîÔ∏è": "anti_massban",
        "Anti-masskick üë¢": "anti_masskick",
        "Anti-createchannel üìÇ": "anti_createchannel",
        "Anti-deletechannel ‚ùå": "anti_deletechannel",
        "Anti-createrole üé≠": "anti_createrole",
        "Anti-deleterole üõ°Ô∏è": "anti_deleterole",
        "Whitelist üîë": "whitelist"
    }

#------------------------------------------------------------------------- Code Protection:
# Dictionnaire en m√©moire pour stocker les param√®tres de protection par guild_id
protection_settings = {}
ban_times = {}  # Dictionnaire pour stocker les temps de bans

# D√©tection d'un massban (2 bans en moins de 10 secondes)
@bot.event
async def on_member_ban(guild, user):
    guild_id = str(guild.id)
    data = await get_protection_data(guild_id)

    if data.get("anti_massban") == "activer":
        # V√©rifier s'il y a d√©j√† eu un ban r√©cent
        if guild.id not in ban_times:
            ban_times[guild.id] = []
        current_time = time.time()
        ban_times[guild.id].append(current_time)
        
        # Nettoyer les anciens bans
        ban_times[guild.id] = [t for t in ban_times[guild.id] if current_time - t < 10]

        # Si 2 bans ont √©t√© effectu√©s en moins de 10 secondes
        if len(ban_times[guild.id]) > 2:
            await guild.fetch_ban(user)  # Annuler le ban
            await guild.unban(user)  # D√©bannir la personne
            await guild.text_channels[0].send(f"Le massban a √©t√© d√©tect√© ! Le ban de {user.name} a √©t√© annul√©.")
            print(f"Massban d√©tect√© pour {user.name}, ban annul√©.")
            return

kick_times = defaultdict(list)  # {guild_id: [timestamp1, timestamp2, ...]}

@bot.event
async def on_member_remove(member: discord.Member):
    guild_id = str(member.guild.id)

    # R√©cup√©ration des logs d'audit pour v√©rifier si c'√©tait un kick
    if not member.guild.me.guild_permissions.view_audit_log:
        return

    async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.kick):
        if entry.target.id == member.id and (discord.utils.utcnow() - entry.created_at).total_seconds() < 5:
            # R√©cup√®re les donn√©es de protection
            protection_data = await get_protection_data(guild_id)
            if protection_data.get("anti_masskick") != "activer":
                return

            author_id = entry.user.id
            current_time = time.time()
            kick_times[author_id].append(current_time)

            # Ne garder que les kicks r√©cents (moins de 10 secondes)
            kick_times[author_id] = [t for t in kick_times[author_id] if current_time - t < 10]

            if len(kick_times[author_id]) >= 2:
                try:
                    # Sanction de l'auteur du masskick (ex: ban)
                    await member.guild.ban(entry.user, reason="Masskick d√©tect√© (2 kicks en moins de 10s)")
                    await member.guild.system_channel.send(f"‚ö†Ô∏è **Masskick d√©tect√© !** {entry.user.mention} a √©t√© banni pour avoir expuls√© plusieurs membres en peu de temps.")
                except Exception as e:
                    print(f"[Erreur Masskick] : {e}")

# Protection anti-cr√©ation de salon
@bot.event
async def on_guild_channel_create(channel):
    guild_id = str(channel.guild.id)
    protection_data = await get_protection_data(guild_id)

    if protection_data.get("anti_createchannel") == "activer":
        # S‚Äôassurer que le bot a bien les permissions de g√©rer les salons
        if channel.guild.me.guild_permissions.manage_channels:
            await channel.delete(reason="Protection anti-cr√©ation de salon activ√©e.")
            print(f"Le salon {channel.name} a √©t√© supprim√© √† cause de la protection.")
        else:
            print("Le bot n'a pas la permission de g√©rer les salons.")

# Protection anti-suppression de salon
@bot.event
async def on_guild_channel_delete(channel):
    guild_id = str(channel.guild.id)
    protection_data = await get_protection_data(guild_id)

    if protection_data.get("anti_deletechannel") == "activer":
        try:
            await channel.guild.create_text_channel(channel.name, category=channel.category)
            print(f"Le salon {channel.name} a √©t√© recr√©√© suite √† la suppression (protection activ√©e).")
        except Exception as e:
            print(f"Erreur lors de la recr√©ation du salon : {e}")

# Protection anti-cr√©ation de r√¥le
@bot.event
async def on_guild_role_create(role):
    guild_id = str(role.guild.id)
    protection_data = await get_protection_data(guild_id)

    if protection_data.get("anti_createrole") == "activer":
        try:
            await role.delete(reason="Protection anti-cr√©ation de r√¥le activ√©e.")
            print(f"Le r√¥le {role.name} a √©t√© supprim√© √† cause de la protection.")
        except Exception as e:
            print(f"Erreur lors de la suppression du r√¥le : {e}")

# Protection anti-suppression de r√¥le
@bot.event
async def on_guild_role_delete(role):
    guild_id = str(role.guild.id)
    protection_data = await get_protection_data(guild_id)

    if protection_data.get("anti_deleterole") == "activer":
        try:
            await role.guild.create_role(name=role.name, permissions=role.permissions, color=role.color)
            print(f"Le r√¥le {role.name} a √©t√© recr√©√© suite √† la suppression (protection activ√©e).")
        except Exception as e:
            print(f"Erreur lors de la recr√©ation du r√¥le : {e}")
#------------------------------------------------------------------------- wl:

@bot.command()
async def addwl(ctx, member: discord.Member):
    try:
        if ctx.author.id != ICEYGO:
            return await ctx.send("Tu n'es pas autoris√© √† utiliser cette commande.")
        
        guild_id = str(ctx.guild.id)
        data = await get_protection_data(guild_id)

        if "whitelist" not in data:
            data["whitelist"] = []  # Assurer qu'il existe une cl√© "whitelist"

        if member.id not in data["whitelist"]:
            data["whitelist"].append(member.id)
            await update_protection(guild_id, "whitelist", data["whitelist"])
            await ctx.send(f"{member} a √©t√© ajout√© √† la whitelist.")
        else:
            await ctx.send(f"{member} est d√©j√† dans la whitelist.")
    
    except Exception as e:
        # Log l'erreur pour aider √† diagnostiquer le probl√®me
        print(f"Erreur dans la commande addwl : {e}")
        await ctx.send("Une erreur est survenue lors de l'ajout √† la whitelist.")


@bot.command()
async def removewl(ctx, member: discord.Member):
    if ctx.author.id != ICEYGO:
        return await ctx.send("Tu n'es pas autoris√© √† utiliser cette commande.")

    guild_id = str(ctx.guild.id)
    data = await get_protection_data(guild_id)

    if member.id in data.get("whitelist", []):
        data["whitelist"].remove(member.id)
        await update_protection(guild_id, "whitelist", data["whitelist"])
        await ctx.send(f"{member} a √©t√© retir√© de la whitelist.")
    else:
        await ctx.send(f"{member} n'est pas dans la whitelist.")

@bot.command()
async def listwl(ctx):
    if ctx.author.id != ICEYGO:
        return await ctx.send("Tu n'es pas autoris√© √† utiliser cette commande.")

    guild_id = str(ctx.guild.id)
    data = await get_protection_data(guild_id)

    whitelist = data.get("whitelist", [])

    if whitelist:
        members = [f"<@{member_id}>" for member_id in whitelist]
        await ctx.send("Membres dans la whitelist :\n" + "\n".join(members))
    else:
        await ctx.send("La whitelist est vide.")
#------------------------------------------------------------------------- Commande Mention ainsi que Commandes d'Administration : Detections de Mots sensible et Mention

# Mots sensibles
sensitive_words = [
    "connard", "salopard", "enfoir√©","baltringue", "fils de pute", "branleur", "crasseux", "charognard", "rat√©", "b√¢tard", "d√©chet",
    "raciste", "sexiste", "homophobe", "antis√©mite", "x√©nophobe", "transphobe", "islamophobe", "misogyne", "misandre", "discriminatoire", 
    "supr√©maciste", "extr√©miste", "fasciste", "nazi", "n√©onazi", "dictateur", "viol", "tuer", "assassin", "attaque", "agression", "meurtre", 
    "g√©nocide", "ex√©cution", "kidnapping", "prise d'otage", "armes", "fusillade", "terrorisme", "attentat", "jihad", "bombardement", 
    "suicidaire", "d√©capitation", "immolation", "torture", "lynchage", "massacre", "pillage", "extermination", "p√©docriminel", "abus", 
    "sexe", "pornographie", "nu", "masturbation", "prostitution", "p√©dophilie", "inceste", "exhibition", "f√©tichisme", "harc√®lement", 
    "traite humaine", "esclavage sexuel", "viol collectif", "drogue", "coca√Øne", "h√©ro√Øne", "crack", "LSD", "ecstasy", "m√©thamph√©tamine", 
    "opium", "cannabis", "alcool", "ivresse", "overdose", "trafic de drogue", "toxicomanie", "drogue de synth√®se", "GHB", "fentanyl", 
    "hack", "pirater", "voler des donn√©es", "phishing", "ddos", "raid", "flood", "spam", "crasher", "exploiter", "ransomware", "trojan", 
    "virus informatique", "keylogger", "backdoor", "brute force", "scam", "usurpation d'identit√©", "darknet", "march√© noir", "cheval de Troie", 
    "spyware", "hame√ßonnage", "fraude", "extorsion", "chantage", "blanchiment d'argent", "corruption", "pot-de-vin", "abus de pouvoir", 
    "d√©tournement de fonds", "√©vasion fiscale", "fraude fiscale", "contrefa√ßon", "dictature", "oppression", "propagande", "fake news", 
    "manipulation", "endoctrinement", "secte", "lavage de cerveau", "d√©sinformation", "violence polici√®re", "brutalit√©", "crime organis√©", 
    "mafia", "cartel", "milice", "mercenaire", "gu√©rilla", "insurrection", "√©meute", "r√©bellion", "coup d'√©tat", "anarchie", "terroriste", 
    "s√©paratiste"
]

user_messages = {}

@bot.event
async def on_message(message):
    if message.author.bot:
        return

    # üí¨ 1. V√©rifie les mots sensibles
    for word in sensitive_words:
        if re.search(rf"\b{re.escape(word)}\b", message.content, re.IGNORECASE):
            print(f"üö® Mot sensible d√©tect√© dans le message de {message.author}: {word}")
            asyncio.create_task(send_alert_to_admin(message, word))
            break

    # üì£ 2. R√©pond si le bot est mentionn√©
    if bot.user.mentioned_in(message) and message.content.strip().startswith(f"<@{bot.user.id}>"):
        embed = discord.Embed(
            title="üëã Besoin d‚Äôaide ?",
            description=(f"Salut {message.author.mention} ! Moi, c‚Äôest **{bot.user.name}**, ton assistant sur ce serveur. ü§ñ\n\n"
                         "üîπ **Pour voir toutes mes commandes :** Appuie sur le bouton ci-dessous ou tape `+help`\n"
                         "üîπ **Une question ? Un souci ?** Contacte le staff !\n\n"
                         "‚ú® **Profite bien du serveur et amuse-toi !**"),
            color=discord.Color.blue()
        )
        embed.set_thumbnail(url=bot.user.avatar.url)
        embed.set_footer(text="R√©ponse automatique ‚Ä¢ Disponible 24/7", icon_url=bot.user.avatar.url)

        view = View()
        button = Button(label="üìú Voir les commandes", style=discord.ButtonStyle.primary, custom_id="help_button")

        async def button_callback(interaction: discord.Interaction):
            ctx = await bot.get_context(interaction.message)
            await ctx.invoke(bot.get_command("help"))
            await interaction.response.send_message("Voici la liste des commandes !", ephemeral=True)

        button.callback = button_callback
        view.add_item(button)

        await message.channel.send(embed=embed, view=view)
        return

    # üì¶ 3. Gestion des partenariats dans un salon sp√©cifique
    if message.channel.id == partnership_channel_id:
        user_id = str(message.author.id)
        rank, partnerships = get_user_partner_info(user_id)

        # ‚úÖ Envoyer le premier message : mention du r√¥le
        await message.channel.send("<@&1355157749994098860>")

        # ‚úÖ Cr√©er l'embed
        embed = discord.Embed(
            title="Merci du partenariat ü§ù",
            description=f"{message.author.mention}\nTu es rank **{rank}**\nTu as effectu√© **{partnerships}** partenariats.",
            color=discord.Color.green()
        )

        # Footer avec image
        embed.set_footer(
            text="Partenariat r√©alis√©",
            icon_url="https://github.com/Iseyg91/KNSKS-ET/blob/main/Capture_decran_2024-09-28_211041.png?raw=true"
        )

        # ‚úÖ Ajout d'une image en grand EN BAS (via image)
        embed.set_image(
            url="https://github.com/Iseyg91/KNSKS-ET/blob/main/Capture_decran_2025-02-15_231405.png?raw=true"
        )

        await message.channel.send(embed=embed)


    # ‚öôÔ∏è 4. Configuration du serveur pour s√©curit√©
    guild_data = collection.find_one({"guild_id": str(message.guild.id)})
    if not guild_data:
        await bot.process_commands(message)
        return

    # üîó 5. Anti-lien
    if guild_data.get("anti_link", False):
        if "discord.gg" in message.content and not message.author.guild_permissions.administrator:
            await message.delete()
            await message.author.send("‚ö†Ô∏è Les liens Discord sont interdits sur ce serveur.")
            return

    # üí£ 6. Anti-spam
    if guild_data.get("anti_spam_limit", False):
        now = time.time()
        user_id = message.author.id

        if user_id not in user_messages:
            user_messages[user_id] = []
        user_messages[user_id].append(now)

        recent_messages = [t for t in user_messages[user_id] if t > now - 5]
        user_messages[user_id] = recent_messages

        if len(recent_messages) > 10:
            await message.guild.ban(message.author, reason="Spam excessif")
            return

        spam_messages = [t for t in user_messages[user_id] if t > now - 60]
        if len(spam_messages) > guild_data["anti_spam_limit"]:
            await message.delete()
            await message.author.send("‚ö†Ô∏è Vous envoyez trop de messages trop rapidement. R√©duisez votre spam.")
            return

    # üì£ 7. Anti-everyone
    if guild_data.get("anti_everyone", False):
        if "@everyone" in message.content or "@here" in message.content:
            await message.delete()
            await message.author.send("‚ö†Ô∏è L'utilisation de `@everyone` ou `@here` est interdite sur ce serveur.")
            return

    # ‚úÖ 8. Ex√©cution normale des commandes
    await bot.process_commands(message)

# üîî Fonction d'envoi d'alerte √† l'admin
async def send_alert_to_admin(message, detected_word):
    try:
        admin = await bot.fetch_user(ADMIN_ID)
        embed = discord.Embed(
            title="üö® Alerte : Mot sensible d√©tect√© !",
            description=f"Un message contenant un mot interdit a √©t√© d√©tect√© sur le serveur **{message.guild.name}**.",
            color=discord.Color.red(),
            timestamp=datetime.utcnow()
        )
        embed.add_field(name="üìç Salon", value=f"{message.channel.mention}", inline=True)
        embed.add_field(name="üë§ Auteur", value=f"{message.author.mention} (`{message.author.id}`)", inline=True)
        embed.add_field(name="üí¨ Message", value=f"```{message.content}```", inline=False)
        embed.add_field(name="‚ö†Ô∏è Mot d√©tect√©", value=f"`{detected_word}`", inline=True)
        if message.guild:
            embed.add_field(name="üîó Lien vers le message", value=f"[Clique ici]({message.jump_url})", inline=False)
        embed.set_footer(text="Syst√®me de d√©tection automatique", icon_url=bot.user.avatar.url)
        await admin.send(embed=embed)
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur lors de l'envoi de l'alerte : {e}")

#------------------------------------------------------------------------- Commandes de Bienvenue : Message de Bienvenue + Ghost Ping Join
private_threads = {}  # Stocke les fils priv√©s des nouveaux membres

# Liste des salons √† pinguer
salon_ids = [
    1355158116903419997
]

class GuideView(View):
    def __init__(self, thread):
        super().__init__()
        self.thread = thread
        self.message_sent = False  # Variable pour contr√¥ler l'envoi du message

    @discord.ui.button(label="üìò Guide", style=discord.ButtonStyle.success, custom_id="guide_button_unique")
    async def guide(self, interaction: discord.Interaction, button: discord.ui.Button):
        if not self.message_sent:  # Emp√™che l'envoi du message en doublon
            await interaction.response.defer()
            await start_tutorial(self.thread, interaction.user)
            self.message_sent = True

    @discord.ui.button(label="‚ùå Non merci", style=discord.ButtonStyle.danger, custom_id="no_guide_button_unique")
    async def no_guide(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Fermeture du fil...", ephemeral=True)
        await asyncio.sleep(2)
        await self.thread.delete()

class NextStepView(View):
    def __init__(self, thread):
        super().__init__()
        self.thread = thread

    @discord.ui.button(label="‚û°Ô∏è Passer √† la suite", style=discord.ButtonStyle.primary, custom_id="next_button")
    async def next_step(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        user = interaction.user

        # Envoi du message priv√©
        await send_economy_info(user)

        # Envoi du message de confirmation dans le fil priv√©
        await self.thread.send("üì© Les d√©tails de cette √©tape ont √©t√© envoy√©s en message priv√©.")

        # Attente de 2 secondes
        await asyncio.sleep(2)

        # Message d'avertissement avant suppression
        await self.thread.send("üóëÔ∏è Ce fil sera supprim√© dans quelques instants.")

        # Suppression du fil priv√©
        await asyncio.sleep(3)
        await self.thread.delete()

async def wait_for_command(thread, user, command):
    def check(msg):
        return msg.channel == thread and msg.author == user and msg.content.startswith(command)

    await thread.send(f"üïí En attente de `{command}`...")  # Envoi du message d'attente
    await bot.wait_for("message", check=check)  # Attente du message de la commande
    await thread.send("‚úÖ Commande ex√©cut√©e ! Passons √† la suite. üöÄ")  # Confirmation apr√®s la commande
    await asyncio.sleep(2)  # Pause avant de passer √† l'√©tape suivante

async def start_tutorial(thread, user):
    tutorial_steps = [
        ("üíº **Commande Travail**", "Utilise `!!work` pour gagner un salaire r√©guli√®rement !", "!!work"),
        ("üíÉ **Commande Slut**", "Avec `!!slut`, tente de gagner de l'argent... Mais attention aux risques !", "!!slut"),
        ("üî´ **Commande Crime**", "Besoin de plus de frissons ? `!!crime` te plonge dans des activit√©s ill√©gales !", "!!crime"),
        ("üåø **Commande Collecte**", "Avec `!!collect`, tu peux ramasser des ressources utiles !", "!!collect"),
        ("üìä **Classement**", "D√©couvre qui a le plus d'argent en cash avec `!!lb -cash` !", "!!lb -cash"),
        ("üïµÔ∏è **Voler un joueur**", "Tente de d√©rober l'argent d'un autre avec `!!rob @user` !", "!!rob"),
        ("üè¶ **D√©p√¥t Bancaire**", "Pense √† s√©curiser ton argent avec `!!dep all` !", "!!dep all"),
        ("üí∞ **Solde Bancaire**", "V√©rifie ton argent avec `!!bal` !", "!!bal"),
    ]

    for title, desc, cmd in tutorial_steps:
        embed = discord.Embed(title=title, description=desc, color=discord.Color.blue())
        await thread.send(embed=embed)
        await wait_for_command(thread, user, cmd)  # Attente de la commande de l'utilisateur

    # Embed final des jeux
    games_embed = discord.Embed(
        title="üé≤ **Autres Commandes de Jeux**",
        description="D√©couvre encore plus de moyens de t'amuser et gagner des Ezryn Coins !",
        color=discord.Color.gold()
    )
    games_embed.add_field(name="üêî Cock-Fight", value="`!!cf` - Combat de Poulet !", inline=False)
    games_embed.add_field(name="üÉè Blackjack", value="`!!bj` - Jeux de Carte !", inline=False)
    games_embed.add_field(name="üé∞ Slot Machine", value="`!!sm` - Tente un jeu risqu√© !", inline=False)
    games_embed.add_field(name="üî´ Roulette Russe", value="`!!rr` - Joue avec le destin !", inline=False)
    games_embed.add_field(name="üé° Roulette", value="`!!roulette` - Fais tourner la roue de la fortune !", inline=False)
    games_embed.set_footer(text="Amuse-toi bien sur Etherya ! üöÄ")

    await thread.send(embed=games_embed)
    await thread.send("Clique sur **Passer √† la suite** pour d√©couvrir les syst√®mes impressionnants de notre Economie !", view=NextStepView(thread))

async def send_economy_info(user: discord.Member):
    try:
        economy_embed = discord.Embed(
            title="üìå **Lis ces salons pour optimiser tes gains !**",
            description=(
                "Bienvenue dans l'√©conomie du serveur ! Pour en tirer le meilleur profit, assure-toi de lire ces salons :\n\n"
                "üí∞ **Comment acc√©der √† l'economie ?**\n‚ûú <#1355190022047011117>\n\n"
                "üìñ **Informations g√©n√©rales**\n‚ûú <#1355158018517500086>\n\n"
                "üí∞ **Comment gagner des Coins ?**\n‚ûú <#1355157853299675247>\n\n"
                "üè¶ **Banque de l'√âco 1**\n‚ûú <#1355158001606066267>\n\n"
                "üè¶ **Banque de l'√âco 2**\n‚ûú <#1355191522252951573>\n\n"
                "üéüÔ∏è **Ticket Finances** *(Pose tes questions ici !)*\n‚ûú <#1355157942005006558>\n\n"
                "üìà **Astuce :** Plus tu en sais, plus tu gagnes ! Alors prends quelques minutes pour lire ces infos. üöÄ"
            ),
            color=discord.Color.gold()
        )
        economy_embed.set_thumbnail(url="https://cdn.discordapp.com/emojis/1168755764760559637.webp?size=96&quality=lossless")
        economy_embed.set_footer(text="Bon jeu et bons profits ! üí∞")

        dm_channel = await user.create_dm()
        await dm_channel.send(embed=economy_embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un MP √† {user.name} ({user.id})")

# Protection anti-bot (emp√™che l'ajout de bots)
# √âv√©nement lorsqu'un membre rejoint le serveur
@bot.event
async def on_member_join(member):
    guild_id = str(member.guild.id)
    protection_data = protection_settings.get(guild_id, {"whitelist": [], "anti_bot": "Non configur√©"})
    whitelist = protection_data.get("whitelist", [])

    # V√©rifier si l'utilisateur est dans la whitelist
    if member.id in whitelist:
        return  # L'utilisateur est exempt√© de la protection

    # V√©rifier si la protection anti-bot est activ√©e pour ce serveur
    if protection_data.get("anti_bot") == "activer":
        if member.bot:
            await member.kick(reason="Protection anti-bot activ√©e.")
            print(f"Un bot ({member.name}) a √©t√© expuls√© pour cause de protection anti-bot.")
        return

    # Le reste du code pour l'ajout d'un membre sur le serveur Etherya
    if member.guild.id != ETHERYA_SERVER_ID:
        return  # Stoppe l'ex√©cution si ce n'est pas Etherya
    
    # Envoi du message de bienvenue
    channel = bot.get_channel(WELCOME_CHANNEL_ID)
    if channel:
        embed = discord.Embed(
            title="<a:fete:1172810362261880873> Bienvenue sur le serveur ! <a:fete:1172810362261880873>",
            description=(
                "*<a:fire:1343873843730579478> Ici, l‚Äô√©conomie r√®gne en ma√Ætre, les alliances se forment, les trahisons √©clatent... et ta richesse ne tient qu‚Äô√† un fil ! <a:fire:1343873843730579478>*\n\n"
                "<:better_scroll:1342376863909285930> **Avant de commencer, prends le temps de lire :**\n\n"
                "- <a:fleche3:1290077283100397672> **<#1355157955804139560>** pour √©viter les probl√®mes d√®s le d√©part.\n"
                "- <a:fleche3:1290077283100397672> **<#1355158018517500086>** pour comprendre les bases de l‚Äô√©conomie.\n"
                "- <a:fleche3:1290077283100397672> **<#1359949279808061591>** pour savoir ce que tu peux obtenir.\n\n"
                "üí° *Un doute ? Une question ? Ouvre un ticket et le staff t‚Äôaidera !*\n\n"
                "**Pr√©pare-toi √† b√¢tir ton empire... ou √† tout perdre. Bonne chance ! üçÄ**"
            ),
            color=discord.Color.gold()
        )
        embed.set_image(url="https://raw.githubusercontent.com/Cass64/EtheryaBot/main/images_etherya/etheryaBot_banniere.png")
        await channel.send(f"{member.mention}", embed=embed)

    # Envoi du ghost ping une seule fois par salon
    for salon_id in salon_ids:
        salon = bot.get_channel(salon_id)
        if salon:
            try:
                message = await salon.send(f"{member.mention}")
                await message.delete()
            except discord.Forbidden:
                print(f"Le bot n'a pas la permission d'envoyer un message dans {salon.name}.")
            except discord.HTTPException:
                print("Une erreur est survenue lors de l'envoi du message.")
    
    # Cr√©ation d'un fil priv√© pour le membre
    channel_id = 1355158120095027220  # Remplace par l'ID du salon souhait√©
    channel = bot.get_channel(channel_id)

    if channel and isinstance(channel, discord.TextChannel):
        thread = await channel.create_thread(name=f"üéâ Bienvenue {member.name} !", type=discord.ChannelType.private_thread)
        await thread.add_user(member)
        private_threads[member.id] = thread

        # Embed de bienvenue
        welcome_embed = discord.Embed(
            title="üåå Bienvenue √† Etherya !",
            description=( 
                "Une aventure unique t'attend, entre **√©conomie dynamique**, **strat√©gies** et **opportunit√©s**. "
                "Pr√™t √† d√©couvrir tout ce que le serveur a √† offrir ?"
            ),
            color=discord.Color.blue()
        )
        welcome_embed.set_thumbnail(url=member.avatar.url if member.avatar else bot.user.avatar.url)
        await thread.send(embed=welcome_embed)

        # Embed du guide
        guide_embed = discord.Embed(
            title="üìñ Besoin d'un Guide ?",
            description=( 
                "Nous avons pr√©par√© un **Guide de l'√âconomie** pour t'aider √† comprendre notre syst√®me mon√©taire et "
                "les diff√©rentes fa√ßons d'√©voluer. Veux-tu le suivre ?"
            ),
            color=discord.Color.gold()
        )
        guide_embed.set_footer(text="Tu peux toujours y acc√©der plus tard via la commande /guide ! üöÄ")
        await thread.send(embed=guide_embed, view=GuideView(thread))  # Envoie le guide imm√©diatement

@bot.tree.command(name="guide", description="Ouvre un guide personnalis√© pour comprendre l'√©conomie du serveur.")
async def guide_command(interaction: discord.Interaction):
    user = interaction.user

    # V√©rifie si le serveur est Etherya avant d'ex√©cuter le reste du code
    if interaction.guild.id != ETHERYA_SERVER_ID:
        await interaction.response.send_message("‚ùå Cette commande est uniquement disponible sur le serveur Etherya.", ephemeral=True)
        return

    # Cr√©e un nouveau thread priv√© √† chaque commande
    channel_id = 1355158120095027220
    channel = bot.get_channel(channel_id)

    if not channel:
        await interaction.response.send_message("‚ùå Le canal est introuvable ou le bot n'a pas acc√®s √† ce salon.", ephemeral=True)
        return

    # V√©rifie si le bot peut cr√©er des threads dans ce canal
    if not channel.permissions_for(channel.guild.me).send_messages or not channel.permissions_for(channel.guild.me).manage_threads:
        await interaction.response.send_message("‚ùå Le bot n'a pas les permissions n√©cessaires pour cr√©er des threads dans ce canal.", ephemeral=True)
        return

    try:
        # Cr√©e un nouveau thread √† chaque fois que la commande est ex√©cut√©e
        thread = await channel.create_thread(
            name=f"üéâ Bienvenue {user.name} !", 
            type=discord.ChannelType.private_thread,
            invitable=True
        )
        await thread.add_user(user)  # Ajoute l'utilisateur au thread

        # Embed de bienvenue et guide pour un nouveau thread
        welcome_embed = discord.Embed(
            title="üåå Bienvenue √† Etherya !",
            description="Une aventure unique t'attend, entre **√©conomie dynamique**, **strat√©gies** et **opportunit√©s**. "
                        "Pr√™t √† d√©couvrir tout ce que le serveur a √† offrir ?",
            color=discord.Color.blue()
        )
        welcome_embed.set_thumbnail(url=user.avatar.url if user.avatar else bot.user.avatar.url)
        await thread.send(embed=welcome_embed)

    except discord.errors.Forbidden:
        await interaction.response.send_message("‚ùå Le bot n'a pas les permissions n√©cessaires pour cr√©er un thread priv√© dans ce canal.", ephemeral=True)
        return

    # Embed du guide
    guide_embed = discord.Embed(
        title="üìñ Besoin d'un Guide ?",
        description="Nous avons pr√©par√© un **Guide de l'√âconomie** pour t'aider √† comprendre notre syst√®me mon√©taire et "
                    "les diff√©rentes fa√ßons d'√©voluer. Veux-tu le suivre ?",
        color=discord.Color.gold()
    )
    guide_embed.set_footer(text="Tu peux toujours y acc√©der plus tard via cette commande ! üöÄ")
    await thread.send(embed=guide_embed, view=GuideView(thread))  # Envoie le guide avec les boutons

    await interaction.response.send_message("üì© Ton guide personnalis√© a √©t√© ouvert.", ephemeral=True)

    # IMPORTANT : Permet au bot de continuer √† traiter les commandes
    await bot.process_commands(message)
#-------------------------------------------------------------------------- Commandes Liens Etherya: /etherya

@bot.tree.command(name="etherya", description="Obtiens le lien du serveur Etherya !")
async def etherya(interaction: discord.Interaction):
    """Commande slash pour envoyer l'invitation du serveur Etherya"""
    message = (
        "üåü **[ùë∫◊•] ùë¨ùíïùíâùíÜùíìùíöùíÇ !** üåü\n\n"
        "üç£ „Éª Un serveur **Communautaire**\n"
        "üå∏ „Éª Des membres sympas et qui **sont actifs** !\n"
        "üåã „Éª Des r√¥les **exclusifs** avec une **boutique** !\n"
        "üéê „Éª **Safe place** & **Un Syst√®me √âconomique d√©velopp√©** !\n"
        "‚òï „Éª Divers **Salons** pour un divertissement optimal.\n"
        "‚òÅÔ∏è „Éª Un staff sympa, √† l'√©coute et qui **recrute** !\n"
        "üî• „Éª Pas convaincu ? Rejoins-nous et vois par toi-m√™me le potentiel de notre serveur !\n\n"
        "üé´ **[Acc√®s direct au serveur Etherya !](https://discord.gg/weX6tKbDta) **\n\n"
        "Rejoins-nous et amuse-toi ! üéâ"
    )

    await interaction.response.send_message(message)
#------------------------------------------------------------------------- Commandes de Gestion : +clear, +nuke, +addrole, +delrole

@bot.command()
async def clear(ctx, amount: int = None):
    # V√©rifie si l'utilisateur a la permission de g√©rer les messages ou s'il est l'ID autoris√©
    if ctx.author.id == 792755123587645461 or ctx.author.guild_permissions.manage_messages:
        if amount is None:
            await ctx.send("Merci de pr√©ciser un chiffre entre 2 et 100.")
            return
        if amount < 2 or amount > 100:
            await ctx.send("Veuillez sp√©cifier un nombre entre 2 et 100.")
            return

        deleted = await ctx.channel.purge(limit=amount)
        await ctx.send(f'{len(deleted)} messages supprim√©s.', delete_after=5)
    else:
        await ctx.send("Vous n'avez pas la permission d'utiliser cette commande.")

# Configuration des emojis personnalisables
EMOJIS = {
    "members": "üë•",
    "crown": "üëë",  # Emoji couronne
    "voice": "üé§",
    "boosts": "üöÄ"
}

@bot.command()
async def addrole(ctx, user: discord.Member = None, role: discord.Role = None):
    """Ajoute un r√¥le √† un utilisateur."""
    # V√©rifie si l'utilisateur a la permission de g√©rer les r√¥les
    if ctx.author.id != 792755123587645461 and not ctx.author.guild_permissions.manage_roles:
        await ctx.send("Tu n'as pas les permissions n√©cessaires pour utiliser cette commande.")
        return

    # V√©rifier si les arguments sont bien fournis
    if user is None or role is None:
        await ctx.send("Erreur : veuillez suivre ce format : +addrole @user @r√¥le")
        return

    try:
        # Ajouter le r√¥le √† l'utilisateur
        await user.add_roles(role)
        await ctx.send(f"{user.mention} a maintenant le r√¥le {role.name} !")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas les permissions n√©cessaires pour attribuer ce r√¥le.")
    except discord.HTTPException as e:
        await ctx.send(f"Une erreur est survenue : {e}")
    
@bot.command()
async def delrole(ctx, user: discord.Member = None, role: discord.Role = None):
    """Retire un r√¥le √† un utilisateur."""
    # V√©rifie si l'utilisateur a la permission de g√©rer les r√¥les
    if ctx.author.id != 792755123587645461 and not ctx.author.guild_permissions.manage_roles:
        await ctx.send("Tu n'as pas les permissions n√©cessaires pour utiliser cette commande.")
        return

    # V√©rifier si les arguments sont bien fournis
    if user is None or role is None:
        await ctx.send("Erreur : veuillez suivre ce format : +delrole @user @r√¥le")
        return

    try:
        # Retirer le r√¥le √† l'utilisateur
        await user.remove_roles(role)
        await ctx.send(f"{user.mention} n'a plus le r√¥le {role.name} !")
    except discord.Forbidden:
        await ctx.send("Je n'ai pas les permissions n√©cessaires pour retirer ce r√¥le.")
    except discord.HTTPException as e:
        await ctx.send(f"Une erreur est survenue : {e}")

@bot.command()
async def nuke(ctx):
    # V√©rifie si l'utilisateur a la permission Administrateur
    if ctx.author.id != 792755123587645461 and not ctx.author.guild_permissions.administrator:
        await ctx.send("Tu n'as pas les permissions n√©cessaires pour ex√©cuter cette commande.")
        return

    # V√©rifie que la commande a √©t√© lanc√©e dans un salon texte
    if isinstance(ctx.channel, discord.TextChannel):
        # R√©cup√®re le salon actuel
        channel = ctx.channel

        # Sauvegarde les informations du salon
        overwrites = channel.overwrites
        channel_name = channel.name
        category = channel.category
        position = channel.position

        # R√©cup√®re l'ID du salon pour le recr√©er
        guild = channel.guild

        try:
            # Supprime le salon actuel
            await channel.delete()

            # Cr√©e un nouveau salon avec les m√™mes permissions, cat√©gorie et position
            new_channel = await guild.create_text_channel(
                name=channel_name,
                overwrites=overwrites,
                category=category
            )

            # R√©ajuste la position du salon
            await new_channel.edit(position=position)

            # Envoie un message dans le nouveau salon pour confirmer la recr√©ation
            await new_channel.send(
                f"üí• {ctx.author.mention} a **nuk√©** ce salon. Il a √©t√© recr√©√© avec succ√®s."
            )
        except Exception as e:
            await ctx.send(f"Une erreur est survenue lors de la recr√©ation du salon : {e}")
    else:
        await ctx.send("Cette commande doit √™tre utilis√©e dans un salon texte.")
    # IMPORTANT : Permet au bot de continuer √† traiter les commandes
    await bot.process_commands(message)
    
#------------------------------------------------------------------------- Commandes d'aide : +aide, /help
@bot.command()
async def help(ctx):
    banner_url = "https://raw.githubusercontent.com/Cass64/EtheryaBot/refs/heads/main/images_etherya/etheryaBot_banniere.png"  # URL de la banni√®re
    embed = discord.Embed(
        title="üè° **Accueil Etherya Gestion**",
        description=f"Hey, bienvenue {ctx.author.mention} sur la page d'accueil d'Etherya Gestion ! üéâ\n\n"
                    "Ici, vous trouverez toutes les informations n√©cessaires pour g√©rer et administrer votre serveur efficacement. üåü",
        color=discord.Color(0x1abc9c)
    )
    embed.set_thumbnail(url=bot.user.avatar.url)
    embed.set_footer(text="D√©velopp√© avec ‚ù§Ô∏è par Iseyg. Merci pour votre soutien !")
    embed.set_image(url=banner_url)  # Ajout de la banni√®re en bas de l'embed

    # Informations g√©n√©rales
    embed.add_field(name="üìö **Informations**", value=f"‚Ä¢ **Mon pr√©fixe** : +\n‚Ä¢ **Nombre de commandes** : 70", inline=False)

    # Cr√©ation du menu d√©roulant
    select = discord.ui.Select(
        placeholder="Choisissez une cat√©gorie üëá", 
        options=[
            discord.SelectOption(label="Owner Bot", description="üëëCommandes pour g√®rer le bot", emoji="üéì"),
            discord.SelectOption(label="Configuration du Bot", description="üñáÔ∏èCommandes pour configurer le bot", emoji="üì°"),
            discord.SelectOption(label="Gestion", description="üìö Commandes pour g√©rer le serveur", emoji="üîß"),
            discord.SelectOption(label="Utilitaire", description="‚öôÔ∏è Commandes utiles", emoji="üîî"),
            discord.SelectOption(label="Mod√©ration", description="‚öñÔ∏è Commandes Mod√©ration", emoji="üî®"),
            discord.SelectOption(label="Bot", description="ü§ñ Commandes Bot", emoji="ü¶æ"),
            discord.SelectOption(label="√âconomie", description="üí∏ Commandes √©conomie", emoji="üí∞"),
            discord.SelectOption(label="Ludiques", description="üéâ Commandes amusantes pour d√©tendre l'atmosph√®re et interagir avec les autres.", emoji="üéà"),
            discord.SelectOption(label="Test & D√©fis", description="üß†Commandes pour testez la personnalit√© et d√©fiez vos amis avec des jeux et des √©valuations.", emoji="üé≤"),
            discord.SelectOption(label="Cr√©dits", description="üíñ Remerciements et cr√©dits", emoji="üôè")
        ], 
        custom_id="help_select"
    )

    # D√©finir la m√©thode pour g√©rer l'interaction du menu d√©roulant
    async def on_select(interaction: discord.Interaction):
        category = interaction.data['values'][0]
        new_embed = discord.Embed(color=discord.Color(0x1abc9c))
        new_embed.set_image(url=banner_url)  # Ajout de la banni√®re dans chaque cat√©gorie
        if category == "Owner Bot":
            new_embed.title = "üëë **Commandes de Gestion du Bot**"
            new_embed.description = "Bienvenue dans la section gestion du bot !"
            new_embed.add_field(name="üí• +shutdown", value="D√©connecte le **bot** ‚úÇÔ∏è.\n*Pour une action plus drastique en cas de chaos ou d'urgence !*.", inline=False)
            new_embed.add_field(name="üîß +restart", value="Red√©marre le **bot** üìç.\n*√Ä utiliser en cas de mise √† jour ou de bug mineur.*", inline=False)
            new_embed.add_field(name="üéà +serverinfoall", value="Affiche les **informations de tous les serveurs** o√π le bot est pr√©sent.",  inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        if category == "Configuration du Bot":
            new_embed.title = "üóÉÔ∏è **Commandes de Configuration du Bot**"
            new_embed.description = "Bienvenue dans la section configuration du bot !"
            new_embed.add_field(name="‚öôÔ∏è +setup", value="Lance la **configuration du bot** sur le serveur ‚öôÔ∏è.\n*Permet de personnaliser les param√®tres du bot selon les besoins du serveur.*", inline=False)
            new_embed.add_field(name="üõ°Ô∏è +protection", value="Affiche les **protections disponibles** sur le bot et permet de les **activer ou d√©sactiver** üõ†Ô∏è.\n*Utile pour g√©rer les options de s√©curit√© comme l'anti-spam, l'anti-lien, etc.*", inline=False)
            new_embed.add_field(name="üîì +addwl", value="Ajoute un membre √† la **whitelist** pour qu'il soit **ignor√©** par les protections du bot üõ°Ô∏è.\n*Permet d'exempter certains utilisateurs des actions de s√©curit√© comme l'anti-spam ou l'anti-lien.*", inline=False)
            new_embed.add_field(name="‚ùå +removewl", value="Supprime un membre de la **whitelist** pour qu'il soit de nouveau **sujet aux protections** du bot üõ°Ô∏è.\n*Utilis√© pour r√©activer les actions de s√©curit√© contre l'utilisateur.*", inline=False)
            new_embed.add_field(name="üîç +listwl", value="Affiche la **liste des membres sur la whitelist** du bot üõ°Ô∏è.\n*Permet de voir quels utilisateurs sont exempt√©s des protections du bot.*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        if category == "Gestion":
            new_embed.title = "üî® **Commandes de Gestion**"
            new_embed.description = "Bienvenue dans la section gestion ! üìä\nCes commandes sont essentielles pour administrer le serveur. Voici un aper√ßu :"
            new_embed.add_field(name="üîß +clear (2-100)", value="Supprime des messages dans le salon üì¨.\n*Utilis√© pour nettoyer un salon ou supprimer un spam.*", inline=False)
            new_embed.add_field(name="üí• +nuke", value="Efface **tous** les messages du salon üö®.\n*Pour une action plus drastique en cas de chaos ou d'urgence !*.", inline=False)
            new_embed.add_field(name="‚ûï +addrole @user @r√¥le", value="Ajoute un r√¥le √† un utilisateur üë§.\n*Pour attribuer des r√¥les et des privil√®ges sp√©ciaux aux membres.*", inline=False)
            new_embed.add_field(name="‚ûñ +delrole @user @r√¥le", value="Retire un r√¥le √† un utilisateur üö´.\n*Retirer un r√¥le en cas de sanction ou de changement de statut.*", inline=False)
            new_embed.add_field(name="üî≤ /embed", value="Cr√©e un **embed personnalis√©** avec du texte, des images et des couleurs üé®.\n*Pratique pour partager des informations de mani√®re styl√©e et structur√©e.*", inline=False)
            new_embed.add_field(name="üö´ +listban", value="Affiche la **liste des membres bannis** du serveur ‚ö†Ô∏è.\n*Permet aux admins de voir les bannissements en cours.*", inline=False)
            new_embed.add_field(name="üîì +unbanall", value="D√©-banni **tous les membres** actuellement bannis du serveur üîì.\n*Utilis√© pour lever les bannissements en masse.*", inline=False)
            new_embed.add_field(name="üéâ +gcreate", value="Cr√©e un **giveaway** (concours) pour offrir des r√©compenses aux membres üéÅ.\n*Permet d'organiser des tirages au sort pour des prix ou des objets.*", inline=False)
            new_embed.add_field(name="‚ö° +fastgw", value="Cr√©e un **giveaway rapide** avec une dur√©e courte ‚è±Ô∏è.\n*Id√©al pour des concours instantan√©s avec des r√©compenses imm√©diates.*", inline=False)
            new_embed.add_field(name="üíé /premium", value="Entre un **code premium** pour devenir membre **premium** et acc√©der √† des fonctionnalit√©s exclusives ‚ú®.\n*Permet de d√©bloquer des avantages suppl√©mentaires pour am√©liorer ton exp√©rience.*", inline=False)
            new_embed.add_field(name="üîç /viewpremium", value="Affiche la **liste des serveurs premium** actuellement actifs üîë.\n*Permet de voir quels serveurs ont acc√©d√© aux avantages premium.*", inline=False)
            new_embed.add_field(name="üíé /devenirpremium", value="Obtiens des **informations** sur la mani√®re de devenir membre **premium** et d√©bloquer des fonctionnalit√©s exclusives ‚ú®.\n*Un guide pour savoir comment acc√©der √† l'exp√©rience premium et ses avantages.*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Utilitaire":
            new_embed.title = "‚öôÔ∏è **Commandes Utilitaires**"
            new_embed.description = "Bienvenue dans la section mod√©ration ! üö®\nCes commandes sont con√ßues pour g√©rer et contr√¥ler l'activit√© du serveur, en assurant une exp√©rience s√ªre et agr√©able pour tous les membres."
            new_embed.add_field(name="üìä +vc", value="Affiche les statistiques du serveur en temps r√©el .\n*Suivez l'√©volution du serveur en direct !*.", inline=False)
            new_embed.add_field(name="üö® +alerte @user <reason>", value="Envoie une alerte au staff en cas de comportement inappropri√© (insultes, spam, etc.) .\n*Note : Si cette commande est utilis√©e abusivement, des sanctions s√©v√®res seront appliqu√©es !*.", inline=False)
            new_embed.add_field(name="üì∂ +ping", value="Affiche la latence du bot en millisecondes.", inline=False)
            new_embed.add_field(name="‚è≥ +uptime", value="Affiche depuis combien de temps le bot est en ligne.", inline=False)
            new_embed.add_field(name="‚ÑπÔ∏è /r√¥le info <nom_du_r√¥le>", value="Affiche les informations d√©taill√©es sur un r√¥le sp√©cifique.", inline=False)
            new_embed.add_field(name="‚Ñπüí° /id√©e", value="Note une id√©e ou une chose √† faire dans ta liste perso üìù.\n*Parfait pour te rappeler d'un projet, d'une envie ou d'un objectif.*", inline=False)
            new_embed.add_field(name="üìã +listi", value="Affiche la **liste de tes id√©es not√©es** üßæ.\n*Utile pour retrouver facilement ce que tu as pr√©vu ou pens√©.*", inline=False)
            new_embed.add_field(name="üí¨ /suggestion", value="Propose une **suggestion ou une id√©e** pour am√©liorer **Etherya** ou le **bot** üõ†Ô∏è.\n*Ton avis compte, alors n‚Äôh√©site pas √† participer √† l‚Äô√©volution du projet.*", inline=False)
            new_embed.add_field(name="üìä /sondage", value="Cr√©e un **sondage** pour obtenir l'avis des membres du serveur üìã.\n*Parfait pour recueillir des retours ou prendre des d√©cisions collectives.*", inline=False)
            new_embed.add_field(name="‚è∞ /rappel", value="Cr√©e un **rappel personnel** pour ne rien oublier üìÖ.\n*Tu peux programmer des rappels pour des √©v√©nements, des t√¢ches ou des objectifs.*", inline=False)
            new_embed.add_field(name="üëã /presentation", value="Pr√©sente-toi au serveur et fais connaissance avec les membres üåü.\n*Une mani√®re sympa de partager tes int√©r√™ts et d'en savoir plus sur la communaut√©.*", inline=False)
            new_embed.add_field(name="ü§ñ +getbotinfo", value="Affiche des **informations d√©taill√©es** sur le bot üõ†Ô∏è.\n*Comprend des donn√©es comme la version, les statistiques et les fonctionnalit√©s du bot.*", inline=False)
            new_embed.add_field(name="üëë +alladmin", value="Affiche la **liste de tous les administrateurs** du serveur üîë.\n*Utile pour voir les membres avec les privil√®ges d'administration.*", inline=False)
            new_embed.add_field(name="üîç +snipe", value="Affiche le **dernier message supprim√©** du serveur üïµÔ∏è.\n*Permet de r√©cup√©rer le contenu des messages effac√©s r√©cemment.*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Mod√©ration":
            new_embed.title = "üîë **Commandes Mod√©ration**"
            new_embed.add_field(name="üö´ +ban @user", value="Exile un membre du serveur pour un comportement inacceptable .\nL'action de bannir un utilisateur est irr√©versible et est utilis√©e pour des infractions graves aux r√®gles du serveur.*", inline=False)
            new_embed.add_field(name="üöî +unban @user", value="L√®ve le bannissement d'un utilisateur, lui permettant de revenir sur le serveur .\nUnban un utilisateur qui a √©t√© banni, apr√®s examen du cas et d√©cision du staff..*", inline=False)
            new_embed.add_field(name="‚öñÔ∏è +mute @user", value="Rend un utilisateur silencieux en l'emp√™chant de parler pendant un certain temps .\nUtilis√© pour punir les membres qui perturbent le serveur par des messages intempestifs ou offensants.", inline=False)
            new_embed.add_field(name="üîì +unmute @user", value="Annule le silence impos√© √† un utilisateur et lui redonne la possibilit√© de communiquer üîä.\nPermet √† un membre de reprendre la parole apr√®s une p√©riode de mute.", inline=False)
            new_embed.add_field(name="‚ö†Ô∏è +warn @user", value="Avertit un utilisateur pour un comportement probl√©matique ‚ö†.\nUn moyen de signaler qu'un membre a enfreint une r√®gle mineure, avant de prendre des mesures plus s√©v√®res.", inline=False)
            new_embed.add_field(name="üö™ +kick @user", value="Expulse un utilisateur du serveur pour une infraction moins grave .\nUn kick expulse temporairement un membre sans le bannir, pour des violations l√©g√®res des r√®gles.", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Bot":
            new_embed.title = "üîë **Commandes Bot**"
            new_embed.add_field(name="üîä /connect", value="Connecte le **bot √† un canal vocal** du serveur üé§.\n*Permet au bot de rejoindre un salon vocal pour y diffuser de la musique ou d'autres interactions.*", inline=False)
            new_embed.add_field(name="üî¥ /disconnect", value="D√©connecte le **bot du canal vocal** üé§.\n*Permet au bot de quitter un salon vocal apr√®s une session musicale ou autre interaction.*", inline=False)
            new_embed.add_field(name="üåê /etherya", value="Affiche le **lien du serveur Etherya** pour rejoindre la communaut√© üöÄ.\n*Permet d'acc√©der facilement au serveur Etherya et de rejoindre les discussions et √©v√©nements.*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "√âconomie":
            new_embed.title = "‚öñÔ∏è **Commandes √âconomie**"
            new_embed.description = "G√©rez l‚Äô√©conomie et la s√©curit√© du serveur ici ! üíº"
            new_embed.add_field(name="üè∞ +prison @user", value="Mets un utilisateur en prison pour taxes impay√©es.", inline=False)
            new_embed.add_field(name="üöî +arrestation @user", value="Arr√™te un utilisateur apr√®s un braquage rat√©.", inline=False)
            new_embed.add_field(name="‚öñÔ∏è +liberation @user", value="Lib√®re un utilisateur apr√®s le paiement des taxes.", inline=False)
            new_embed.add_field(name="üîì +evasion", value="Permet de s‚Äô√©vader apr√®s un braquage rat√©.", inline=False)
            new_embed.add_field(name="üí∞ +cautionpayer @user", value="Payez la caution d‚Äôun membre emprisonn√©.", inline=False)
            new_embed.add_field(name="üé´ +ticket_euro_million @user", value="Achetez un ticket Euromillion avec un combin√©.", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Ludiques":
            new_embed.title = "üéâ **Commandes de D√©tente**"
            new_embed.description = "Bienvenue dans la section D√©tente ! üéà\nCes commandes sont con√ßues pour vous amuser et interagir de mani√®re l√©g√®re et dr√¥le. Profitez-en !"
            new_embed.add_field(name="ü§ó +hug @user", value="Envoie un c√¢lin √† [membre] avec une image mignonne de c√¢lin.", inline=False)
            new_embed.add_field(name="üí• +slap @user", value="Tu as gifl√© [membre] avec une image dr√¥le de gifle.", inline=False)
            new_embed.add_field(name="üíÉ +dance @user", value="[membre] danse avec une animation rigolote.", inline=False)
            new_embed.add_field(name="üíò +flirt @user", value="Vous avez charm√© [membre] avec un compliment !", inline=False)
            new_embed.add_field(name="üíã +kiss @user", value="Vous avez embrass√© [membre] afin de lui d√©montrer votre amour !", inline=False)
            new_embed.add_field(name="ü§´ +whisper @user [message]", value="[membre] a chuchot√© √† [ton nom] : [message].", inline=False)
            new_embed.add_field(name="üåü +blague", value="Envoie une blague al√©atoire, comme 'Pourquoi les plongeurs plongent toujours en arri√®re et jamais en avant ? Parce que sinon ils tombent toujours dans le bateau !'.", inline=False)
            new_embed.add_field(name="ü™ô +coinflip", value="Lancez une pi√®ce pour voir si vous gagnez ! \n*Tentez votre chance et d√©couvrez si vous avez un coup de chance.*", inline=False)
            new_embed.add_field(name="üé≤ +dice", value="Lancez un d√© √† 6 faces et voyez votre chance ! \n*Choisissez un num√©ro entre 1 et 6 et voyez si vous avez tir√© le bon!*", inline=False)
            new_embed.add_field(name="üó£Ô∏è +say", value="Faites dire quelque chose au bot √† la place de vous ! üó®\n*Lancez votre message et il sera annonc√© √† tout le serveur !*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Test & D√©fis":
            new_embed.title = "üéØ **Commandes de Tests et D√©fis**"
            new_embed.description = "Bienvenue dans la section Tests et D√©fis ! üé≤\nIci, vous pouvez √©valuer les autres, tester votre compatibilit√© et relever des d√©fis fun !"
            new_embed.add_field(name="üåà +gay @user", value="D√©termine le taux de gayitude d'un utilisateur .\n*Testez votre ouverture d'esprit !*.", inline=False)
            new_embed.add_field(name="üò§ +racist @user", value="D√©termine le taux de racisme d'un utilisateur .\n*Un test amusant √† faire avec vos amis.*", inline=False)
            new_embed.add_field(name="üíò +love @user", value="Affiche le niveau de compatibilit√© amoureuse .\n*Testez votre compatibilit√© avec quelqu'un !*.", inline=False)
            new_embed.add_field(name="üêÄ +rat @user", value="D√©termine le taux de ratitude d'un utilisateur .\n*V√©rifiez qui est le plus ‚Äòrat‚Äô parmi vos amis.*", inline=False)
            new_embed.add_field(name="üçÜ +zizi @user", value="√âvalue le niveau de zizi de l'utilisateur .\n*Un test ludique pour voir qui a le plus grand ego !*.", inline=False)
            new_embed.add_field(name="ü§° +con @user", value="D√©termine le taux de connerie d'un utilisateur .\n*Un test amusant √† faire avec vos amis.*", inline=False)
            new_embed.add_field(name="ü§™ +fou @user", value="D√©termine le taux de folie d'un utilisateur .\n*Testez l'√©tat mental de vos amis !*.", inline=False)
            new_embed.add_field(name="üí™ +testo @user", value="D√©termine le taux de testost√©rone d'un utilisateur .\n*Testez la virilit√© de vos amis !*.", inline=False)
            new_embed.add_field(name="üçë +libido @user", value="D√©termine le taux de libido d'un utilisateur .\n*Testez la chaleur de vos amis sous la couette !*.", inline=False)
            new_embed.add_field(name="ü™¥ +pfc @user", value="Jouez √† Pierre-Feuille-Ciseaux avec un utilisateur ! \n*Choisissez votre coup et voyez si vous gagnez contre votre adversaire !*.", inline=False)
            new_embed.add_field(name="üî´ +gunfight @user", value="Affrontez un autre utilisateur dans un duel de Gunfight ! \n*Acceptez ou refusez le d√©fi et d√©couvrez qui sera le gagnant !*", inline=False)
            new_embed.add_field(name="üíÄ +kill @user", value="Tuez un autre utilisateur dans un duel de force ! \n*Acceptez ou refusez le d√©fi et d√©couvrez qui sortira vainqueur de cette confrontation!*", inline=False)
            new_embed.add_field(name="üîÑ +reverse [texte]", value="Inverser un texte et le partager avec un autre utilisateur ! \n*Lancez un d√©fi pour voir si votre inversion sera correcte !*", inline=False)
            new_embed.add_field(name="‚≠ê +note @user [note sur 10]", value="Notez un autre utilisateur sur 10 ! \n*Exprimez votre avis sur leur comportement ou performance dans le serveur.*", inline=False)
            new_embed.add_field(name="üé≤ +roll", value="Lance un d√© pour g√©n√©rer un nombre al√©atoire entre 1 et 500 .\n*Essayez votre chance !*.", inline=False)
            new_embed.add_field(name="ü•ä +fight @user", value="Lancez un duel avec un autre utilisateur ! \n*Acceptez ou refusez le combat et d√©couvrez qui sera le champion du serveur.*", inline=False)
            new_embed.add_field(name="‚ö° +superpouvoir @user", value="D√©clenche un super-pouvoir √©pique pour un utilisateur !\n*Donne un pouvoir al√©atoire allant du cool au compl√®tement d√©bile, comme la t√©l√©portation, la super vitesse, ou m√™me la cr√©ation de burgers.*", inline=False)
            new_embed.add_field(name="üåø +totem @user", value="D√©couvrez votre animal totem spirituel !\n*Un animal magique et spirituel vous guidera, qu‚Äôil soit un loup protecteur ou un poisson rouge distrait. Un r√©sultat √©pique et amusant !*", inline=False)
            new_embed.add_field(name="üîÆ +futur @user", value="Pr√©dit l'avenir d'un utilisateur de mani√®re totalement farfelue !\n*L'avenir peut √™tre aussi improbable qu'un tr√©sor cach√© rempli de bonbons ou une rencontre avec un extraterrestre amateur de chats.*", inline=False)
            new_embed.add_field(name="üë∂ +enfant @user @user", value="Cr√©e un enfant al√©atoire entre deux utilisateurs !\n*M√©langez les pseudos et les photos de profil des deux utilisateurs pour cr√©er un b√©b√© unique. C'est fun et surprenant !*", inline=False)
            new_embed.add_field(name="üç¨ +sucre", value="Affiche le **taux de glyc√©mie** du membre cibl√© üç≠.\n*Utile pour suivre les niveaux de sucre des membres du serveur de mani√®re ludique.*", inline=False)
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")
        elif category == "Cr√©dits":
            new_embed.title = "üíñ **Cr√©dits et Remerciements**"
            new_embed.description = """
            Un immense merci √† **Iseyg** pour le d√©veloppement de ce bot incroyable ! üôè  
            Sans lui, ce bot ne serait rien de plus qu'un concept. Gr√¢ce √† sa passion, son travail acharn√© et ses comp√©tences exceptionnelles, ce projet a pris vie et continue de grandir chaque jour. üöÄ

            Nous tenons √©galement √† exprimer notre gratitude envers **toute la communaut√©**. üíô  
            Votre soutien constant, vos retours et vos id√©es font de ce bot ce qu'il est aujourd'hui. Chacun de vous, que ce soit par vos suggestions, vos contributions ou m√™me simplement en utilisant le bot, fait une diff√©rence. 

            Merci √† **tous les d√©veloppeurs, contributeurs et membres** qui ont aid√© √† faire √©voluer ce projet et l‚Äôont enrichi avec leurs talents et leurs efforts. üôå

            Et bien s√ªr, un grand merci √† vous, **utilisateurs**, pour votre enthousiasme et votre confiance. Vous √™tes la raison pour laquelle ce bot continue d‚Äô√©voluer. üåü

            Restons unis et continuons √† faire grandir cette aventure ensemble ! üåç
            """
            new_embed.set_footer(text="‚ô•Ô∏è by Iseyg")

        await interaction.response.edit_message(embed=new_embed)

    select.callback = on_select  # Attacher la fonction de callback √† l'√©l√©ment select

    # Afficher le message avec le menu d√©roulant
    view = discord.ui.View()
    view.add_item(select)
    
    await ctx.send(embed=embed, view=view)

#------------------------------------------------------------------------- Commandes Fun : Flemme de tout lister
@bot.command()
async def gay(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de gayitude üåà", 
        description=f"{member.mention} est gay √† **{percentage}%** !\n\n*Le pourcentage varie en fonction des pulsions du membre.*", 
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} ‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def singe(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de singe üêí", 
        description=f"{member.mention} est un singe √† **{percentage}%** !\n\n*Le pourcentage varie en fonction de l'√©nergie primate du membre.*", 
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} üêµ by Isey", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def racist(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de racisme ü™Ñ", 
        description=f"{member.mention} est raciste √† **{percentage}%** !\n\n*Le pourcentage varie en fonction des pulsions du membre.*", 
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def sucre(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de l'indice glyc√©mique üç¨", 
        description=f"L'indice glyc√©mique de {member.mention} est de **{percentage}%** !\n\n*Le pourcentage varie en fonction des habitudes alimentaires de la personne.*", 
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} üçèby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def love(ctx, member: discord.Member = None):
    if not member:
        await ctx.send("Tu n'as pas mentionn√© de membre ! Utilise +love @membre.")
        return
    
    love_percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title="L'Amour Etheryen",
        description=f"L'amour entre {ctx.author.mention} et {member.mention} est de **{love_percentage}%** !",
        color=discord.Color.red() if love_percentage > 50 else discord.Color.blue()
    )
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    embed.set_thumbnail(url="https://img.freepik.com/photos-gratuite/silhouette-mains-coeur-contre-lumieres-ville-nuit_23-2150984259.jpg?ga=GA1.1.719997987.1741155829&semt=ais_hybrid")

    await ctx.send(embed=embed)

@bot.command()
async def rat(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de radinerie üêÅ", 
        description=f"{member.mention} est un rat √† **{percentage}%** !\n\n*Le pourcentage varie en fonction des actes du membre.*", 
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def con(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title="Analyse de connerie ü§°",
        description=f"{member.mention} est con √† **{percentage}%** !\n\n*Le pourcentage varie en fonction des neurones actifs du membre.*",
        color=discord.Color.red()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def libido(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title="Analyse de libido üî•",
        description=f"{member.mention} a une libido √† **{percentage}%** !\n\n*Le pourcentage varie en fonction de l'humeur et du climat.*",
        color=discord.Color.red()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

# ID du r√¥le requis
role_id = 1166113718602575892

# D√©finir la commande +roll
@bot.command()
async def roll(ctx, x: str = None):
    # V√©rifier si l'utilisateur a le r√¥le requis
    if role_id not in [role.id for role in ctx.author.roles]:
        embed = discord.Embed(
            title="Erreur",
            description="Vous n'avez pas le r√¥le requis pour utiliser cette commande.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    # V√©rifier si x est bien pr√©cis√©
    if x is None:
        embed = discord.Embed(
            title="Erreur",
            description="Vous n'avez pas pr√©cis√© de chiffre entre 1 et 500.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    try:
        # Convertir x en entier
        x = int(x)
    except ValueError:
        embed = discord.Embed(
            title="Erreur",
            description="Le chiffre doit √™tre un nombre entier.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # V√©rifier si x est dans les bonnes limites
    if x < 1 or x > 500:
        embed = discord.Embed(
            title="Erreur",
            description="Le chiffre doit √™tre compris entre 1 et 500.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return
    
    # G√©n√©rer un nombre al√©atoire entre 1 et x
    result = random.randint(1, x)

    # Cr√©er l'embed de la r√©ponse
    embed = discord.Embed(
        title="R√©sultat du tirage",
        description=f"Le nombre tir√© au hasard entre 1 et {x} est : **{result}**",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)
    
@bot.command()
async def zizi(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    # G√©n√©rer une valeur al√©atoire entre 0 et 28 cm
    value = random.randint(0, 50)

    # Cr√©er l'embed
    embed = discord.Embed(
        title="Analyse de la taille du zizi üî•", 
        description=f"{member.mention} a un zizi de **{value} cm** !\n\n*La taille varie selon l'humeur du membre.*", 
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)

    # Envoyer l'embed
    await ctx.send(embed=embed)

@bot.command()
async def fou(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de folie ü§™", 
        description=f"{member.mention} est fou √† **{percentage}%** !\n\n*Le pourcentage varie en fonction de l'√©tat mental du membre.*", 
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def testo(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return
    
    percentage = random.randint(0, 100)
    
    embed = discord.Embed(
        title=f"Analyse de testost√©rone üí™", 
        description=f"{member.mention} a un taux de testost√©rone de **{percentage}%** !\n\n*Le pourcentage varie en fonction des niveaux de virilit√© du membre.*", 
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

class PFCView(View):
    def __init__(self, player1, player2):
        super().__init__(timeout=60)
        self.choices = {}
        self.player1 = player1
        self.player2 = player2
        
        for choice in ['Pierre', 'Feuille', 'Ciseau']:
            self.add_item(PFCButton(choice, self))

    async def check_winner(self):
        if len(self.choices) == 2:
            p1_choice = self.choices[self.player1]
            p2_choice = self.choices[self.player2]
            result = determine_winner(p1_choice, p2_choice)
            
            winner_text = {
                'win': f"{self.player1.mention} a gagn√© !",
                'lose': f"{self.player2.mention} a gagn√© !",
                'draw': "Match nul !"
            }
            
            embed = discord.Embed(title="R√©sultat du Pierre-Feuille-Ciseaux !", description=f"{self.player1.mention} a choisi **{p1_choice}**\n{self.player2.mention} a choisi **{p2_choice}**\n\n{winner_text[result]}", color=0x00FF00)
            await self.player1.send(embed=embed)
            await self.player2.send(embed=embed)
            await self.message.edit(embed=embed, view=None)

class PFCButton(Button):
    def __init__(self, choice, view):
        super().__init__(label=choice, style=discord.ButtonStyle.primary)
        self.choice = choice
        self.pfc_view = view
    
    async def callback(self, interaction: discord.Interaction):
        if interaction.user in [self.pfc_view.player1, self.pfc_view.player2]:
            if interaction.user not in self.pfc_view.choices:
                self.pfc_view.choices[interaction.user] = self.choice
                await interaction.response.send_message(f"{interaction.user.mention} a choisi **{self.choice}**", ephemeral=True)
                if len(self.pfc_view.choices) == 2:
                    await self.pfc_view.check_winner()
            else:
                await interaction.response.send_message("Tu as d√©j√† choisi !", ephemeral=True)
        else:
            await interaction.response.send_message("Tu ne participes pas √† cette partie !", ephemeral=True)

def determine_winner(choice1, choice2):
    beats = {"Pierre": "Ciseau", "Ciseau": "Feuille", "Feuille": "Pierre"}
    if choice1 == choice2:
        return "draw"
    elif beats[choice1] == choice2:
        return "win"
    else:
        return "lose"

class AcceptView(View):
    def __init__(self, ctx, player1, player2):
        super().__init__(timeout=30)
        self.ctx = ctx
        self.player1 = player1
        self.player2 = player2

        self.add_item(AcceptButton("‚úÖ Accepter", discord.ButtonStyle.success, True, self))
        self.add_item(AcceptButton("‚ùå Refuser", discord.ButtonStyle.danger, False, self))

class AcceptButton(Button):
    def __init__(self, label, style, accept, view):
        super().__init__(label=label, style=style)
        self.accept = accept
        self.accept_view = view
    
    async def callback(self, interaction: discord.Interaction):
        if interaction.user != self.accept_view.player2:
            return await interaction.response.send_message("Ce n'est pas √† toi d'accepter ou refuser !", ephemeral=True)
        
        if self.accept:
            embed = discord.Embed(title="Pierre-Feuille-Ciseaux", description=f"{self.accept_view.player1.mention} VS {self.accept_view.player2.mention}\n\nCliquez sur votre choix !", color=0x00FF00)
            await interaction.message.edit(embed=embed, view=PFCView(self.accept_view.player1, self.accept_view.player2))
        else:
            await interaction.message.edit(content=f"Le +pfc a √©t√© refus√© par {self.accept_view.player2.mention}", embed=None, view=None)

@bot.command()
async def pfc(ctx, member: discord.Member = None):
    if not member:
        return await ctx.send("Vous devez mentionner un adversaire pour jouer !")
    if member == ctx.author:
        return await ctx.send("Vous ne pouvez pas jouer contre vous-m√™me !")
    
    embed = discord.Embed(title="D√©fi Pierre-Feuille-Ciseaux", description=f"{member.mention}, acceptes-tu le d√©fi de {ctx.author.mention} ?", color=0xFFA500)
    await ctx.send(embed=embed, view=AcceptView(ctx, ctx.author, member))

@bot.command()
async def gunfight(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send('Erreur : vous devez cibler un membre !')
        return

    if member == ctx.author:
        await ctx.send('Vous ne pouvez pas vous d√©fier vous-m√™me !')
        return

    # Cr√©ation des boutons
    accept_button = Button(label="Oui", style=discord.ButtonStyle.green)
    decline_button = Button(label="Non", style=discord.ButtonStyle.red)

    # D√©finir les actions des boutons
    async def accept(interaction):
        if interaction.user != member:
            await interaction.response.send_message('Ce n\'est pas votre duel !', ephemeral=True)
            return
        result = random.choice([ctx.author, member])
        winner = result.name
        await interaction.message.edit(content=f"{member.mention} a accept√© le duel ! Le gagnant est {winner} !", view=None)
    
    async def decline(interaction):
        if interaction.user != member:
            await interaction.response.send_message('Ce n\'est pas votre duel !', ephemeral=True)
            return
        await interaction.message.edit(content=f"{member.mention} a refus√© le duel.", view=None)

    accept_button.callback = accept
    decline_button.callback = decline

    # Cr√©ation de la vue avec les boutons
    view = View()
    view.add_item(accept_button)
    view.add_item(decline_button)

    # Envoyer l'embed pour le d√©fi
    embed = discord.Embed(
        title="D√©fi de Gunfight",
        description=f"{ctx.author.mention} vous d√©fie √† un duel, {member.mention}. Acceptez-vous ?",
        color=discord.Color.blue()
    )
    await ctx.send(embed=embed, view=view)
    
@bot.command()
async def hug(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Tu as donn√© un c√¢lin √† {member.name} ! ü§ó",  # Utilisation de member.name pour afficher le nom simple
        description="Les c√¢lins sont la meilleure chose au monde !",
        color=discord.Color.blue()
    )
    embed.set_image(url="https://media.tenor.com/P6FsFii7pnoAAAAM/hug-warm-hug.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def slap(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Tu as gifl√© {member.name} !",  # Utilisation de member.name
        description="Oups, √ßa a d√ª faire mal üò±",
        color=discord.Color.red()
    )
    embed.set_image(url="https://media.tenor.com/QRdCcNbk18MAAAAM/slap.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def dance(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"{member.name} danse comme un pro ! üíÉüï∫",  # Utilisation de member.name
        description="Admirez cette danse √©pique !",
        color=discord.Color.green()
    )
    embed.set_image(url="https://media.tenor.com/d7ibtS6MLQgAAAAM/dancing-kid.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def flirt(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Vous avez charm√© {member.name} avec un sourire √©clatant ! üòç",  # Utilisation de member.name
        description="Vous √™tes irr√©sistible !",
        color=discord.Color.purple()
    )
    embed.set_image(url="https://media.tenor.com/HDdV-0Km1QAAAAAM/hello-sugar.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def whisper(ctx, member: discord.Member = None, *, message):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Chuchotement de {ctx.author.name} √† {member.name}",  # Utilisation de member.name et ctx.author.name
        description=f"*{message}*",
        color=discord.Color.greyple()
    )
    embed.set_footer(text=f"Un message secret entre vous deux... {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    embed.set_thumbnail(url=member.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
async def troll(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Tu as troll√© {member.name} ! üòÜ",  # Utilisation de member.name
        description=f"Oups, {member.name} s'est fait avoir !",
        color=discord.Color.orange()
    )
    embed.set_image(url="https://media.tenor.com/7Q8TRpW2ZXkAAAAM/yeet-lol.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
async def kiss(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Tu as embrass√© {member.name} !",  # Utilisation de member.name
        description="Un doux baiser üíã",  
        color=discord.Color.pink()
    )
    embed.set_image(url="https://media.tenor.com/3DHc1_2PZ-oAAAAM/kiss.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
async def kill(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Vous n'avez cibl√© personne !")
        return

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Tu as tu√© {member.name} !",  # Utilisation de member.name
        description="C'est la fin pour lui... üíÄ",  
        color=discord.Color.red()
    )
    embed.set_image(url="https://media1.tenor.com/m/4hO2HfS9fcMAAAAd/toaru-index.gif")
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def reverse(ctx, *, text: str = None):
    if text is None:
        await ctx.send("Tu n'as pas fourni de texte √† inverser !")
        return

    reversed_text = text[::-1]  # Inverser le texte
    await ctx.send(f"Texte invers√© : {reversed_text}")

@bot.command()
async def note(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Tu n'as pas pr√©cis√© l'utilisateur !")
        return

    # G√©n√©rer une note al√©atoire entre 1 et 10
    note = random.randint(1, 10)

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"{member.name} a re√ßu une note !",
        description=f"Note : {note}/10",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def say(ctx, *, text: str = None):
    # V√©rifie si l'utilisateur a les permissions d'admin
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("Tu n'as pas les permissions n√©cessaires pour utiliser cette commande.")
        return
    
    if text is None:
        await ctx.send("Tu n'as pas √©crit de texte √† dire !")
        return

    # Supprime le message originel
    await ctx.message.delete()

    # Envoie le texte sp√©cifi√©
    await ctx.send(text)



@bot.command()
async def coinflip(ctx):
    import random
    result = random.choice(["Pile", "Face"])
    await ctx.send(f"R√©sultat du coinflip : {result}")


@bot.command()
async def dice(ctx):
    import random
    result = random.randint(1, 6)
    await ctx.send(f"R√©sultat du d√© : {result}")


@bot.command()
async def fight(ctx, member: discord.Member = None):
    if member is None:
        await ctx.send("Tu n'as cibl√© personne pour te battre !")
        return

    # Simuler un combat
    import random
    result = random.choice([f"{ctx.author.name} a gagn√© !", f"{member.name} a gagn√© !", "C'est une √©galit√© !"])

    # Cr√©er l'embed
    embed = discord.Embed(
        title=f"Combat entre {ctx.author.name} et {member.name}",
        description=result,
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=member.avatar.url)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

@bot.command()
async def enfant(ctx, parent1: discord.Member = None, parent2: discord.Member = None):
    if not parent1 or not parent2:
        await ctx.send("Tu dois mentionner deux membres ! Utilise `/enfant @membre1 @membre2`.")
        return
    
    # G√©n√©ration du pr√©nom en combinant les pseudos
    prenom = parent1.name[:len(parent1.name)//2] + parent2.name[len(parent2.name)//2:]
    
    # Cr√©ation de l'embed
    embed = discord.Embed(
        title="üë∂ Voici votre enfant !",
        description=f"{parent1.mention} + {parent2.mention} = **{prenom}** üçº",
        color=discord.Color.purple()
    )
    embed.set_footer(text=f"Prenez soin de votre b√©b√© ! {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    # Ajout des photos de profil
    embed.set_thumbnail(url=parent1.avatar.url if parent1.avatar else parent2.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def superpouvoir(ctx, user: discord.Member = None):
    if not user:
        user = ctx.author  # Si pas d‚Äôutilisateur mentionn√©, prendre l‚Äôauteur

    pouvoirs = [
        "T√©l√©portation instantan√©e üåÄ - Peut se d√©placer n'importe o√π en un clin d'≈ìil.",
        "Contr√¥le du feu üî• - Rien ne lui r√©siste‚Ä¶ sauf l'eau.",
        "Super vitesse ‚ö° - Peut courir plus vite qu'un TGV, mais oublie souvent o√π il va.",
        "Lecture des pens√©es üß† - Peut lire dans les esprits‚Ä¶ sauf ceux qui ne pensent √† rien.",
        "Invisibilit√© ü´• - Peut dispara√Ætre‚Ä¶ mais oublie que ses v√™tements restent visibles.",
        "parler aux animaux ü¶ú - Mais ils n'ont pas grand-chose d'int√©ressant √† dire.",
        "Super force üí™ - Peut soulever une voiture, mais gal√®re √† ouvrir un pot de cornichons.",
        "M√©tamorphose ü¶é - Peut se transformer en n'importe quoi‚Ä¶ mais pas revenir en humain.",
        "Chance infinie üçÄ - Gagne √† tous les jeux‚Ä¶ sauf au Uno.",
        "Cr√©ation de portails üåå - Peut ouvrir des portails‚Ä¶ mais ne sait jamais o√π ils m√®nent.",
        "R√©g√©n√©ration ü©∏ - Gu√©rit instantan√©ment‚Ä¶ mais reste chatouilleux √† vie.",
        "Capacit√© de voler üïäÔ∏è - Mais uniquement √† 10 cm du sol.",
        "Super charisme üòé - Convainc tout le monde‚Ä¶ sauf sa m√®re.",
        "Vision laser üî• - Br√ªle tout sur son passage‚Ä¶ y compris ses propres chaussures.",
        "Invocation de clones üßë‚Äçü§ù‚Äçüßë - Mais ils n‚Äôob√©issent jamais.",
        "T√©l√©kin√©sie ‚ú® - Peut d√©placer des objets‚Ä¶ mais uniquement des plumes.",
        "Cr√©ation de burgers üçî - Magique, mais toujours trop cuits ou trop crus.",
        "Respiration sous l'eau üê† - Mais panique d√®s qu'il voit une m√©duse.",
        "Contr√¥le de la gravit√© üåç - Peut voler, mais oublie souvent de redescendre.",
        "Capacit√© d‚Äôarr√™ter le temps ‚è≥ - Mais uniquement quand il dort.",
        "Voyage dans le temps ‚è∞ - Peut voyager dans le pass√© ou le futur‚Ä¶ mais toujours √† la mauvaise √©poque.",
        "T√©l√©pathie invers√©e üß† - Peut faire entendre ses pens√©es aux autres‚Ä¶ mais ils ne peuvent jamais comprendre.",
        "Manipulation des r√™ves üåô - Peut entrer dans les r√™ves des gens‚Ä¶ mais se retrouve toujours dans des cauchemars.",
        "Super m√©moire üìö - Se souvient de tout‚Ä¶ sauf des choses qu‚Äôil vient de dire.",
        "Manipulation des ombres üåë - Peut faire bouger les ombres‚Ä¶ mais ne peut jamais les arr√™ter.",
        "Cr√©ation de pluie üçÉ - Peut faire pleuvoir‚Ä¶ mais uniquement sur ses amis.",
        "Ma√Ætrise des plantes üå± - Peut faire pousser des plantes √† une vitesse folle‚Ä¶ mais elles ne cessent de pousser partout.",
        "Contr√¥le des r√™ves √©veill√©s üí§ - Peut contr√¥ler ses r√™ves quand il est √©veill√©‚Ä¶ mais se retrouve toujours dans une r√©union ennuyante.",
        "Ma√Ætrise de l‚Äô√©clairage ‚ú® - Peut illuminer n'importe quelle pi√®ce‚Ä¶ mais oublie d‚Äô√©teindre.",
        "Cr√©ation de souvenirs üß≥ - Peut cr√©er des souvenirs‚Ä¶ mais ceux-ci sont toujours un peu bizarres.",
        "Changement de taille üìè - Peut grandir ou rapetisser‚Ä¶ mais n'arrive jamais √† garder une taille stable.",
        "Vision nocturne üåô - Peut voir dans l‚Äôobscurit√©‚Ä¶ mais tout est toujours en noir et blanc.",
        "Contr√¥le des √©l√©ments ü§π‚Äç‚ôÇÔ∏è - Peut manipuler tous les √©l√©ments naturels‚Ä¶ mais uniquement quand il pleut.",
        "Phasing √† travers les murs üö™ - Peut traverser les murs‚Ä¶ mais parfois il traverse aussi les portes.",
        "R√©g√©n√©ration de l‚Äôesprit üß† - Gu√©rit les blessures mentales‚Ä¶ mais les oublie instantan√©ment apr√®s."


    ]

    pouvoir = random.choice(pouvoirs)

    embed = discord.Embed(
        title="‚ö° Super-Pouvoir D√©bloqu√© !",
        description=f"{user.mention} poss√®de le pouvoir de**{pouvoir}** !",
        color=discord.Color.purple()
    )
    embed.set_footer(text=f"Utilise-le avec sagesse... ou pas. {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    
    await ctx.send(embed=embed)

@bot.command()
async def totem(ctx, member: discord.Member = None):
    if not member:
        member = ctx.author  # Si pas de membre mentionn√©, prendre l'auteur  

    animaux_totem = {
        "Loup üê∫": "Fid√®le et protecteur, il veille sur sa meute.",
        "Renard ü¶ä": "Rus√© et malin, il trouve toujours un moyen de s'en sortir.",
        "Hibou ü¶â": "Sage et observateur, il comprend tout avant les autres.",
        "Dragon üêâ": "Puissant et imposant, il ne laisse personne indiff√©rent.",
        "Dauphin üê¨": "Joueur et intelligent, il adore emb√™ter les autres.",
        "Chat üê±": "Myst√©rieux et ind√©pendant, il fait ce qu‚Äôil veut, quand il veut.",
        "Serpent üêç": "Discret et patient, il attend le bon moment pour frapper.",
        "Corbeau ü¶Ö": "Intelligent et un peu sinistre, il voit ce que les autres ignorent.",
        "Panda üêº": "Calme et adorable‚Ä¶ jusqu‚Äô√† ce qu‚Äôon lui prenne son bambou.",
        "Tortue üê¢": "Lente mais sage, elle gagne toujours √† la fin.",
        "Aigle ü¶Ö": "Libre et fier, il vole au-dessus de tous les probl√®mes.",
        "Chauve-souris ü¶á": "Pr√©f√©rant l'obscurit√©, elle voit clair quand tout le monde est perdu.",
        "Tigre üêØ": "Puissant et rapide, personne ne l‚Äôarr√™te.",
        "Lapin üê∞": "Rapide et malin, mais fuit d√®s qu‚Äôil y a un probl√®me.",
        "Singe üêµ": "Curieux et joueur, il adore faire des b√™tises.",
        "Escargot üêå": "Lent‚Ä¶ mais au moins il arrive toujours √† destination.",
        "Pigeon üïäÔ∏è": "Increvable et partout √† la fois, impossible de s'en d√©barrasser.",
        "Licorne ü¶Ñ": "Rare et magique, il apporte de la lumi√®re partout o√π il passe.",
        "Poisson rouge üê†": "M√©moire de 3 secondes, mais au moins il ne s‚Äôinqui√®te jamais.",
        "Canard ü¶Ü": "Semble idiot, mais cache une intelligence surprenante.",
        "Raton laveur ü¶ù": "Petit voleur mignon qui adore piquer des trucs.",
        "Lynx üêÜ" : "Serr√© dans ses mouvements, il frappe avec pr√©cision et discr√©tion.",
        "Loup de mer üåäüê∫" : "Un loup qui conquiert aussi bien les oc√©ans que la terre, fier et audacieux.",
        "Baleine üêã" : "Majestueuse et bienveillante, elle nage dans les eaux profondes avec sagesse.",
        "L√©opard üêÜ" : "Vif et agile, il dispara√Æt dans la jungle avant m√™me qu'on ait pu le voir.",
        "Ours üêª" : "Fort et protecteur, il d√©fend son territoire sans h√©siter.",
        "Cygne ü¶¢" : "Gracieux et √©l√©gant, il incarne la beaut√© dans la tranquillit√©.",
        "Chameau üê´" : "Patient et r√©sistant, il traverse les d√©serts sans jamais se fatiguer.",
        "Grizzly üêª‚Äç‚ùÑÔ∏è" : "Imposant et puissant, il est le roi des for√™ts froides.",
        "Koala üê®" : "Doux et calme, il passe sa vie √† dormir dans les arbres.",
        "Panth√®re noire üêÜ" : "Silencieuse et myst√©rieuse, elle frappe toujours quand on s'y attend le moins.",
        "Z√®bre ü¶ì" : "Unique et surprenant, il se distingue dans la foule gr√¢ce √† ses rayures.",
        "√âl√©phant üêò" : "Sage et majestueux, il marche au rythme de sa propre grandeur.",
        "Croco üêä" : "Implacable et rus√©, il attend patiemment avant de bondir.",
        "Mouflon üêè" : "Fort et tenace, il n'a pas peur de braver les montagnes.",
        "Perroquet ü¶ú" : "Color√© et bavard, il ne cesse jamais de r√©p√©ter ce qu'il entend.",
        "Rhinoc√©ros ü¶è" : "Imposant et robuste, il se fraye un chemin √† travers tout sur son passage.",
        "Bison ü¶¨" : "Solide et puissant, il traverse les prairies avec une √©nergie in√©branlable."

    }

    totem, description = random.choice(list(animaux_totem.items()))

    embed = discord.Embed(
        title=f"üåø Totem de {member.name} üåø",
        description=f"**{totem}** : {description}",
        color=discord.Color.green()
    )
    embed.set_thumbnail(url=member.avatar.url if member.avatar else None)
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)

    await ctx.send(embed=embed)
    
@bot.command()
async def futur(ctx, user: discord.Member = None):
    if not user:
        user = ctx.author  # Si pas d‚Äôutilisateur mentionn√©, prendre l‚Äôauteur

    predicions = [
        "Dans 5 minutes, tu d√©couvriras un tr√©sor cach√©‚Ä¶ mais il sera rempli de bonbons.",
        "L'ann√©e prochaine, tu feras une rencontre √©tonnante avec un extraterrestre qui adore les chats.",
        "Demain, tu auras une conversation intense avec un pigeon, et il te donnera un conseil de vie pr√©cieux.",
        "Un chat va te confier un secret qui changera le cours de ton existence‚Ä¶ mais tu ne te souviendras pas de ce secret.",
        "Dans quelques jours, tu seras √©lu meilleur joueur de cache-cache, mais tu te cacheras dans une pi√®ce vide.",
        "Lundi, tu rencontreras quelqu'un qui aime les licornes autant que toi. Vous deviendrez amis pour la vie.",
        "Dans un futur proche, tu r√©ussiras √† inventer un g√¢teau qui ne se mange pas, mais il sera √©tonnamment populaire.",
        "Bient√¥t, un myst√©rieux inconnu t'offrira un paquet cadeau. Il contiendra un √©lastique et une noix de coco.",
        "Dans un mois, tu vivras une aventure √©pique o√π tu devras r√©soudre un myst√®re impliquant des chaussettes perdues.",
        "Prochainement, tu seras r√©compens√© pour avoir trouv√© une solution r√©volutionnaire au probl√®me de la pizza froide.",
        "Dans un futur lointain, tu seras le leader d'une civilisation intergalactique. Tes sujets seront principalement des pandas."
        "Dans 5 minutes, tu rencontreras un robot qui te demandera comment faire des pancakes‚Ä¶ mais il n'a pas de mains.",
        "Ce week-end, tu seras choisi pour participer √† un concours de danse avec des flamants roses, mais tu devras danser sans musique.",
        "Demain, un magicien te proposera un v≈ìu‚Ä¶ mais il te le refusera en te montrant un tour de cartes.",
        "Un perroquet va te confier un secret tr√®s important, mais tu l'oublieras d√®s que tu entras dans une pi√®ce.",
        "Dans quelques jours, tu d√©couvriras un tr√©sor enfoui sous ta maison‚Ä¶ mais il sera compos√© uniquement de petites pierres color√©es.",
        "Prochainement, tu feras une rencontre √©trange avec un extraterrestre qui te demandera de lui apprendre √† jouer aux √©checs.",
        "Dans un futur proche, tu gagneras un prix prestigieux pour avoir cr√©√© un objet du quotidien, mais personne ne saura vraiment √† quoi il sert.",
        "Bient√¥t, tu recevras une invitation pour un d√Æner chez des cr√©atures invisibles. Le menu ? Des nuages et des rayons de lune.",
        "Dans un mois, tu seras choisi pour repr√©senter ton pays dans un concours de chant‚Ä¶ mais tu devras chanter sous l'eau.",
        "Dans un futur lointain, tu seras une l√©gende vivante, reconnu pour avoir invent√© la premi√®re machine √† fabriquer des sourires."
        "Dans 5 minutes, tu verras un nuage prendre la forme de ton visage, mais il te fera une grimace √©trange.",
        "Demain, tu seras invit√© √† une r√©union secr√®te de licornes qui discuteront des nouvelles tendances en mati√®re de paillettes.",
        "Prochainement, un dauphin te confiera un message cod√© que tu devras r√©soudre‚Ä¶ mais il sera √©crit en chantant.",
        "Un dragon viendra te rendre visite et te proposera de partager son tr√©sor‚Ä¶ mais il s‚Äôav√®re que ce tr√©sor est un stock infini de bonbons √† la menthe.",
        "Dans quelques jours, tu apprendras √† parler couramment le langage des grenouilles, mais seulement quand il pleut.",
        "Cette semaine, un voleur masqu√© viendra te voler une chaussette‚Ä¶ mais il te laissera un billet pour un concert de musique classique.",
        "Prochainement, un fant√¥me te demandera de l'aider √† retrouver ses cl√©s perdues‚Ä¶ mais tu d√©couvriras qu'il a oubli√© o√π il les a mises.",
        "Dans un futur proche, tu seras √©lu pr√©sident d'un club de fans de l√©gumes, et tu recevras une m√©daille en forme de carotte.",
        "Bient√¥t, tu d√©couvriras un raccourci secret qui te permettra de voyager dans des mondes parall√®les‚Ä¶ mais il te fera revenir √† ton point de d√©part.",
        "Dans un mois, tu recevras une lettre d'invitation √† un bal masqu√© organis√© par des robots, mais tu ne pourras pas danser car tu porteras des chaussons trop grands."

    ]

    prediction = random.choice(predicions)

    embed = discord.Embed(
        title=f"üîÆ Pr√©diction pour {user.name} üîÆ",
        description=f"**Pr√©diction :**\n\n{prediction}",
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"Le futur est incertain‚Ä¶ mais amusant ! {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)

    await ctx.send(embed=embed)

# Liste de blagues
blagues = [
    "Pourquoi les plongeurs plongent toujours en arri√®re et jamais en avant ? ||Parce que sinon ils tombent toujours dans le bateau.||",
    "Pourquoi les canards sont toujours √† l'heure ? ||Parce qu'ils sont dans les starting-quack !||",
    "Quel est le comble pour un √©lectricien ? ||De ne pas √™tre au courant.||",
    "Pourquoi les maths sont tristes ? ||Parce qu'elles ont trop de probl√®mes.||",
    "Que dit une imprimante √† une autre imprimante ? *||'T'as du papier ?'||",
    "Pourquoi les poissons d√©testent l'ordinateur ? ||Parce qu'ils ont peur du net !||",
    "Comment appelle-t-on un chat qui a perdu son GPS ? ||Un chat √©gar√©.||",
    "Pourquoi les squelettes ne se battent-ils jamais entre eux ? ||Parce qu'ils n'ont pas de c≈ìur !||",
    "Quel est le comble pour un plombier ? ||D'avoir un tuyau perc√©.||",
    "Comment appelle-t-on un chien magique ? ||Un labra-cadabra !||"
]

# Commande !blague
@bot.command()
async def blague(ctx):
    # Choisir une blague au hasard
    blague_choisie = random.choice(blagues)
    # Envoyer la blague dans le salon
    await ctx.send(blague_choisie)
#------------------------------------------------------------------------- Commandes d'√©conomie : +prison, +evasion, +arrestation, +liberation, +cautionpayer, +ticket_euro_million
# Commande +prison
@bot.command()
@commands.has_role (1355157681882664981)
async def prison(ctx, member: discord.Member = None):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    if not member:
        await ctx.send("Vous n'avez cibl√© personne.")
        return

    embed = discord.Embed(
        title="La Police Etheryenne vous arr√™te !",
        description="Te voil√† priv√© d'acc√®s de l'√©conomie !",
        color=0xffcc00
    )
    embed.set_image(url="https://i.imgur.com/dX0DSGh.jpeg")
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

    # Gestion des r√¥les
    role_remove = discord.utils.get(ctx.guild.roles, id=1355190216188497951)
    role_add = discord.utils.get(ctx.guild.roles, id=1359562052552622215)

    if role_remove:
        await member.remove_roles(role_remove)
    if role_add:
        await member.add_roles(role_add)

# Commande +arrestation
@bot.command()
@commands.has_role (1355157681882664981)
async def arrestation(ctx, member: discord.Member = None):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    if not member:
        await ctx.send("Vous n'avez cibl√© personne.")
        return

    embed = discord.Embed(
        title="Vous avez √©t√© arr√™t√© lors d'une tentative de braquage",
        description="Braquer les fourgons c'est pas bien !",
        color=0xff0000
    )
    embed.set_image(url="https://i.imgur.com/uVNxDX2.jpeg")
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

    # Gestion des r√¥les
    role_remove = discord.utils.get(ctx.guild.roles, id=1355190216188497951)
    role_add = discord.utils.get(ctx.guild.roles, id=1359562052552622215)

    if role_remove:
        await member.remove_roles(role_remove)
    if role_add:
        await member.add_roles(role_add)

# Commande +liberation
@bot.command()
@commands.has_role (1355157681882664981)
async def liberation(ctx, member: discord.Member = None):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    if not member:
        await ctx.send("Vous n'avez cibl√© personne.")
        return

    embed = discord.Embed(
        title="La Police √âtheryenne a d√©cid√© de vous laisser sortir de prison !",
        description="En revanche, si vous refaites une erreur c'est au cachot direct !",
        color=0x00ff00
    )
    embed.set_image(url="https://i.imgur.com/Xh7vqh7.jpeg")
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

    # Gestion des r√¥les
    role_add = discord.utils.get(ctx.guild.roles, id=1355190216188497951)
    role_remove = discord.utils.get(ctx.guild.roles, id=1359562052552622215)

    if role_add:
        await member.add_roles(role_add)
    if role_remove:
        await member.remove_roles(role_remove)

# Commande +evasion
@bot.command()
@commands.has_role (1357435690463531271)
async def evasion(ctx):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    member = ctx.author  # L'auteur de la commande s'√©vade

    embed = discord.Embed(
        title="Un joueur s'√©vade de prison !",
        description="Gr√¢ce √† un ticket trouv√© √† la f√™te foraine !!",
        color=0x0000ff
    )
    embed.set_image(url="https://i.imgur.com/X8Uje39.jpeg")
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

    # Gestion des r√¥les
    role_add = discord.utils.get(ctx.guild.roles, id=1355190216188497951)
    role_remove_1 = discord.utils.get(ctx.guild.roles, id=1359562052552622215)
    role_remove_2 = discord.utils.get(ctx.guild.roles, id=1357435690463531271)

    if role_add:
        await member.add_roles(role_add)
    if role_remove_1:
        await member.remove_roles(role_remove_1)
    if role_remove_2:
        await member.remove_roles(role_remove_2)

# Commande cautionpayer
@bot.command()
@commands.has_role (1355157681882664981)
async def cautionpayer(ctx, member: discord.Member = None):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    if not member:
        await ctx.send("Vous n'avez cibl√© personne.")
        return

    embed = discord.Embed(
        title="Caution pay√©e avec succ√®s !",
        description="Vous √™tes maintenant libre de retourner dans l'√©conomie.",
        color=0x00ff00
    )
    embed.set_image(url="https://github.com/Iseyg91/Etherya-Gestion/blob/main/1dnyLPXGJgsrcmMo8Bgi4.jpg?raw=true")
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

    # Gestion des r√¥les
    role_remove = discord.utils.get(ctx.guild.roles, id=1359562052552622215)
    role_remove = discord.utils.get(ctx.guild.roles, id=1357435690463531271)
    if role_remove:
        await member.remove_roles(role_remove)

# Commande ticket_euro_million
@bot.command()
async def ticket_euro_million(ctx, user: discord.Member):
    if ctx.guild.id != AUTORIZED_SERVER_ID:
        embed = discord.Embed(
            title="Commande non autoris√©e",
            description="Cette commande n'est pas disponible sur ce serveur.",
            color=0xff0000
        )
        await ctx.send(embed=embed)
        return

    # G√©n√©rer 5 chiffres entre 0 et 5
    numeros = [str(random.randint(0, 5)) for _ in range(5)]
    combinaison = " - ".join(numeros)

    embed_user = discord.Embed(
        title="üéüÔ∏è Ticket Euro Million",
        description=f"Voici votre combinaison, **{user.mention}** : **{combinaison}**\n\n"
                    f"Bonne chance ! üçÄ",
        color=discord.Color.gold()
    )
    embed_user.set_footer(text="Ticket g√©n√©r√© par " + ctx.author.name)
    embed_user.set_footer(text=f"‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)

    await ctx.send(embed=embed_user)

    embed_announce = discord.Embed(
        title="üéüÔ∏è Euro Million - R√©sultat",
        description=f"**{user.mention}** a tir√© le combin√© suivant : **{combinaison}**\n\n"
                    f"Commande ex√©cut√©e par : **{ctx.author.mention}**",
        color=discord.Color.green()
    )
    embed_announce.set_footer(text="Ticket g√©n√©r√© avec succ√®s !")
    embed_announce.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)

    salon_announce = bot.get_channel(1355234774033104997)
    if salon_announce:
        await salon_announce.send(embed=embed_announce)
    else:
        await ctx.send("Erreur : Le salon d'annonce est introuvable.")

#------------------------------------------------------------------------- Commandes de Moderation : +ban, +unban, +mute, +unmute, +kick, +warn

# üé® Fonction pour cr√©er un embed format√©
def create_embed(title, description, color, ctx, member=None, action=None, reason=None, duration=None):
    embed = discord.Embed(title=title, description=description, color=color, timestamp=ctx.message.created_at)
    embed.set_footer(text=f"Action effectu√©e par {ctx.author.name}", icon_url=ctx.author.avatar.url)
    
    if ctx.guild.icon:
        embed.set_thumbnail(url=ctx.guild.icon.url)

    if member:
        embed.add_field(name="üë§ Membre sanctionn√©", value=member.mention, inline=True)
    if action:
        embed.add_field(name="‚öñÔ∏è Sanction", value=action, inline=True)
    if reason:
        embed.add_field(name="üìú Raison", value=reason, inline=False)
    if duration:
        embed.add_field(name="‚è≥ Dur√©e", value=duration, inline=True)

    return embed

# üéØ V√©rification des permissions et hi√©rarchie
def has_permission(ctx, perm):
    return ctx.author.id == AUTHORIZED_USER_ID or getattr(ctx.author.guild_permissions, perm, False)

def is_higher_or_equal(ctx, member):
    return member.top_role >= ctx.author.top_role

# üì© Envoi d'un log
async def send_log(ctx, member, action, reason, duration=None):
    guild_id = ctx.guild.id
    settings = GUILD_SETTINGS.get(guild_id, {})
    log_channel_id = settings.get("sanctions_channel")

    if log_channel_id:
        log_channel = bot.get_channel(log_channel_id)
        if log_channel:
            embed = create_embed("üö® Sanction appliqu√©e", f"{member.mention} a √©t√© sanctionn√©.", discord.Color.red(), ctx, member, action, reason, duration)
            await log_channel.send(embed=embed)

# üì© Envoi d'un message priv√© √† l'utilisateur sanctionn√©
async def send_dm(member, action, reason, duration=None):
    try:
        embed = create_embed("üö® Vous avez re√ßu une sanction", "Consultez les d√©tails ci-dessous.", discord.Color.red(), member, member, action, reason, duration)
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un DM √† {member.display_name}.")

@bot.command()
async def ban(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre ou fournir un ID pour bannir.")

    # Si le membre fourni est une mention
    if isinstance(member, discord.Member):
        target_member = member
    else:
        # Si le membre est un ID
        target_member = get(ctx.guild.members, id=int(member))

    # Si le membre est introuvable dans le serveur
    if target_member is None:
        return await ctx.send("‚ùå Aucun membre trouv√© avec cet ID ou mention.")

    if ctx.author == target_member:
        return await ctx.send("üö´ Vous ne pouvez pas vous bannir vous-m√™me.")
    
    if is_higher_or_equal(ctx, target_member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    
    if has_permission(ctx, "ban_members"):
        await member.ban(reason=reason)
        embed = create_embed("üî® Ban", f"{member.mention} a √©t√© banni.", discord.Color.red(), ctx, member, "Ban", reason)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Ban", reason)
        await send_dm(member, "Ban", reason)

        # Enregistrement de la sanction
        add_sanction(ctx.guild.id, member.id, "Ban", reason)

@bot.command()
async def unban(ctx, user_id: int = None):
    if user_id is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez sp√©cifier l'ID d'un utilisateur √† d√©bannir.")

    if has_permission(ctx, "ban_members"):
        try:
            user = await bot.fetch_user(user_id)
            await ctx.guild.unban(user)
            embed = create_embed("üîì Unban", f"{user.mention} a √©t√© d√©banni.", discord.Color.green(), ctx, user, "Unban", "R√©int√©gration")
            await ctx.send(embed=embed)
            await send_log(ctx, user, "Unban", "R√©int√©gration")
            await send_dm(user, "Unban", "R√©int√©gration")
        except discord.NotFound:
            return await ctx.send("‚ùå Aucun utilisateur trouv√© avec cet ID.")
        except discord.Forbidden:
            return await ctx.send("‚ùå Je n'ai pas les permissions n√©cessaires pour d√©bannir cet utilisateur.")


@bot.command()
async def kick(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† expulser.")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous expulser vous-m√™me.")
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    if has_permission(ctx, "kick_members"):
        await member.kick(reason=reason)
        embed = create_embed("üë¢ Kick", f"{member.mention} a √©t√© expuls√©.", discord.Color.orange(), ctx, member, "Kick", reason)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Kick", reason)
        await send_dm(member, "Kick", reason)

@bot.command()
async def mute(ctx, member: discord.Member = None, duration_with_unit: str = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† mute.")
    
    if duration_with_unit is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez pr√©ciser une dur√©e (ex: `10m`, `1h`, `2j`).")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous mute vous-m√™me.")
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas sanctionner quelqu'un de votre niveau ou sup√©rieur.")
    if not has_permission(ctx, "moderate_members"):
        return await ctx.send("‚ùå Vous n'avez pas la permission de mute des membres.")
    
    # V√©rification si le membre est d√©j√† en timeout
    if member.timed_out:
        return await ctx.send(f"‚ùå {member.mention} est d√©j√† en timeout.")
    
    # Traitement de la dur√©e
    time_units = {"m": "minutes", "h": "heures", "j": "jours"}
    try:
        duration = int(duration_with_unit[:-1])
        unit = duration_with_unit[-1].lower()
        if unit not in time_units:
            raise ValueError
    except ValueError:
        return await ctx.send("‚ùå Format invalide ! Utilisez un nombre suivi de `m` (minutes), `h` (heures) ou `j` (jours).")

    # Calcul de la dur√©e
    time_deltas = {"m": timedelta(minutes=duration), "h": timedelta(hours=duration), "j": timedelta(days=duration)}
    duration_time = time_deltas[unit]

    try:
        # Tente de mettre le membre en timeout
        await member.timeout(duration_time, reason=reason)
        duration_str = f"{duration} {time_units[unit]}"
        
        # Embeds et r√©ponses
        embed = create_embed("‚è≥ Mute", f"{member.mention} a √©t√© mut√© pour {duration_str}.", discord.Color.blue(), ctx, member, "Mute", reason, duration_str)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Mute", reason, duration_str)
        await send_dm(member, "Mute", reason, duration_str)

        # Ajout des sanctions dans la base de donn√©es MongoDB
        sanction_data = {
            "guild_id": str(ctx.guild.id),
            "user_id": str(member.id),
            "action": "Mute",
            "reason": reason,
            "duration": duration_str,
            "timestamp": datetime.utcnow()
        }
        collection7.insert_one(sanction_data)  # collection7 est la collection de sanctions
        
    except discord.Forbidden:
        await ctx.send("‚ùå Je n'ai pas la permission de mute ce membre. V√©rifiez les permissions du bot.")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå Une erreur s'est produite lors de l'application du mute : {e}")
    except Exception as e:
        await ctx.send(f"‚ùå Une erreur inattendue s'est produite : {str(e)}")

@bot.command()
async def unmute(ctx, member: discord.Member = None):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† d√©muter.")

    if has_permission(ctx, "moderate_members"):
        await member.timeout(None)
        embed = create_embed("üîä Unmute", f"{member.mention} a √©t√© d√©mut√©.", discord.Color.green(), ctx, member, "Unmute", "Fin du mute")
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Unmute", "Fin du mute")
        await send_dm(member, "Unmute", "Fin du mute")

# Fonction de v√©rification des permissions
async def check_permissions(ctx):
    # V√©rifier si l'utilisateur a la permission "Manage Messages"
    return ctx.author.guild_permissions.manage_messages or ctx.author.id == 1166334752186433567

# Fonction pour v√©rifier si le membre est immunis√©
async def is_immune(member):
    # Exemple de logique d'immunit√© (peut √™tre ajust√©e)
    # V√©rifie si le membre a un r√¥le sp√©cifique ou une permission
    return any(role.name == "Immunit√©" for role in member.roles)

# Fonction pour envoyer un message de log
async def send_log(ctx, member, action, reason):
    log_channel = discord.utils.get(ctx.guild.text_channels, name="logs")  # Remplacer par le salon de log appropri√©
    if log_channel:
        embed = discord.Embed(
            title="Avertissement",
            description=f"**Membre :** {member.mention}\n**Action :** {action}\n**Raison :** {reason}",
            color=discord.Color.orange()
        )
        embed.set_footer(text=f"Avertissement donn√© par {ctx.author}", icon_url=ctx.author.avatar.url)
        await log_channel.send(embed=embed)

# Fonction pour envoyer un message en DM au membre
async def send_dm(member, action, reason):
    try:
        embed = discord.Embed(
            title="‚ö†Ô∏è Avertissement",
            description=f"**Action :** {action}\n**Raison :** {reason}",
            color=discord.Color.red()
        )
        embed.set_footer(text="N'oublie pas de respecter les r√®gles !")
        await member.send(embed=embed)
    except discord.Forbidden:
        print(f"Impossible d'envoyer un message priv√© √† {member.name}")

@bot.command()
async def warn(ctx, member: discord.Member = None, *, reason="Aucune raison sp√©cifi√©e"):
    if member is None:
        return await ctx.send("‚ùå Il manque un argument : vous devez mentionner un membre √† avertir.")

    if ctx.author == member:
        return await ctx.send("üö´ Vous ne pouvez pas vous avertir vous-m√™me.")
    
    if is_higher_or_equal(ctx, member):
        return await ctx.send("üö´ Vous ne pouvez pas avertir quelqu'un de votre niveau ou sup√©rieur.")
    
    if not has_permission(ctx, "moderate_members"):
        return await ctx.send("‚ùå Vous n'avez pas la permission de donner des avertissements.")
    
    try:
        # Ajout du warning √† la base de donn√©es
        sanction_data = {
            "guild_id": str(ctx.guild.id),
            "user_id": str(member.id),
            "action": "Warn",
            "reason": reason,
            "timestamp": datetime.utcnow()
        }

        # Tentative d'insertion dans MongoDB
        collection7.insert_one(sanction_data)
        print(f"Sanction ajout√©e √† la base de donn√©es pour {member.mention}")

        # Embeds et r√©ponses
        embed = create_embed("‚ö†Ô∏è Avertissement donn√©", f"{member.mention} a re√ßu un avertissement pour la raison suivante :\n{reason}", discord.Color.orange(), ctx, member, "Avertissement", reason)
        await ctx.send(embed=embed)
        await send_log(ctx, member, "Warn", reason)
        await send_dm(member, "Avertissement", reason)

    except Exception as e:
        # Log de l'erreur dans la console pour faciliter le d√©bogage
        print(f"Erreur lors de l'ex√©cution de la commande warn : {e}")
        await ctx.send(f"‚ùå Une erreur s'est produite lors de l'ex√©cution de la commande. D√©tails : {str(e)}")

@bot.command()
async def warnlist(ctx, member: discord.Member = None):
    if member is None:
        return await ctx.send("‚ùå Vous devez mentionner un membre pour consulter ses sanctions.")

    sanctions = collection7.find({"guild_id": ctx.guild.id, "user_id": str(member.id)})
    if sanctions.count() == 0:
        return await ctx.send(f"‚ùå Aucune sanction trouv√©e pour {member.mention}.")

    sanctions_list = []
    for sanction in sanctions:
        sanction_info = f"**Action :** {sanction['action']}\n**Raison :** {sanction['reason']}\n**Dur√©e :** {sanction['duration']}\n**Date :** {sanction['timestamp']}"
        sanctions_list.append(sanction_info)

    # Envoi des sanctions sous forme de message
    sanctions_message = "\n\n".join(sanctions_list)
    await ctx.send(f"Sanctions de {member.mention} :\n\n{sanctions_message}")

#------------------------------------------------------------------------- Commandes Utilitaires : +vc, +alerte, +uptime, +ping, +roleinfo

# Nouvelle fonction pour r√©cup√©rer le ping role et le channel id dynamiquement depuis la base de donn√©es
def get_guild_setup_data(guild_id):
    setup_data = load_guild_settings(guild_id)
    ping_role_id = setup_data.get('staff_role_id')  # Assure-toi que le champ existe dans ta base de donn√©es
    channel_id = setup_data.get('sanctions_channel_id')  # Pareil pour le channel ID
    return ping_role_id, channel_id

@bot.command()
async def alerte(ctx, member: discord.Member, *, reason: str):
    # V√©rification si l'utilisateur a le r√¥le n√©cessaire pour ex√©cuter la commande
    if access_role_id not in [role.id for role in ctx.author.roles]:
        await ctx.send("Vous n'avez pas les permissions n√©cessaires pour utiliser cette commande.")
        return

    # R√©cup√©ration des valeurs dynamiques
    ping_role_id, channel_id = get_guild_setup_data(ctx.guild.id)

    # Obtention du salon o√π envoyer le message
    channel = bot.get_channel(channel_id)

    # Mentionner le r√¥le et l'utilisateur qui a ex√©cut√© la commande dans le message
    await channel.send(f"<@&{ping_role_id}>\nüì¢ Alerte √©mise par {ctx.author.mention}: {member.mention} - Raison : {reason}")

    # Cr√©ation de l'embed
    embed = discord.Embed(
        title="Alerte √âmise",
        description=f"**Utilisateur:** {member.mention}\n**Raison:** {reason}",
        color=0xff0000  # Couleur rouge
    )
    embed.set_footer(text=f"Command√© par {ctx.author.name} |‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    # Envoi de l'embed dans le m√™me salon
    await channel.send(embed=embed)

sent_embed_channels = {}

@bot.command()
async def vc(ctx):
    print("Commande 'vc' appel√©e.")

    try:
        guild = ctx.guild
        print(f"Guild r√©cup√©r√©e: {guild.name} (ID: {guild.id})")

        total_members = guild.member_count
        online_members = sum(1 for member in guild.members if member.status != discord.Status.offline)
        voice_members = sum(len(voice_channel.members) for voice_channel in guild.voice_channels)
        boosts = guild.premium_subscription_count or 0
        owner_member = guild.owner
        server_invite = "https://discord.gg/X4dZAt3BME"
        verification_level = guild.verification_level.name
        text_channels = len(guild.text_channels)
        voice_channels = len(guild.voice_channels)
        server_created_at = guild.created_at.strftime('%d %B %Y')

        embed = discord.Embed(title=f"üìä Statistiques de {guild.name}", color=discord.Color.purple())

        if guild.icon:
            embed.set_thumbnail(url=guild.icon.url)

        embed.add_field(name="üë• Membres", value=f"**{total_members}**", inline=True)
        embed.add_field(name="üü¢ Membres en ligne", value=f"**{online_members}**", inline=True)
        embed.add_field(name="üéôÔ∏è En vocal", value=f"**{voice_members}**", inline=True)
        embed.add_field(name="üíé Boosts", value=f"**{boosts}**", inline=True)

        embed.add_field(name="üëë Propri√©taire", value=f"<@{owner_member.id}>", inline=True)
        embed.add_field(name="üîí Niveau de v√©rification", value=f"**{verification_level}**", inline=True)
        embed.add_field(name="üìù Canaux textuels", value=f"**{text_channels}**", inline=True)
        embed.add_field(name="üîä Canaux vocaux", value=f"**{voice_channels}**", inline=True)
        embed.add_field(name="üìÖ Cr√©√© le", value=f"**{server_created_at}**", inline=False)
        embed.add_field(name="üîó Lien du serveur", value=f"[{guild.name}]({server_invite})", inline=False)

        embed.set_footer(text="üìà Statistiques mises √† jour en temps r√©el | ‚ô•Ô∏è by Iseyg")

        await ctx.send(embed=embed)
        print("Embed envoy√© avec succ√®s.")

    except Exception as e:
        print(f"Erreur lors de l'ex√©cution de la commande 'vc': {e}")
        await ctx.send("Une erreur est survenue lors de l'ex√©cution de la commande.")
        return  # Emp√™che l'ex√©cution du reste du code apr√®s une erreur


@bot.command()
async def ping(ctx):
    latency = round(bot.latency * 1000)  # Latence en ms
    embed = discord.Embed(title="Pong!", description=f"Latence: {latency}ms", color=discord.Color.green())

    await ctx.send(embed=embed)

@bot.tree.command(name="info-r√¥le", description="Obtenez des informations d√©taill√©es sur un r√¥le")
async def roleinfo(interaction: discord.Interaction, role: discord.Role):
    # V√©rifier si le r√¥le existe
    if role is None:
        embed = discord.Embed(title="Erreur", description="R√¥le introuvable.", color=discord.Color.red())
        await interaction.response.send_message(embed=embed)
        return
    else:
        # Obtenir tous les r√¥les tri√©s du plus haut au plus bas
        sorted_roles = sorted(interaction.guild.roles, key=lambda r: r.position, reverse=True)
        total_roles = len(sorted_roles)
        
        # Trouver la position invers√©e du r√¥le
        inverse_position = total_roles - sorted_roles.index(role)

        embed = discord.Embed(
            title=f"Informations sur le r√¥le: {role.name}",
            color=role.color,
            timestamp=interaction.created_at
        )
        
        embed.set_thumbnail(url=interaction.guild.icon.url)
        embed.add_field(name="ID", value=role.id, inline=False)
        embed.add_field(name="Couleur", value=str(role.color), inline=False)
        embed.add_field(name="Nombre de membres", value=len(role.members), inline=False)
        embed.add_field(name="Position dans la hi√©rarchie", value=f"{inverse_position}/{total_roles}", inline=False)
        embed.add_field(name="Mentionnable", value=role.mentionable, inline=False)
        embed.add_field(name="G√©rer les permissions", value=role.managed, inline=False)
        embed.add_field(name="Cr√©√© le", value=role.created_at.strftime("%d/%m/%Y √† %H:%M:%S"), inline=False)
        embed.add_field(name="Mention", value=role.mention, inline=False)

        embed.set_footer(text=f"Commande demand√©e par {interaction.user.name}", icon_url=interaction.user.avatar.url)

        await interaction.response.send_message(embed=embed)

@bot.command()
async def uptime(ctx):
    uptime_seconds = round(time.time() - start_time)
    days = uptime_seconds // (24 * 3600)
    hours = (uptime_seconds % (24 * 3600)) // 3600
    minutes = (uptime_seconds % 3600) // 60
    seconds = uptime_seconds % 60
    embed = discord.Embed(
        title="Uptime du bot",
        description=f"Le bot est en ligne depuis : {days} jours, {hours} heures, {minutes} minutes, {seconds} secondes",
        color=discord.Color.blue()
    )
    embed.set_footer(text=f"‚ô•Ô∏èby Iseyg", icon_url=ctx.author.avatar.url)
    await ctx.send(embed=embed)

PRIME_IMAGE_URL = "https://cdn.gamma.app/m6u5udkwwfl3cxy/generated-images/MUnIIu5yOv6nMFAXKteig.jpg"

class DuelView(discord.ui.View):
    def __init__(self, player1, player2, prize, ctx):
        super().__init__(timeout=120)  # Augmenter le timeout √† 120 secondes
        self.player1 = player1
        self.player2 = player2
        self.hp1 = 100
        self.hp2 = 100
        self.turn = player1
        self.prize = prize
        self.ctx = ctx
        self.winner = None

    async def update_message(self, interaction):
        embed = discord.Embed(title="‚öîÔ∏è Duel en cours !", color=discord.Color.red())
        embed.add_field(name=f"{self.player1.display_name}", value=f"‚ù§Ô∏è {self.hp1} PV", inline=True)
        embed.add_field(name=f"{self.player2.display_name}", value=f"‚ù§Ô∏è {self.hp2} PV", inline=True)
        embed.set_footer(text=f"Tour de {self.turn.display_name}")
        await interaction.message.edit(embed=embed, view=self)

    @discord.ui.button(label="Attaquer", style=discord.ButtonStyle.red)
    async def attack(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.turn:
            await interaction.response.send_message("Ce n'est pas ton tour !", ephemeral=True)
            return

        success_chance = random.random()
        if success_chance > 0.2:  # 80% chance de succ√®s
            damage = random.randint(15, 50)
            if self.turn == self.player1:
                self.hp2 -= damage
                self.turn = self.player2
            else:
                self.hp1 -= damage
                self.turn = self.player1
        else:
            await interaction.response.send_message(f"{interaction.user.mention} rate son attaque !", ephemeral=False)
            self.turn = self.player2 if self.turn == self.player1 else self.player1

        await self.check_winner(interaction)

    @discord.ui.button(label="Esquiver", style=discord.ButtonStyle.blurple)
    async def dodge(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.turn:
            await interaction.response.send_message("Ce n'est pas ton tour !", ephemeral=True)
            return

        success = random.random() < 0.5
        if success:
            await interaction.response.send_message(f"{interaction.user.mention} esquive l'attaque avec succ√®s !", ephemeral=False)
        else:
            damage = random.randint(15, 30)
            if self.turn == self.player1:
                self.hp1 -= damage
            else:
                self.hp2 -= damage

        await self.check_winner(interaction)
        await self.update_message(interaction)

    async def check_winner(self, interaction):
        if self.hp1 <= 0:
            self.winner = self.player2
            await self.end_duel(interaction, self.player2, self.player1)
        elif self.hp2 <= 0:
            self.winner = self.player1
            await self.end_duel(interaction, self.player1, self.player2)
        else:
            await self.update_message(interaction)

async def end_duel(self, interaction, winner, loser):
    embed = discord.Embed(title="üèÜ Victoire !", description=f"{winner.mention} remporte le duel !", color=discord.Color.green())
    await interaction.response.edit_message(embed=embed, view=None)
    channel = self.ctx.guild.get_channel(BOUNTY_CHANNEL_ID)
    if channel:
        await channel.send(embed=embed)

    # V√©rifier si le perdant avait une prime
    bounty_data = collection3.find_one({"guild_id": str(self.ctx.guild.id), "user_id": str(loser.id)})  # Utilisation de collection3
    if bounty_data:
        prize = bounty_data["prize"]
        if winner.id != loser.id:  # Seulement si le gagnant n'√©tait PAS celui avec la prime
            # Ajouter la prime au chasseur
            collection3.update_one(  # Utilisation de collection3
                {"guild_id": str(self.ctx.guild.id), "user_id": str(winner.id)},
                {"$inc": {"reward": prize}}  # Ajouter la prime √† la r√©compense du gagnant
            )

        # Supprimer la prime du joueur captur√©
        collection3.update_one(  # Utilisation de collection3
            {"guild_id": str(self.ctx.guild.id), "user_id": str(loser.id)},
            {"$unset": {"prize": ""}}  # Enlever la prime du joueur captur√©
        )

        # Supprimer la prime du joueur captur√© (cette ligne ne doit pas √™tre indent√©e davantage)
        del bounties[loser.id]

@bot.command()
async def bounty(ctx, member: discord.Member, prize: int):
    """Met une prime sur un joueur (r√©serv√© aux administrateurs)"""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("Tu n'as pas la permission d'ex√©cuter cette commande.")
        return

    try:
        # Mise √† jour de la prime dans la base de donn√©es
        bounty_data = {
            "guild_id": str(ctx.guild.id),
            "user_id": str(member.id),
            "prize": prize,
            "reward": 0  # Initialiser les r√©compenses √† 0
        }

        # Ins√©rer ou mettre √† jour la prime
        collection3.update_one(
            {"guild_id": str(ctx.guild.id), "user_id": str(member.id)},
            {"$set": bounty_data},
            upsert=True  # Cr√©er un nouveau document si l'utilisateur n'a pas de prime
        )

        embed = discord.Embed(title="üìú Nouvelle Prime !", description=f"Une prime de {prize} Ezryn Coins a √©t√© plac√©e sur {member.mention} !", color=discord.Color.gold())
        embed.set_image(url=PRIME_IMAGE_URL)
        await ctx.send(embed=embed)
    except Exception as e:
        await ctx.send(f"Erreur lors de la mise √† jour de la prime : {e}")


# Remplacer l'utilisation de bounties par la r√©cup√©ration depuis la base de donn√©es.
@bot.command()
async def capture(ctx, target: discord.Member):
    """D√©clenche un duel pour capturer un joueur avec une prime"""
    # R√©cup√©rer la prime directement depuis la base de donn√©es
    bounty_data = collection3.find_one({"guild_id": str(ctx.guild.id), "user_id": str(target.id)})
    if not bounty_data:
        await ctx.send("Ce joueur n'a pas de prime sur sa t√™te !")
        return

    prize = bounty_data["prize"]
    view = DuelView(ctx.author, target, prize, ctx)
    embed = discord.Embed(title="üéØ Chasse en cours !", description=f"{ctx.author.mention} tente de capturer {target.mention} ! Un duel commence !", color=discord.Color.orange())
    await ctx.send(embed=embed, view=view)


@bot.command()
async def ptop(ctx):
    """Affiche le classement des primes en ordre d√©croissant"""
    # R√©cup√©rer toutes les primes depuis la base de donn√©es
    bounties_data = collection3.find({"guild_id": str(ctx.guild.id)})
    if not bounties_data:
        await ctx.send("üìâ Il n'y a actuellement aucune prime en cours.")
        return

    sorted_bounties = sorted(bounties_data, key=lambda x: x['prize'], reverse=True)
    embed = discord.Embed(title="üèÜ Classement des Primes", color=discord.Color.gold())

    for index, bounty in enumerate(sorted_bounties, start=1):
        member = ctx.guild.get_member(int(bounty['user_id']))
        if member:
            embed.add_field(name=f"#{index} - {member.display_name}", value=f"üí∞ **{bounty['prize']} Ezryn Coins**", inline=False)

    embed.set_thumbnail(url=PRIME_IMAGE_URL)
    await ctx.send(embed=embed)

@bot.command()
async def prime(ctx, member: discord.Member = None):
    """Affiche la prime du joueur ou de l'utilisateur"""
    member = member or ctx.author  # Par d√©faut, on affiche la prime du commanditaire

    # R√©cup√©rer les donn√©es de la base de donn√©es
    bounty_data = collection3.find_one({"guild_id": str(ctx.guild.id), "user_id": str(member.id)})

    if not bounty_data:
        embed = discord.Embed(title="üìâ Aucune prime !", description=f"Aucune prime n'est actuellement plac√©e sur **{member.mention}**.", color=discord.Color.red())
        embed.set_thumbnail(url=member.avatar.url)
        await ctx.send(embed=embed)
    else:
        prize = bounty_data["prize"]
        embed = discord.Embed(title="üí∞ Prime actuelle", description=f"La prime sur **{member.mention}** est de **{prize} Ezryn Coins**.", color=discord.Color.green())
        embed.set_thumbnail(url=member.avatar.url)
        await ctx.send(embed=embed)


@bot.command()
async def rewards(ctx, member: discord.Member = None):
    """Affiche les r√©compenses accumul√©es par un joueur ou par soi-m√™me"""
    member = member or ctx.author  # Si aucun membre n'est sp√©cifi√©, on affiche pour l'auteur

    # R√©cup√©rer les r√©compenses du joueur depuis la base de donn√©es
    bounty_data = collection3.find_one({"guild_id": str(ctx.guild.id), "user_id": str(member.id)})

    if bounty_data:
        reward = bounty_data.get("reward", 0)
    else:
        reward = 0

    embed = discord.Embed(
        title="üèÖ R√©compenses de chasse",
        description=f"üí∞ **{member.mention}** poss√®de **{reward} Ezryn Coins** en r√©compenses.",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=member.avatar.url)
    await ctx.send(embed=embed)


@bot.command()
async def rrewards(ctx, target: discord.Member, amount: int):
    """Commande r√©serv√©e aux admins pour retirer des r√©compenses √† un joueur"""
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("üö´ Tu n'as pas la permission d'utiliser cette commande.")
        return

    if target.id not in hunter_rewards or hunter_rewards[target.id] < amount:
        await ctx.send(f"‚ùå **{target.mention}** n'a pas assez de r√©compenses.")
        return

    hunter_rewards[target.id] -= amount
    embed = discord.Embed(
        title="‚ö†Ô∏è R√©compenses modifi√©es",
        description=f"üîª **{amount}** Ezryn Coins retir√©s √† **{target.mention}**.\nüí∞ Nouveau solde : **{hunter_rewards[target.id]}**.",
        color=discord.Color.orange()
    )
    embed.set_thumbnail(url=target.avatar.url)
    await ctx.send(embed=embed)


@bot.tree.command(name="calcul", description="Effectue une op√©ration math√©matique")
@app_commands.describe(nombre1="Le premier nombre", operation="L'op√©ration √† effectuer (+, -, *, /)", nombre2="Le deuxi√®me nombre")
async def calcul(interaction: discord.Interaction, nombre1: float, operation: str, nombre2: float):
    await interaction.response.defer()  # ‚úÖ Correctement plac√© √† l'int√©rieur de la fonction

    if operation == "+":
        resultat = nombre1 + nombre2
    elif operation == "-":
        resultat = nombre1 - nombre2
    elif operation == "*":
        resultat = nombre1 * nombre2
    elif operation == "/":
        if nombre2 != 0:
            resultat = nombre1 / nombre2
        else:
            await interaction.followup.send("‚ùå Erreur : Division par z√©ro impossible.")
            return
    else:
        await interaction.followup.send("‚ùå Op√©ration invalide. Utilisez '+', '-', '*', ou '/'.")
        return

    embed = discord.Embed(
        title="üìä R√©sultat du calcul",
        description=f"{nombre1} {operation} {nombre2} = **{resultat}**",
        color=discord.Color.green()
    )

    await interaction.followup.send(embed=embed)

@bot.tree.command(name="calcul_pourcentage", description="Calcule un pourcentage d'un nombre")
@app_commands.describe(nombre="Le nombre de base", pourcentage="Le pourcentage √† appliquer (ex: 15 pour 15%)")
async def calcul(interaction: discord.Interaction, nombre: float, pourcentage: float):
    await interaction.response.defer()  # ‚úÖ Correctement plac√© √† l'int√©rieur de la fonction

    resultat = (nombre * pourcentage) / 100
    embed = discord.Embed(
        title="üìä Calcul de pourcentage",
        description=f"{pourcentage}% de {nombre} = **{resultat}**",
        color=discord.Color.green()
    )

    await interaction.followup.send(embed=embed)

# Installer PyNaCl 
try:
    import nacl
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "PyNaCl"])

#------------------------------------------------------------------------- Commande Voice : /connect, /disconnect
# Commande /connect
@bot.tree.command(name="connect", description="Connecte le bot √† un salon vocal sp√©cifi√©.")
@app_commands.describe(channel="Choisissez un salon vocal o√π connecter le bot")
@commands.has_permissions(administrator=True)
async def connect(interaction: discord.Interaction, channel: discord.VoiceChannel):
    try:
        if not interaction.guild.voice_client:
            await channel.connect()
            embed = discord.Embed(
                title="‚úÖ Connexion r√©ussie !",
                description=f"Le bot a rejoint **{channel.name}**.",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)
        else:
            embed = discord.Embed(
                title="‚ö†Ô∏è D√©j√† connect√©",
                description="Le bot est d√©j√† dans un salon vocal.",
                color=discord.Color.orange()
            )
            await interaction.response.send_message(embed=embed)
    except Exception as e:
        embed = discord.Embed(
            title="‚ùå Erreur",
            description=f"Une erreur est survenue : `{e}`",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)

# Commande /disconnect
@bot.tree.command(name="disconnect", description="D√©connecte le bot du salon vocal.")
@commands.has_permissions(administrator=True)
async def disconnect(interaction: discord.Interaction):
    if interaction.guild.voice_client:
        await interaction.guild.voice_client.disconnect()
        embed = discord.Embed(
            title="üö´ D√©connexion r√©ussie",
            description="Le bot a quitt√© le salon vocal.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ö†Ô∏è Pas connect√©",
            description="Le bot n'est dans aucun salon vocal.",
            color=discord.Color.orange()
        )
        await interaction.response.send_message(embed=embed)
#------------------------------------------------------------------------------------------

# Commande pour ajouter une id√©e (sans restriction d'administrateur)
@bot.tree.command(name="id√©e", description="Rajoute une id√©e dans la liste")
async def ajouter_idee(interaction: discord.Interaction, idee: str):
    user_id = interaction.user.id  # Utilisation de interaction.user.id pour obtenir l'ID utilisateur
    
    # V√©rifier si l'utilisateur a d√©j√† des id√©es dans la base de donn√©es
    idees_data = collection8.find_one({"user_id": str(user_id)})
    
    if idees_data:
        # Si des id√©es existent d√©j√†, on ajoute l'id√©e √† la liste existante
        collection8.update_one(
            {"user_id": str(user_id)},
            {"$push": {"idees": idee}}  # Ajoute l'id√©e √† la liste des id√©es existantes
        )
    else:
        # Si l'utilisateur n'a pas encore d'id√©es, on cr√©e un nouveau document avec cette id√©e
        collection8.insert_one({
            "user_id": str(user_id),
            "idees": [idee]  # Cr√©e une nouvelle liste d'id√©es avec l'id√©e ajout√©e
        })
    
    embed = discord.Embed(title="Id√©e ajout√©e !", description=f"**{idee}** a √©t√© enregistr√©e.", color=discord.Color.green())
    await interaction.response.send_message(embed=embed)


# Commande pour lister les id√©es
@bot.command(name="listi")
async def liste_idees(ctx):
    user_id = ctx.author.id
    
    # Chercher les id√©es de l'utilisateur dans la base de donn√©es
    idees_data = collection8.find_one({"user_id": str(user_id)})
    
    if not idees_data or not idees_data.get("idees"):
        embed = discord.Embed(title="Aucune id√©e enregistr√©e", description="Ajoute-en une avec /id√©es !", color=discord.Color.red())
    else:
        embed = discord.Embed(title="Tes id√©es", color=discord.Color.blue())
        for idx, idee in enumerate(idees_data["idees"], start=1):
            embed.add_field(name=f"Id√©e {idx}", value=idee, inline=False)
    
    await ctx.send(embed=embed)


# Commande pour supprimer une id√©e
@bot.tree.command(name="remove_idee", description="Supprime une de tes id√©es enregistr√©es")
async def remove_idee(interaction: discord.Interaction):
    user_id = interaction.user.id  # Utilisation de interaction.user.id pour obtenir l'ID utilisateur
    
    # Chercher les id√©es de l'utilisateur dans la base de donn√©es
    idees_data = collection8.find_one({"user_id": str(user_id)})
    
    if not idees_data or not idees_data.get("idees"):
        embed = discord.Embed(title="Aucune id√©e enregistr√©e", description="Ajoute-en une avec /id√©es !", color=discord.Color.red())
        await interaction.response.send_message(embed=embed)
        return

    idees = idees_data["idees"]

    # Cr√©er un menu d√©roulant pour permettre √† l'utilisateur de choisir une id√©e √† supprimer
    options = [discord.SelectOption(label=f"Id√©e {idx+1}: {idee}", value=str(idx)) for idx, idee in enumerate(idees)]
    
    select = Select(placeholder="Choisis une id√©e √† supprimer", options=options)
    
    # D√©finir l'interaction pour supprimer l'id√©e
    async def select_callback(interaction: discord.Interaction):
        selected_idee_index = int(select.values[0])
        idee_a_supprimer = idees[selected_idee_index]
        
        # Supprimer l'id√©e s√©lectionn√©e de la base de donn√©es
        collection8.update_one(
            {"user_id": str(user_id)},
            {"$pull": {"idees": idee_a_supprimer}}  # Supprime l'id√©e de la liste
        )
        
        embed = discord.Embed(
            title="Id√©e supprim√©e !",
            description=f"L'id√©e **{idee_a_supprimer}** a √©t√© supprim√©e.",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed)

    select.callback = select_callback

    view = View()
    view.add_item(select)
    
    embed = discord.Embed(
        title="Choisis l'id√©e √† supprimer",
        description="S√©lectionne une id√©e √† supprimer dans le menu d√©roulant.",
        color=discord.Color.orange()
    )
    
    await interaction.response.send_message(embed=embed, view=view)

#--------------------------------------------------------------------------------------------
# Stockage des suggestions
suggestions = []

# Dictionnaire pour g√©rer le cooldown des utilisateurs
user_cooldown = {}

class SuggestionModal(discord.ui.Modal, title="üí° Nouvelle Suggestion"):
    def __init__(self):
        super().__init__()

        self.add_item(discord.ui.TextInput(
            label="üí¨ Votre suggestion",
            style=discord.TextStyle.long,
            placeholder="D√©crivez votre suggestion ici...",
            required=True,
            max_length=500
        ))

        self.add_item(discord.ui.TextInput(
            label="üéØ Cela concerne Etherya ou le Bot ?",
            style=discord.TextStyle.short,
            placeholder="Tapez 'Etherya' ou 'Bot'",
            required=True
        ))

        self.add_item(discord.ui.TextInput(
            label="‚ùî Pourquoi cette suggestion ?",
            style=discord.TextStyle.paragraph,
            placeholder="Expliquez pourquoi cette id√©e est utile...",
            required=False
        ))

    async def on_submit(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        # Anti-spam: v√©rifier cooldown
        if user_id in user_cooldown and time.time() - user_cooldown[user_id] < 60:
            return await interaction.response.send_message(
                "‚ùå Tu dois attendre avant de soumettre une nouvelle suggestion. Patiente un peu !", ephemeral=True
            )

        user_cooldown[user_id] = time.time()  # Enregistrer le temps du dernier envoi

        suggestion = self.children[0].value.strip()  # Texte de la suggestion
        choice = self.children[1].value.strip().lower()  # Sujet (etherya ou bot)
        reason = self.children[2].value.strip() if self.children[2].value else "Non pr√©cis√©"

        # V√©rification du choix
        if choice in ["etherya", "eth", "e"]:
            choice = "Etherya"
            color = discord.Color.gold()
        elif choice in ["bot", "b"]:
            choice = "Le Bot"
            color = discord.Color.blue()
        else:
            return await interaction.response.send_message(
                "‚ùå Merci de sp√©cifier un sujet valide : 'Etherya' ou 'Bot'.", ephemeral=True
            )

        channel = interaction.client.get_channel(SUGGESTION_CHANNEL_ID)
        if not channel:
            return await interaction.response.send_message("‚ùå Je n'ai pas pu trouver le salon des suggestions.", ephemeral=True)

        new_user_mention = f"<@&{SUGGESTION_ROLE}>"

        # Envoie un message de notification √† l'utilisateur sp√©cifique
        await channel.send(f"{new_user_mention} üîî **Nouvelle suggestion concernant {choice} !**")

        # Cr√©ation de l'embed
        embed = discord.Embed(
            title="üí° Nouvelle Suggestion !",
            description=f"üìù **Propos√©e par** {interaction.user.mention}\n\n>>> {suggestion}",
            color=color,
            timestamp=discord.utils.utcnow()
        )

        embed.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/3039/3039569.png")  # Ic√¥ne id√©e
        embed.add_field(name="üìå Sujet", value=f"**{choice}**", inline=True)
        embed.add_field(name="‚ùî Pourquoi ?", value=reason, inline=False)
        embed.set_footer(
            text=f"Envoy√©e par {interaction.user.display_name}",
            icon_url=interaction.user.avatar.url if interaction.user.avatar else None
        )

        # Envoi de l'embed
        message = await channel.send(embed=embed)

        # Ajouter les r√©actions
        await message.add_reaction("‚ù§Ô∏è")  # Aimer l'id√©e
        await message.add_reaction("üîÑ")  # Id√©e √† am√©liorer
        await message.add_reaction("‚úÖ")  # Pour
        await message.add_reaction("‚ùå")  # Contre

        # Sauvegarde de la suggestion pour afficher avec la commande /suggestions
        suggestions.append({
            "message_id": message.id,
            "author": interaction.user,
            "suggestion": suggestion,
            "timestamp": time.time()
        })

        # Confirme l'envoi avec un message sympathique
        await interaction.response.send_message(
            f"‚úÖ **Ta suggestion a √©t√© envoy√©e avec succ√®s !**\nNous attendons les votes des autres membres... üïí",
            ephemeral=True
        )

        # Envoi d'un message priv√© √† l'auteur
        try:
            dm_embed = discord.Embed(
                title="üì© Suggestion envoy√©e !",
                description=f"Merci pour ta suggestion ! Voici les d√©tails :\n\n**üîπ Sujet** : {choice}\n**üí° Suggestion** : {suggestion}",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            dm_embed.set_footer(text="Nous te remercions pour ton aide et tes id√©es ! üôå")
            await interaction.user.send(embed=dm_embed)
        except discord.Forbidden:
            print(f"[ERREUR] Impossible d'envoyer un MP √† {interaction.user.display_name}.")
            # Avertir l'utilisateur dans le salon de suggestions si DM est bloqu√©
            await channel.send(f"‚ùó **{interaction.user.display_name}**, il semble que je ne puisse pas t'envoyer un message priv√©. V√©rifie tes param√®tres de confidentialit√© pour autoriser les MPs.")
            
@bot.tree.command(name="suggestion", description="üí° Envoie une suggestion pour Etherya ou le Bot")
async def suggest(interaction: discord.Interaction):
    """Commande pour envoyer une suggestion"""
    await interaction.response.send_modal(SuggestionModal())

# Commande pour afficher les derni√®res suggestions
@bot.tree.command(name="suggestions", description="üì¢ Affiche les derni√®res suggestions")
async def suggestions_command(interaction: discord.Interaction):
    """Commande pour afficher les derni√®res suggestions"""
    if not suggestions:
        return await interaction.response.send_message("‚ùå Aucune suggestion en cours. Sois le premier √† proposer une id√©e !", ephemeral=True)

    # R√©cup√©rer les 5 derni√®res suggestions
    recent_suggestions = suggestions[-5:]

    embeds = []
    for suggestion_data in recent_suggestions:
        embed = discord.Embed(
            title="üí° Suggestion",
            description=f"üìù **Propos√©e par** {suggestion_data['author'].mention}\n\n>>> {suggestion_data['suggestion']}",
            color=discord.Color.green(),
            timestamp=discord.utils.utcnow()
        )
        embed.set_footer(text=f"Envoy√©e le {discord.utils.format_dt(discord.utils.snowflake_time(suggestion_data['message_id']), 'F')}")
        embeds.append(embed)

    # Envoi des embeds
    await interaction.response.send_message(embeds=embeds)
#-------------------------------------------------------------------------------- Sondage: /sondage

# Stockage des sondages
polls = []

# Dictionnaire pour g√©rer le cooldown des utilisateurs
user_cooldown = {}

class PollModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="üìä Nouveau Sondage")

        self.add_item(discord.ui.TextInput(
            label="‚ùì Question du sondage",
            style=discord.TextStyle.long,
            placeholder="Tapez la question du sondage ici...",
            required=True,
            max_length=500
        ))

        self.add_item(discord.ui.TextInput(
            label="üó≥Ô∏è Options du sondage (s√©par√©es par des virgules)",
            style=discord.TextStyle.short,
            placeholder="Option 1, Option 2, Option 3...",
            required=True
        ))

    async def on_submit(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        # Anti-spam: v√©rifier cooldown
        if user_id in user_cooldown and time.time() - user_cooldown[user_id] < 60:
            return await interaction.response.send_message(
                "‚ùå Tu dois attendre avant de soumettre un nouveau sondage. Patiente un peu !", ephemeral=True
            )

        user_cooldown[user_id] = time.time()  # Enregistrer le temps du dernier envoi

        question = self.children[0].value.strip()  # Question du sondage
        options = [opt.strip() for opt in self.children[1].value.split(",")]  # Options du sondage

        if len(options) < 2:
            return await interaction.response.send_message(
                "‚ùå Tu dois fournir au moins deux options pour le sondage.", ephemeral=True
            )

        # V√©rification du salon des sondages
        channel = interaction.client.get_channel(SONDAGE_CHANNEL_ID)
        if not channel:
            return await interaction.response.send_message("‚ùå Je n'ai pas pu trouver le salon des sondages.", ephemeral=True)

        new_user_mention = f"<@&{SONDAGE_ID}>"

        # Envoie un message de notification √† l'utilisateur sp√©cifique
        await channel.send(f"{new_user_mention} üîî **Nouveau sondage √† r√©pondre !**")

        # Cr√©ation de l'embed pour le sondage
        avatar_url = interaction.user.avatar.url if interaction.user.avatar else interaction.user.default_avatar.url

        embed = discord.Embed(
            title="üìä Nouveau Sondage !",
            description=f"üìù **Propos√© par** {interaction.user.mention}\n\n>>> {question}",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )

        embed.set_thumbnail(url="https://cdn-icons-png.flaticon.com/512/3001/3001265.png")  # Ic√¥ne sondage
        embed.add_field(name="üîò Options", value="\n".join([f"{idx + 1}. {option}" for idx, option in enumerate(options)]), inline=False)
        embed.set_footer(text=f"Envoy√© par {interaction.user.display_name}", icon_url=avatar_url)

        # Envoi de l'embed
        message = await channel.send(embed=embed)

        # Ajout des r√©actions (limite de 10 options)
        reactions = ["üá¶", "üáß", "üá®", "üá©", "üá™", "üá´", "üá¨", "üá≠", "üáÆ", "üáØ"]
        for idx in range(min(len(options), len(reactions))):
            await message.add_reaction(reactions[idx])

        # Sauvegarde du sondage pour afficher avec la commande /sondages
        polls.append({
            "message_id": message.id,
            "author": interaction.user,
            "question": question,
            "options": options,
            "timestamp": time.time()
        })

        # Confirme l'envoi avec un message sympathique
        await interaction.response.send_message(
            f"‚úÖ **Ton sondage a √©t√© envoy√© avec succ√®s !**\nLes membres peuvent maintenant r√©pondre en choisissant leurs options. üïí",
            ephemeral=True
        )

        # Envoi d'un message priv√© √† l'auteur
        try:
            dm_embed = discord.Embed(
                title="üì© Sondage envoy√© !",
                description=f"Merci pour ton sondage ! Voici les d√©tails :\n\n**‚ùì Question** : {question}\n**üîò Options** : {', '.join(options)}",
                color=discord.Color.green(),
                timestamp=discord.utils.utcnow()
            )
            dm_embed.set_footer(text="Merci pour ta participation et tes id√©es ! üôå")
            await interaction.user.send(embed=dm_embed)
        except discord.Forbidden:
            print(f"[ERREUR] Impossible d'envoyer un MP √† {interaction.user.display_name}.")
            await channel.send(f"‚ùó **{interaction.user.display_name}**, je ne peux pas t'envoyer de message priv√©. V√©rifie tes param√®tres de confidentialit√©.")

@bot.tree.command(name="sondage", description="üìä Cr√©e un sondage pour la communaut√©")
async def poll(interaction: discord.Interaction):
    """Commande pour cr√©er un sondage"""
    await interaction.response.send_modal(PollModal())

# Commande pour afficher les derniers sondages
@bot.tree.command(name="sondages", description="üì¢ Affiche les derniers sondages")
async def polls_command(interaction: discord.Interaction):
    """Commande pour afficher les derniers sondages"""
    if not polls:
        return await interaction.response.send_message("‚ùå Aucun sondage en cours. Sois le premier √† en cr√©er un !", ephemeral=True)

    # R√©cup√©rer les 5 derniers sondages
    recent_polls = polls[-5:]

    embeds = []
    for poll_data in recent_polls:
        embed = discord.Embed(
            title="üìä Sondage",
            description=f"üìù **Propos√© par** {poll_data['author'].mention}\n\n>>> {poll_data['question']}",
            color=discord.Color.blue(),
            timestamp=discord.utils.utcnow()
        )
        embed.add_field(name="üîò Options", value="\n".join([f"{idx + 1}. {option}" for idx, option in enumerate(poll_data['options'])]), inline=False)
        embed.set_footer(text=f"Envoy√© le {discord.utils.format_dt(discord.utils.snowflake_time(poll_data['message_id']), 'F')}")
        embeds.append(embed)

    # Envoi des embeds
    await interaction.response.send_message(embeds=embeds)

#-------------------------------------------------------------------------------- Rappel: /rappel

# Commande de rappel
@bot.tree.command(name="rappel", description="D√©finis un rappel avec une dur√©e, une raison et un mode d'alerte.")
@app_commands.describe(
    duree="Dur√©e du rappel (format: nombre suivi de 's', 'm', 'h' ou 'd')",
    raison="Pourquoi veux-tu ce rappel ?",
    mode="O√π voulez-vous que je vous rappelle ceci ?"
)
@app_commands.choices(
    mode=[
        app_commands.Choice(name="Message Priv√©", value="prive"),
        app_commands.Choice(name="Salon", value="salon")
    ]
)
async def rappel(interaction: discord.Interaction, duree: str, raison: str, mode: app_commands.Choice[str]):
    # V√©rification du format de dur√©e
    if not duree[:-1].isdigit() or duree[-1] not in "smhd":
        await interaction.response.send_message(
            "Format de dur√©e invalide. Utilisez un nombre suivi de 's' (secondes), 'm' (minutes), 'h' (heures) ou 'd' (jours).",
            ephemeral=True
        )
        return
    
    # Parsing de la dur√©e
    time_value = int(duree[:-1])  # Extrait le nombre
    time_unit = duree[-1]  # Extrait l'unit√© de temps
    
    # Convertir la dur√©e en secondes
    conversion = {'s': 1, 'm': 60, 'h': 3600, 'd': 86400}
    total_seconds = time_value * conversion[time_unit]
    
    # Limiter la dur√©e du rappel (max 7 jours pour √©viter les abus)
    max_seconds = 7 * 86400  # 7 jours
    if total_seconds > max_seconds:
        await interaction.response.send_message(
            "La dur√©e du rappel ne peut pas d√©passer 7 jours (604800 secondes).",
            ephemeral=True
        )
        return
    
    # Confirmation du rappel
    embed = discord.Embed(
        title="üîî Rappel programm√© !",
        description=f"**Raison :** {raison}\n**Dur√©e :** {str(timedelta(seconds=total_seconds))}\n**Mode :** {mode.name}",
        color=discord.Color.blue()
    )
    embed.set_footer(text="Je te rappellerai √† temps ‚è≥")
    await interaction.response.send_message(embed=embed, ephemeral=True)
    
    # Attendre le temps indiqu√©
    await asyncio.sleep(total_seconds)
    
    # Cr√©ation du rappel
    rappel_embed = discord.Embed(
        title="‚è∞ Rappel !",
        description=f"**Raison :** {raison}\n\n‚è≥ Temps √©coul√© : {str(timedelta(seconds=total_seconds))}",
        color=discord.Color.green()
    )
    rappel_embed.set_footer(text="Pense √† ne pas oublier ! üòâ")
    
    # Envoi en MP ou dans le salon
    if mode.value == "prive":
        try:
            await interaction.user.send(embed=rappel_embed)
        except discord.Forbidden:
            await interaction.followup.send(
                "Je n'ai pas pu t'envoyer le message en priv√©. Veuillez v√©rifier vos param√®tres de confidentialit√©.",
                ephemeral=True
            )
    else:
        await interaction.channel.send(f"{interaction.user.mention}", embed=rappel_embed)

THUMBNAIL_URL = "https://github.com/Iseyg91/Etherya/blob/main/3e3bd3c24e33325c7088f43c1ae0fadc.png?raw=true"

# Fonction pour v√©rifier si une URL est valide
def is_valid_url(url):
    regex = re.compile(
        r'^(https?://)?'  # http:// ou https:// (optionnel)
        r'([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}'  # domaine
        r'(/.*)?$'  # chemin (optionnel)
    )
    return bool(re.match(regex, url))

class EmbedBuilderView(discord.ui.View):
    def __init__(self, author: discord.User, channel: discord.TextChannel):
        super().__init__(timeout=180)
        self.author = author
        self.channel = channel
        self.embed = discord.Embed(title="Titre", description="Description", color=discord.Color.blue())
        self.embed.set_thumbnail(url=THUMBNAIL_URL)
        self.second_image_url = None
        self.message = None  # Stocke le message contenant l'embed

    async def interaction_check(self, interaction: discord.Interaction) -> bool:
        if interaction.user != self.author:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas modifier cet embed.", ephemeral=True)
            return False
        return True

    @discord.ui.button(label="Modifier le titre", style=discord.ButtonStyle.primary)
    async def edit_title(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedTitleModal(self))

    @discord.ui.button(label="Modifier la description", style=discord.ButtonStyle.primary)
    async def edit_description(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedDescriptionModal(self))

    @discord.ui.button(label="Changer la couleur", style=discord.ButtonStyle.primary)
    async def edit_color(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.embed.color = discord.Color.random()
        if self.message:
            await self.message.edit(embed=self.embed, view=self)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

    @discord.ui.button(label="Ajouter une image", style=discord.ButtonStyle.secondary)
    async def add_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedImageModal(self))

    @discord.ui.button(label="Ajouter 2√®me image", style=discord.ButtonStyle.secondary)
    async def add_second_image(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(EmbedSecondImageModal(self))

    @discord.ui.button(label="Envoyer", style=discord.ButtonStyle.success)
    async def send_embed(self, interaction: discord.Interaction, button: discord.ui.Button):
        embeds = [self.embed]
        if self.second_image_url:
            second_embed = discord.Embed(color=self.embed.color)
            second_embed.set_image(url=self.second_image_url)
            embeds.append(second_embed)

        await self.channel.send(embeds=embeds)
        await interaction.response.send_message("‚úÖ Embed envoy√© !", ephemeral=True)

class EmbedTitleModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Modifier le Titre")
        self.view = view
        self.title_input = discord.ui.TextInput(label="Nouveau Titre", required=True)
        self.add_item(self.title_input)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.title = self.title_input.value
        if self.view.message:
            await self.view.message.edit(embed=self.view.embed, view=self.view)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

class EmbedDescriptionModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Modifier la description")
        self.view = view
        self.description = discord.ui.TextInput(label="Nouvelle description", style=discord.TextStyle.paragraph, max_length=4000)
        self.add_item(self.description)

    async def on_submit(self, interaction: discord.Interaction):
        self.view.embed.description = self.description.value
        if self.view.message:
            await self.view.message.edit(embed=self.view.embed, view=self.view)
        else:
            await interaction.response.send_message("Erreur : impossible de modifier le message.", ephemeral=True)

class EmbedImageModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Ajouter une image")
        self.view = view
        self.image_input = discord.ui.TextInput(label="URL de l'image", required=True)
        self.add_item(self.image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if is_valid_url(self.image_input.value):
            self.view.embed.set_image(url=self.image_input.value)
            await self.view.message.edit(embed=self.view.embed, view=self.view)
        else:
            await interaction.response.send_message("‚ùå URL invalide.", ephemeral=True)

class EmbedSecondImageModal(discord.ui.Modal):
    def __init__(self, view: EmbedBuilderView):
        super().__init__(title="Ajouter une 2√®me image")
        self.view = view
        self.second_image_input = discord.ui.TextInput(label="URL de la 2√®me image", required=True)
        self.add_item(self.second_image_input)

    async def on_submit(self, interaction: discord.Interaction):
        if is_valid_url(self.second_image_input.value):
            self.view.second_image_url = self.second_image_input.value
        else:
            await interaction.response.send_message("‚ùå URL invalide.", ephemeral=True)

@bot.tree.command(name="embed", description="Cr√©er un embed personnalis√©")
async def embed_builder(interaction: discord.Interaction):
    await interaction.response.defer(ephemeral=True)
    admin_role_id = 792755123587645461  # ID du r√¥le admin
    if not any(role.id == admin_role_id or role.permissions.administrator for role in interaction.user.roles):
        return await interaction.response.send_message("‚ùå Vous n'avez pas la permission d'utiliser cette commande.", ephemeral=True)

    view = EmbedBuilderView(interaction.user, interaction.channel)
    response = await interaction.followup.send(embed=view.embed, view=view, ephemeral=True)
    view.message = response

# V√©rifie si l'utilisateur a les permissions administrateur
async def is_admin(ctx):
    return ctx.author.guild_permissions.administrator

# Commande pour lister les utilisateurs bannis
@bot.command()
@commands.check(is_admin)
async def listban(ctx):
    bans = await ctx.guild.bans()
    if not bans:
        await ctx.send("üìú Aucun utilisateur banni.")
    else:
        banned_users = "\n".join([f"{ban_entry.user.name}#{ban_entry.user.discriminator}" for ban_entry in bans])
        await ctx.send(f"üìú Liste des bannis :\n```\n{banned_users}\n```")

# Commande pour d√©bannir tout le monde
@bot.command(name="unbanall")  # Changement du nom de la commande
@commands.check(is_admin)
async def unbanall(ctx):  # Suppression du param√®tre option
    bans = await ctx.guild.bans()
    for ban_entry in bans:
        await ctx.guild.unban(ban_entry.user)
    await ctx.send("‚úÖ Tous les utilisateurs bannis ont √©t√© d√©bannis !")

giveaways = {}  # Stocke les participants

class GiveawayView(discord.ui.View):
    def __init__(self, ctx):
        super().__init__(timeout=180)
        self.ctx = ctx
        self.prize = " !!Giveaway !!"
        self.duration = 60  # En secondes
        self.duration_text = "60 secondes"
        self.emoji = "üéâ"
        self.winners = 1
        self.channel = ctx.channel
        self.message = None  # Pour stocker l'embed message

    async def update_embed(self):
        """ Met √† jour l'embed avec les nouvelles informations. """
        embed = discord.Embed(
            title="üéâ **Cr√©ation d'un Giveaway**",
            description=f"üéÅ **Gain:** {self.prize}\n"
                        f"‚è≥ **Dur√©e:** {self.duration_text}\n"
                        f"üèÜ **Gagnants:** {self.winners}\n"
                        f"üìç **Salon:** {self.channel.mention}",
            color=discord.Color.blurple()  # Utilisation d'une couleur bleue sympathique
        )
        embed.set_footer(text="Choisissez les options dans le menu d√©roulant ci-dessous.")
        embed.set_thumbnail(url="https://github.com/Iseyg91/Etherya-Gestion/blob/main/t%C3%A9l%C3%A9chargement%20(9).png?raw=true")  # Logo ou ic√¥ne du giveaway

        if self.message:
            await self.message.edit(embed=embed, view=self)

    async def parse_duration(self, text):
        """ Convertit un texte en secondes et retourne un affichage format√©. """
        duration_seconds = 0
        match = re.findall(r"(\d+)\s*(s|sec|m|min|h|hr|heure|d|jour|jours)", text, re.IGNORECASE)

        if not match:
            return None, None

        duration_text = []
        for value, unit in match:
            value = int(value)
            if unit in ["s", "sec"]:
                duration_seconds += value
                duration_text.append(f"{value} seconde{'s' if value > 1 else ''}")
            elif unit in ["m", "min"]:
                duration_seconds += value * 60
                duration_text.append(f"{value} minute{'s' if value > 1 else ''}")
            elif unit in ["h", "hr", "heure"]:
                duration_seconds += value * 3600
                duration_text.append(f"{value} heure{'s' if value > 1 else ''}")
            elif unit in ["d", "jour", "jours"]:
                duration_seconds += value * 86400
                duration_text.append(f"{value} jour{'s' if value > 1 else ''}")

        return duration_seconds, " ".join(duration_text)

    async def wait_for_response(self, interaction, prompt, parse_func=None):
        """ Attend une r√©ponse utilisateur avec une conversion de type si n√©cessaire. """
        await interaction.response.send_message(prompt, ephemeral=True)
        try:
            msg = await bot.wait_for("message", check=lambda m: m.author == interaction.user, timeout=30)
            return await parse_func(msg.content) if parse_func else msg.content
        except asyncio.TimeoutError:
            await interaction.followup.send("‚è≥ Temps √©coul√©. R√©essayez.", ephemeral=True)
            return None

    @discord.ui.select(
        placeholder="Choisir un param√®tre",
        options=[
            discord.SelectOption(label="üéÅ Modifier le gain", value="edit_prize"),
            discord.SelectOption(label="‚è≥ Modifier la dur√©e", value="edit_duration"),
            discord.SelectOption(label="üèÜ Modifier le nombre de gagnants", value="edit_winners"),
            discord.SelectOption(label="üí¨ Modifier le salon", value="edit_channel"),
            discord.SelectOption(label="üöÄ Envoyer le giveaway", value="send_giveaway"),
        ]
    )
    async def select_action(self, interaction: discord.Interaction, select: discord.ui.Select):
        value = select.values[0]

        if value == "edit_prize":
            response = await self.wait_for_response(interaction, "Quel est le gain du giveaway ?", str)
            if response:
                self.prize = response
                await self.update_embed()
        elif value == "edit_duration":
            response = await self.wait_for_response(interaction, 
                "Dur√©e du giveaway ? (ex: 10min, 2h, 1jour)", self.parse_duration)
            if response and response[0] > 0:
                self.duration, self.duration_text = response
                await self.update_embed()
        elif value == "edit_winners":
            response = await self.wait_for_response(interaction, "Combien de gagnants ?", lambda x: int(x))
            if response and response > 0:
                self.winners = response
                await self.update_embed()
        elif value == "edit_channel":
            await interaction.response.send_message("Mentionne le salon du giveaway.", ephemeral=True)
            msg = await bot.wait_for("message", check=lambda m: m.author == interaction.user, timeout=30)
            if msg.channel_mentions:
                self.channel = msg.channel_mentions[0]
                await self.update_embed()
            else:
                await interaction.followup.send("Aucun salon mentionn√©.", ephemeral=True)
        elif value == "send_giveaway":
            embed = discord.Embed(
                title="üéâ Giveaway !",
                description=f"üéÅ **Gain:** {self.prize}\n"
                            f"‚è≥ **Dur√©e:** {self.duration_text}\n"
                            f"üèÜ **Gagnants:** {self.winners}\n"
                            f"üìç **Salon:** {self.channel.mention}\n\n"
                            f"R√©agis avec {self.emoji} pour participer !",
                color=discord.Color.green()  # Utilisation d'une couleur de succ√®s pour l'envoi
            )
            embed.set_footer(text="Bonne chance √† tous les participants ! üéâ")
            embed.set_thumbnail(url="https://github.com/Iseyg91/Etherya-Gestion/blob/main/t%C3%A9l%C3%A9chargement%20(8).png?raw=true")  # Logo ou ic√¥ne du giveaway

            message = await self.channel.send(embed=embed)
            await message.add_reaction(self.emoji)

            giveaways[message.id] = {
                "prize": self.prize,
                "winners": self.winners,
                "emoji": self.emoji,
                "participants": []
            }

            await interaction.response.send_message(f"üéâ Giveaway envoy√© dans {self.channel.mention} !", ephemeral=True)

            await asyncio.sleep(self.duration)
            await self.end_giveaway(message)

    async def end_giveaway(self, message):
        data = giveaways.get(message.id)
        if not data:
            return

        participants = data["participants"]
        if len(participants) < 1:
            await message.channel.send("üö´ Pas assez de participants, giveaway annul√©.")
            return

        winners = random.sample(participants, min(data["winners"], len(participants)))
        winners_mentions = ", ".join(winner.mention for winner in winners)

        embed = discord.Embed(
            title="üèÜ Giveaway Termin√© !",
            description=f"üéÅ **Gain:** {data['prize']}\n"
                        f"üèÜ **Gagnants:** {winners_mentions}\n\n"
                        f"Merci d'avoir particip√© !",
            color=discord.Color.green()
        )
        embed.set_footer(text="Merci √† tous ! üéâ")
        embed.set_thumbnail(url="https://github.com/Iseyg91/Etherya-Gestion/blob/main/t%C3%A9l%C3%A9chargement%20(7).png?raw=true")  # Ic√¥ne ou logo de fin de giveaway

        await message.channel.send(embed=embed)
        del giveaways[message.id]


@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    message_id = reaction.message.id
    if message_id in giveaways and str(reaction.emoji) == giveaways[message_id]["emoji"]:
        if user not in giveaways[message_id]["participants"]:
            giveaways[message_id]["participants"].append(user)


@bot.command()
async def gcreate(ctx):
    view = GiveawayView(ctx)
    embed = discord.Embed(
        title="üéâ **Cr√©ation d'un Giveaway**",
        description="Utilise le menu d√©roulant ci-dessous pour configurer ton giveaway.\n\n"
                    "üéÅ **Gain:** Un cadeau myst√®re\n"
                    "‚è≥ **Dur√©e:** 60 secondes\n"
                    "üèÜ **Gagnants:** 1\n"
                    f"üìç **Salon:** {ctx.channel.mention}",
        color=discord.Color.blurple()  # Couleur de l'embed plus attractive
    )
    embed.set_footer(text="Choisis les options dans le menu d√©roulant ci-dessous.")
    embed.set_thumbnail(url="https://github.com/Iseyg91/Etherya-Gestion/blob/main/t%C3%A9l%C3%A9chargement%20(6).png?raw=true")  # Ic√¥ne ou logo du giveaway

    view.message = await ctx.send(embed=embed, view=view)
    
@bot.command()
async def alladmin(ctx):
    """Affiche la liste des administrateurs avec un joli embed"""
    admins = [member for member in ctx.guild.members if member.guild_permissions.administrator]

    if not admins:
        embed = discord.Embed(
            title="‚ùå Aucun administrateur trouv√©",
            description="Il semble que personne n'ait les permissions d'administrateur sur ce serveur.",
            color=discord.Color.red()
        )
        await ctx.send(embed=embed)
        return

    # Cr√©ation d'un embed styl√©
    embed = discord.Embed(
        title="üìú Liste des administrateurs",
        description=f"Voici les {len(admins)} administrateurs du serveur **{ctx.guild.name}** :",
        color=discord.Color.blue()
    )
    embed.set_thumbnail(url=ctx.guild.icon.url if ctx.guild.icon else None)
    embed.set_footer(text=f"Commande demand√©e par {ctx.author.name}", icon_url=ctx.author.avatar.url)

    for admin in admins:
        embed.add_field(name=f"üë§ {admin.name}#{admin.discriminator}", value=f"ID : `{admin.id}`", inline=False)

    await ctx.send(embed=embed)

# Dictionnaire pour stocker les messages supprim√©s {channel_id: deque[(timestamp, auteur, contenu)]}
sniped_messages = {}

@bot.event
async def on_message_delete(message):
    if message.author.bot:
        return  # Ignore les bots

    channel_id = message.channel.id
    timestamp = time.time()
    
    if channel_id not in sniped_messages:
        sniped_messages[channel_id] = deque(maxlen=10)  # Stocker jusqu'√† 10 messages par salon
    
    sniped_messages[channel_id].append((timestamp, message.author, message.content))
    
    # Nettoyage des vieux messages apr√®s 5 minutes
    await asyncio.sleep(300)
    now = time.time()
    sniped_messages[channel_id] = deque([(t, a, c) for t, a, c in sniped_messages[channel_id] if now - t < 300])

@bot.command()
async def snipe(ctx, index: int = 1):
    channel_id = ctx.channel.id
    
    if channel_id not in sniped_messages or len(sniped_messages[channel_id]) == 0:
        await ctx.send("Aucun message r√©cent supprim√© trouv√© !")
        return

    if not (1 <= index <= len(sniped_messages[channel_id])):
        await ctx.send(f"Il n'y a que {len(sniped_messages[channel_id])} messages enregistr√©s.")
        return

    timestamp, author, content = sniped_messages[channel_id][-index]
    embed = discord.Embed(
        title=f"Message supprim√© de {author}",
        description=content,
        color=discord.Color.red(),
        timestamp=discord.utils.utcnow()
    )
    embed.set_footer(text=f"Demand√© par {ctx.author}")

    await ctx.send(embed=embed)

    # Si le salon est configur√©
    if presentation_channel_id:
        try:
            # Envoi direct du modal pour remplir la pr√©sentation
            await interaction.response.send_modal(PresentationForm())
        except Exception as e:
            await interaction.response.send_message(f"‚ùå Une erreur s'est produite : {str(e)}", ephemeral=True)
    else:
        # Si aucun salon de pr√©sentation n'est configur√©, avertir l'utilisateur
        await interaction.response.send_message("‚ùå Le salon de pr√©sentation n'est pas encore configur√©. Veuillez configurer le salon via les param√®tres du bot.", ephemeral=True)


# Cr√©ation du formulaire (modal)
class PresentationForm(discord.ui.Modal, title="Faisons connaissance !"):
    pseudo = TextInput(label="Ton pseudo", placeholder="Ex: Jean_57", required=True)
    age = TextInput(label="Ton √¢ge", placeholder="Ex: 18", required=True)
    passion = TextInput(label="Ta passion principale", placeholder="Ex: Gaming, Musique...", required=True)
    bio = TextInput(label="Une courte bio", placeholder="Parle un peu de toi...", style=discord.TextStyle.paragraph, required=True)

    # Ce qui se passe lorsque l'utilisateur soumet le formulaire
    async def on_submit(self, interaction: discord.Interaction):
        guild_id = interaction.guild.id

        # Charger les param√®tres du serveur depuis la base de donn√©es
        guild_settings = load_guild_settings(guild_id)
        presentation_channel_id = guild_settings.get('setup', {}).get('presentation_channel')

        if presentation_channel_id:
            presentation_channel = interaction.guild.get_channel(presentation_channel_id)

            if presentation_channel:
                # Cr√©er l'embed avec les informations soumises
                embed = discord.Embed(
                    title=f"Pr√©sentation de {interaction.user.name}",
                    description="Une nouvelle pr√©sentation vient d'√™tre envoy√©e ! üéâ",
                    color=discord.Color.blue()
                )
                embed.set_thumbnail(url=interaction.user.display_avatar.url)
                embed.add_field(name="üë§ Pseudo", value=self.pseudo.value, inline=True)
                embed.add_field(name="üéÇ √Çge", value=self.age.value, inline=True)
                embed.add_field(name="üé® Passion", value=self.passion.value, inline=False)
                embed.add_field(name="üìù Bio", value=self.bio.value, inline=False)
                embed.set_footer(text=f"ID de l'utilisateur: {interaction.user.id}")

                # Envoyer l'embed dans le salon de pr√©sentation
                await presentation_channel.send(embed=embed)
                await interaction.response.send_message("Ta pr√©sentation a √©t√© envoy√©e ! üéâ")
            else:
                await interaction.response.send_message("Le salon de pr√©sentation n'existe plus ou est invalide.")
        else:
            await interaction.response.send_message("Le salon de pr√©sentation n'a pas √©t√© configur√© pour ce serveur.")

# Fonction de la commande /presentation
@bot.tree.command(name="presentation", description="Remplis le formulaire pour te pr√©senter √† la communaut√© !")
async def presentation(interaction: discord.Interaction):
    guild_id = interaction.guild.id

    # Charger les param√®tres du serveur depuis la base de donn√©es
    guild_settings = load_guild_settings(guild_id)
    print(f"Guild settings for {guild_id}: {guild_settings}")  # Ajout d'un log

    # R√©cup√©rer l'ID du salon de pr√©sentation depuis les param√®tres du serveur
    presentation_channel_id = guild_settings.get('setup', {}).get('presentation_channel')
    if not presentation_channel_id:
        print("Salon de pr√©sentation non trouv√© dans la base de donn√©es pour le serveur")

    # V√©rifier si le salon de pr√©sentation est configur√©
    if presentation_channel_id:
        # Si le salon est configur√©, afficher le modal de pr√©sentation
        await interaction.response.send_modal(PresentationForm())
    else:
        # Si le salon n'est pas configur√©, informer l'utilisateur
        await interaction.response.send_message("Le salon de pr√©sentation n'a pas √©t√© configur√© pour ce serveur.")

@bot.command()
@commands.has_permissions(administrator=True)
async def lock(ctx):
    """Emp√™che @everyone de parler dans le salon actuel (admin only)."""
    overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
    overwrite.send_messages = False
    await ctx.channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
    await ctx.send("üîí Salon verrouill√©. Seuls les r√¥les autoris√©s peuvent parler.")

@bot.command()
@commands.has_permissions(administrator=True)
async def unlock(ctx):
    """Autorise @everyone √† parler dans le salon actuel (admin only)."""
    overwrite = ctx.channel.overwrites_for(ctx.guild.default_role)
    overwrite.send_messages = True
    await ctx.channel.set_permissions(ctx.guild.default_role, overwrite=overwrite)
    await ctx.send("üîì Salon d√©verrouill√©. Tout le monde peut parler √† nouveau.")

# Token pour d√©marrer le bot (√† partir des secrets)
# Lancer le bot avec ton token depuis l'environnement  
keep_alive()
bot.run(token)
